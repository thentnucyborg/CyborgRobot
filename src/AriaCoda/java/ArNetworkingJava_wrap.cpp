/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_ArNetworkingJavaJNI = NULL;
    jmethodID director_method_ids[13];
  }
}

/* SWIG wrapper.i for ArNetworking */


#include <cstddef>
#include "Aria.h"
#include "ArNetworking.h"
#include "ArClientHandlerRobotUpdate.h"
#include "ArClientRatioDrive.h"
#include "ArServerModeJogPosition.h"
#include "../include/wrapper_ExtraClasses.h"


/* End SWIG wraper.i for ArNetworking */



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ArNetworkingJava_wrap.h"

SwigDirector_ArFunctor_ServerClient::SwigDirector_ArFunctor_ServerClient(JNIEnv *jenv) : ArFunctor1< ArServerClient * >(), Swig::Director(jenv) {
}

SwigDirector_ArFunctor_ServerClient::~SwigDirector_ArFunctor_ServerClient() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArFunctor_ServerClient::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor1< ArServerClient * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArServerClient * >::invoke ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArFunctor_ServerClient::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArServerClient * >::getName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArFunctor_ServerClient::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    Swig::LocalRefGuard name_refguard(jenv, jname);
    // boohoo
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[2], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArServerClient * >::setName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor_ServerClient::invoke(ArServerClient *p1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor1< ArServerClient * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArServerClient **)&jp1) = (ArServerClient *) p1; 
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[3], swigjobj, jp1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArServerClient * >::invoke ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor_ServerClient::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invoke", "(Lcom/mobilerobots/ArNetworking/ArServerClient;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/ArNetworking/ArFunctor_ServerClient");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArFunctor_NetPacket::SwigDirector_ArFunctor_NetPacket(JNIEnv *jenv) : ArFunctor1< ArNetPacket * >(), Swig::Director(jenv) {
}

SwigDirector_ArFunctor_NetPacket::~SwigDirector_ArFunctor_NetPacket() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArFunctor_NetPacket::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor1< ArNetPacket * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArNetPacket * >::invoke ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArFunctor_NetPacket::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[5], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArNetPacket * >::getName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArFunctor_NetPacket::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    Swig::LocalRefGuard name_refguard(jenv, jname);
    // boohoo
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[6], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArNetPacket * >::setName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor_NetPacket::invoke(ArNetPacket *p1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor1< ArNetPacket * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArNetPacket **)&jp1) = (ArNetPacket *) p1; 
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[7], swigjobj, jp1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor1< ArNetPacket * >::invoke ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor_NetPacket::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invoke", "(Lcom/mobilerobots/ArNetworking/ArNetPacket;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/ArNetworking/ArFunctor_NetPacket");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArFunctor_ServerData::SwigDirector_ArFunctor_ServerData(JNIEnv *jenv) : ArFunctor2< ArServerClient *,ArNetPacket * >(), Swig::Director(jenv) {
}

SwigDirector_ArFunctor_ServerData::~SwigDirector_ArFunctor_ServerData() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArFunctor_ServerData::invoke() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor2< ArServerClient *,ArNetPacket * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[8], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor2< ArServerClient *,ArNetPacket * >::invoke ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

char const *SwigDirector_ArFunctor_ServerData::getName() {
  char *c_result = 0 ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    return ArFunctor::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[9], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = 0;
    if (jresult) {
      c_result = (char *)jenv->GetStringUTFChars(jresult, 0);
      if (!c_result) return (char const *)c_result;
    }
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor2< ArServerClient *,ArNetPacket * >::getName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return (char const *)c_result;
}

void SwigDirector_ArFunctor_ServerData::setName(char const *name) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  
  if (!swig_override[2]) {
    ArFunctor::setName(name);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return ;
    }
    Swig::LocalRefGuard name_refguard(jenv, jname);
    // boohoo
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[10], swigjobj, jname);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor2< ArServerClient *,ArNetPacket * >::setName ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor_ServerData::invoke(ArServerClient *p1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor2< ArServerClient *,ArNetPacket * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArServerClient **)&jp1) = (ArServerClient *) p1; 
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[11], swigjobj, jp1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor2< ArServerClient *,ArNetPacket * >::invoke ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor_ServerData::invoke(ArServerClient *p1, ArNetPacket *p2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  jlong jp2 = 0 ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArFunctor2< ArServerClient *,ArNetPacket * >::invoke.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((ArServerClient **)&jp1) = (ArServerClient *) p1; 
    *((ArNetPacket **)&jp2) = (ArNetPacket *) p2; 
    jenv->CallStaticVoidMethod(Swig::jclass_ArNetworkingJavaJNI, Swig::director_method_ids[12], swigjobj, jp1, jp2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArFunctor2< ArServerClient *,ArNetPacket * >::invoke ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ArFunctor_ServerData::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "invoke", "()V", NULL 
    },
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "setName", "(Ljava/lang/String;)V", NULL 
    },
    {
      "invoke", "(Lcom/mobilerobots/ArNetworking/ArServerClient;)V", NULL 
    },
    {
      "invoke", "(Lcom/mobilerobots/ArNetworking/ArServerClient;Lcom/mobilerobots/ArNetworking/ArNetPacket;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/mobilerobots/ArNetworking/ArFunctor_ServerData");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 5; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_SWIG_1IMPORTED_1ARIA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArFunctor_1ServerClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctor1< ArServerClient * > *arg1 = (ArFunctor1< ArServerClient * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctor1< ArServerClient * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerClient_1invoke_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor1< ArServerClient * > *arg1 = (ArFunctor1< ArServerClient * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< ArServerClient * > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerClient_1invoke_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArFunctor1< ArServerClient * > *arg1 = (ArFunctor1< ArServerClient * > *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArFunctor1< ArServerClient * > **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  (arg1)->invoke(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArFunctor_1ServerClient(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArFunctor1< ArServerClient * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArFunctor1< ArServerClient * > *)new SwigDirector_ArFunctor_ServerClient(jenv);
  *(ArFunctor1< ArServerClient * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerClient_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArFunctor1< ArServerClient * > *obj = *((ArFunctor1< ArServerClient * > **)&objarg);
  (void)jcls;
  SwigDirector_ArFunctor_ServerClient *director = dynamic_cast<SwigDirector_ArFunctor_ServerClient *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerClient_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArFunctor1< ArServerClient * > *obj = *((ArFunctor1< ArServerClient * > **)&objarg);
  SwigDirector_ArFunctor_ServerClient *director = dynamic_cast<SwigDirector_ArFunctor_ServerClient *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArFunctor_1NetPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctor1< ArNetPacket * > *arg1 = (ArFunctor1< ArNetPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctor1< ArNetPacket * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1NetPacket_1invoke_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor1< ArNetPacket * > *arg1 = (ArFunctor1< ArNetPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor1< ArNetPacket * > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1NetPacket_1invoke_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArFunctor1< ArNetPacket * > *arg1 = (ArFunctor1< ArNetPacket * > *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArFunctor1< ArNetPacket * > **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->invoke(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArFunctor_1NetPacket(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArFunctor1< ArNetPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArFunctor1< ArNetPacket * > *)new SwigDirector_ArFunctor_NetPacket(jenv);
  *(ArFunctor1< ArNetPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1NetPacket_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArFunctor1< ArNetPacket * > *obj = *((ArFunctor1< ArNetPacket * > **)&objarg);
  (void)jcls;
  SwigDirector_ArFunctor_NetPacket *director = dynamic_cast<SwigDirector_ArFunctor_NetPacket *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1NetPacket_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArFunctor1< ArNetPacket * > *obj = *((ArFunctor1< ArNetPacket * > **)&objarg);
  SwigDirector_ArFunctor_NetPacket *director = dynamic_cast<SwigDirector_ArFunctor_NetPacket *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArFunctor_1ServerData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg1 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerData_1invoke_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg1 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg1; 
  (arg1)->invoke();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerData_1invoke_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg1 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  (arg1)->invoke(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerData_1invoke_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg1 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->invoke(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArFunctor_1ServerData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArFunctor2< ArServerClient *,ArNetPacket * > *)new SwigDirector_ArFunctor_ServerData(jenv);
  *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerData_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ArFunctor2< ArServerClient *,ArNetPacket * > *obj = *((ArFunctor2< ArServerClient *,ArNetPacket * > **)&objarg);
  (void)jcls;
  SwigDirector_ArFunctor_ServerData *director = dynamic_cast<SwigDirector_ArFunctor_ServerData *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerData_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArFunctor2< ArServerClient *,ArNetPacket * > *obj = *((ArFunctor2< ArServerClient *,ArNetPacket * > **)&objarg);
  SwigDirector_ArFunctor_ServerData *director = dynamic_cast<SwigDirector_ArFunctor_ServerData *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArNetPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  ArTypes::UByte2 arg1 ;
  ArNetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArTypes::UByte2)jarg1; 
  result = (ArNetPacket *)new ArNetPacket(arg1);
  *(ArNetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArNetPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNetPacket *)new ArNetPacket();
  *(ArNetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArNetPacket_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNetPacket *arg1 = 0 ;
  ArNetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArNetPacket const & reference is null");
    return 0;
  } 
  result = (ArNetPacket *)new ArNetPacket((ArNetPacket const &)*arg1);
  *(ArNetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArNetPacket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNetPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1setCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  ArTypes::UByte2 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  (arg1)->setCommand(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1getCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  ArTypes::UByte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  result = (ArTypes::UByte2)(arg1)->getCommand();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1SIZE_1OF_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNetPacket::SIZE_OF_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1MAX_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNetPacket::MAX_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1HEADER_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNetPacket::HEADER_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1FOOTER_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNetPacket::FOOTER_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1MAX_1DATA_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArNetPacket::MAX_DATA_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1doubleToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->doubleToBuf(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1bufToDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  result = (double)(arg1)->bufToDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  (arg1)->empty();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1finalizePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  (arg1)->finalizePacket();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1resetRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  (arg1)->resetRead();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1duplicatePacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetPacket **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->duplicatePacket(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1verifyCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  result = (bool)(arg1)->verifyCheckSum();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1calcCheckSum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  ArTypes::Byte2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  result = (ArTypes::Byte2)(arg1)->calcCheckSum();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1getAddedFooter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  result = (bool)(arg1)->getAddedFooter();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1setAddedFooter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAddedFooter(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1getPacketSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  ArNetPacket::PacketSource result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  result = (ArNetPacket::PacketSource)(arg1)->getPacketSource();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1setPacketSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  ArNetPacket::PacketSource arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  arg2 = (ArNetPacket::PacketSource)jarg2; 
  (arg1)->setPacketSource(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1setArbitraryString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setArbitraryString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1getArbitraryString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArNetPacket *arg1 = (ArNetPacket *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacket **)&jarg1; 
  result = (char *)(arg1)->getArbitraryString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10, jint jarg11, jint jarg12) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  int arg11 ;
  int arg12 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10, jint jarg11) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  int arg11 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  arg11 = (int)jarg11; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,arg8,arg9,arg10);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,arg8,arg9);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jboolean jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,arg8);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jboolean jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *arg4 = (char *) 0 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3,(char const *)arg4);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2,arg3);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jboolean jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArServerBase *)new ArServerBase(arg1,(char const *)arg2);
  *(ArServerBase **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArServerBase *)new ArServerBase(arg1);
  *(ArServerBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerBase_1_1SWIG_112(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArServerBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerBase *)new ArServerBase();
  *(ArServerBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->open(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->open(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1loopOnce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->loopOnce();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (bool)(arg1)->addData((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (bool)(arg1)->addData((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)(arg1)->addData((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1loadUserInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->loadUserInfo((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1loadUserInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->loadUserInfo((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logUserInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->logUserInfo();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logCommandGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->logCommandGroups();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logCommandGroupsToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->logCommandGroupsToFile((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1setGroupDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setGroupDescription((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logGroupDescriptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->logGroupDescriptions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logGroupDescriptionsToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->logGroupDescriptionsToFile((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1setServerKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setServerKey((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1rejectSinceUsingCentralServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->rejectSinceUsingCentralServer((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1enforceProtocolVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->enforceProtocolVersion((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1enforceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerCommands::Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (ArServerCommands::Type)jarg2; 
  (arg1)->enforceType(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1setBackupTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBackupTimeout(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1runAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logConnections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->logConnections((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logConnections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->logConnections();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getNumClients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (int)(arg1)->getNumClients();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1findCommandFromName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (unsigned int)(arg1)->findCommandFromName((char const *)arg2);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->broadcastPacketTcp(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpToMatching_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClientIdentifier arg4 ;
  bool arg5 ;
  ArServerClientIdentifier *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(ArServerClientIdentifier **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->broadcastPacketTcpToMatching(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpToMatching_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClientIdentifier arg4 ;
  ArServerClientIdentifier *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(ArServerClientIdentifier **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->broadcastPacketTcpToMatching(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpWithExclusion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  bool arg7 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->broadcastPacketTcpWithExclusion(arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpWithExclusion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->broadcastPacketTcpWithExclusion(arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpWithExclusion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->broadcastPacketTcpWithExclusion(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpWithExclusion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  result = (bool)(arg1)->broadcastPacketTcpWithExclusion(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->broadcastPacketUdp(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpWithExclusion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  bool arg7 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->broadcastPacketUdpWithExclusion(arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpWithExclusion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->broadcastPacketUdpWithExclusion(arg2,(char const *)arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpWithExclusion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->broadcastPacketUdpWithExclusion(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpWithExclusion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArServerClient **)&jarg4; 
  result = (bool)(arg1)->broadcastPacketUdpWithExclusion(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpToMatching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerClientIdentifier arg4 ;
  bool arg5 ;
  ArServerClientIdentifier *argp4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  argp4 = *(ArServerClientIdentifier **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->broadcastPacketUdpToMatching(arg2,(char const *)arg3,arg4,arg5);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1sleepAfterSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->sleepAfterSend(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1idleProcessingPending(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (bool)(arg1)->idleProcessingPending();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1processPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  sockaddr_in *arg3 = (sockaddr_in *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = *(sockaddr_in **)&jarg3; 
  (arg1)->processPacket(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1sendUdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  sockaddr_in *arg3 = (sockaddr_in *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = *(sockaddr_in **)&jarg3; 
  result = (bool)(arg1)->sendUdp(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logTracking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->logTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1logTracking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->logTracking();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1resetTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->resetTracking();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getTcpPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (unsigned int)(arg1)->getTcpPort();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getUdpPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (unsigned int)(arg1)->getUdpPort();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getOpenOnIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (char *)(arg1)->getOpenOnIP();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addCycleCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addCycleCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1remCycleCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remCycleCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addClientRemovedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor1< ArServerClient * > *arg2 = (ArFunctor1< ArServerClient * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor1< ArServerClient * > **)&jarg2; 
  (arg1)->addClientRemovedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1remClientRemovedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor1< ArServerClient * > *arg2 = (ArFunctor1< ArServerClient * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor1< ArServerClient * > **)&jarg2; 
  (arg1)->remClientRemovedCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1makeNewServerClientFromSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  bool arg3 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArServerClient *)(arg1)->makeNewServerClientFromSocket(arg2,arg3);
  *(ArServerClient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getUserInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerUserInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (ArServerUserInfo *)((ArServerBase const *)arg1)->getUserInfo();
  *(ArServerUserInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1setUserInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerUserInfo *arg2 = (ArServerUserInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArServerUserInfo **)&jarg2; 
  (arg1)->setUserInfo((ArServerUserInfo const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addDataAdvanced_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jlong jarg10, jlong jarg11) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  unsigned int arg9 ;
  ArFunctor2< long,unsigned int > *arg10 = (ArFunctor2< long,unsigned int > *) 0 ;
  ArRetFunctor2< bool,ArServerClient *,ArNetPacket * > *arg11 = (ArRetFunctor2< bool,ArServerClient *,ArNetPacket * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (unsigned int)jarg9; 
  arg10 = *(ArFunctor2< long,unsigned int > **)&jarg10; 
  arg11 = *(ArRetFunctor2< bool,ArServerClient *,ArNetPacket * > **)&jarg11; 
  result = (bool)(arg1)->addDataAdvanced((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9,arg10,arg11);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addDataAdvanced_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jlong jarg10) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  unsigned int arg9 ;
  ArFunctor2< long,unsigned int > *arg10 = (ArFunctor2< long,unsigned int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (unsigned int)jarg9; 
  arg10 = *(ArFunctor2< long,unsigned int > **)&jarg10; 
  result = (bool)(arg1)->addDataAdvanced((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9,arg10);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addDataAdvanced_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jlong jarg9) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  unsigned int arg9 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (unsigned int)jarg9; 
  result = (bool)(arg1)->addDataAdvanced((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addDataAdvanced_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (bool)(arg1)->addDataAdvanced((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addDataAdvanced_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (bool)(arg1)->addDataAdvanced((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addDataAdvanced_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)(arg1)->addDataAdvanced((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1setAdditionalDataFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setAdditionalDataFlags((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getFrequency_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jint jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (long)(arg1)->getFrequency(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getFrequency_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (long)(arg1)->getFrequency(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpByCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->broadcastPacketTcpByCommand(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpByCommandWithExclusion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  bool arg7 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->broadcastPacketTcpByCommandWithExclusion(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpByCommandWithExclusion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->broadcastPacketTcpByCommandWithExclusion(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpByCommandWithExclusion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->broadcastPacketTcpByCommandWithExclusion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketTcpByCommandWithExclusion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  result = (bool)(arg1)->broadcastPacketTcpByCommandWithExclusion(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpByCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->broadcastPacketUdpByCommand(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpByCommandWithExclusion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_, jboolean jarg7) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  bool arg7 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->broadcastPacketUdpByCommandWithExclusion(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpByCommandWithExclusion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  ArServerClientIdentifier arg6 ;
  ArServerClientIdentifier *argp6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  argp6 = *(ArServerClientIdentifier **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)(arg1)->broadcastPacketUdpByCommandWithExclusion(arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpByCommandWithExclusion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->broadcastPacketUdpByCommandWithExclusion(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1broadcastPacketUdpByCommandWithExclusion_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  unsigned int arg3 ;
  ArServerClient *arg4 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = *(ArServerClient **)&jarg4; 
  result = (bool)(arg1)->broadcastPacketUdpByCommandWithExclusion(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1closeConnectionID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArTypes::UByte4 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (ArTypes::UByte4)jarg2; 
  (arg1)->closeConnectionID(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1dataHasFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->dataHasFlag((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1dataHasFlagByCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->dataHasFlagByCommand(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1setDebugLogging_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDebugLogging(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1setDebugLogging_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->setDebugLogging();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getDebugLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (bool)(arg1)->getDebugLogging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1getMostClients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (int)(arg1)->getMostClients();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1allowingIdlePackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (bool)(arg1)->allowingIdlePackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addIdleSingleShotCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  result = (bool)(arg1)->addIdleSingleShotCallback(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1hasSlowPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (bool)(arg1)->hasSlowPackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1hasIdlePackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (bool)(arg1)->hasIdlePackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1hasIdleCallbacks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (bool)(arg1)->hasIdleCallbacks();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1internalSetNumClients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->internalSetNumClients(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addTooManyClientsCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addTooManyClientsCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1addTooManyClientsCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->addTooManyClientsCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1remTooManyClientsCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->remTooManyClientsCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1internalSetDefaultFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->internalSetDefaultFrequency((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1internalLockup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  (arg1)->internalLockup();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1remData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remData((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerMode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerMode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArActionGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (ArActionGroup *)(arg1)->getActionGroup();
  *(ArActionGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1activationDenied(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->activationDenied();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1requestUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->requestUnlock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1forceUnlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->forceUnlock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1lockMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->lockMode(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1lockMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->lockMode();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1unlockMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->unlockMode();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (char *)((ArServerMode const *)arg1)->getMode();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (char *)((ArServerMode const *)arg1)->getStatus();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getExtendedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (char *)((ArServerMode const *)arg1)->getExtendedStatus();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActiveModeModeString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArServerMode::getActiveModeModeString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActiveModeStatusString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArServerMode::getActiveModeStatusString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActiveModeExtendedStatusString(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)ArServerMode::getActiveModeExtendedStatusString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (char *)((ArServerMode const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (bool)((ArServerMode const *)arg1)->isActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1isLocked(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ArServerMode::isLocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1willUnlockIfRequested(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ArServerMode::willUnlockIfRequested();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActiveMode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArServerMode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerMode *)ArServerMode::getActiveMode();
  *(ArServerMode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1hasSetActivityTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (bool)(arg1)->hasSetActivityTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActivityTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (arg1)->getActivityTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1setActivityTimeToNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->setActivityTimeToNow();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActiveModeActivityTimeSecSince(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArServerMode::getActiveModeActivityTimeSecSince();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getActiveModeSetActivityThisCycle(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)ArServerMode::getActiveModeSetActivityThisCycle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addAsDefaultMode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArListPos::Pos arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = (ArListPos::Pos)jarg2; 
  (arg1)->addAsDefaultMode(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addAsDefaultMode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->addAsDefaultMode();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1checkDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  (arg1)->checkDefault();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setMode((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setStatus((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1isAutoResumeAfterInterrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerMode **)&jarg1; 
  result = (bool)(arg1)->isAutoResumeAfterInterrupt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addModeData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  jboolean jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (bool)(arg1)->addModeData((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addModeData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (bool)(arg1)->addModeData((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addModeData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)(arg1)->addModeData((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getModeDataList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  ArServerMode::getModeDataList(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getModeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  ArServerMode::getModeInfo(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getModeBusy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  ArServerMode::getModeBusy(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addActivateCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addActivateCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addActivateCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addActivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1remActivateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remActivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addDeactivateCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDeactivateCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addDeactivateCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDeactivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1remDeactivateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDeactivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addSingleShotDeactivateCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addSingleShotDeactivateCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addSingleShotDeactivateCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSingleShotDeactivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1remSingleShotDeactivateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSingleShotDeactivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addSingleShotPostDeactivateCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addSingleShotPostDeactivateCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1addSingleShotPostDeactivateCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSingleShotPostDeactivateCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1remSingleShotPostDeactivateCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerMode *arg1 = (ArServerMode *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerMode **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSingleShotPostDeactivateCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerMode_1getIdleMode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArServerModeIdle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerModeIdle *)ArServerMode::getIdleMode();
  *(ArServerModeIdle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArPriority::Priority arg2 ;
  int arg3 ;
  bool arg4 ;
  ArClientArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (ArPriority::Priority)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (ArClientArg *)new ArClientArg(arg1,arg2,arg3,arg4);
  *(ArClientArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArPriority::Priority arg2 ;
  int arg3 ;
  ArClientArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (ArPriority::Priority)jarg2; 
  arg3 = (int)jarg3; 
  result = (ArClientArg *)new ArClientArg(arg1,arg2,arg3);
  *(ArClientArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientArg_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArPriority::Priority arg2 ;
  ArClientArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (ArPriority::Priority)jarg2; 
  result = (ArClientArg *)new ArClientArg(arg1,arg2);
  *(ArClientArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientArg_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  ArClientArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (ArClientArg *)new ArClientArg(arg1);
  *(ArClientArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientArg_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArClientArg *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientArg *)new ArClientArg();
  *(ArClientArg **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientArg(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientArg **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1isSendableParamType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (bool)ArClientArg::isSendableParamType((ArConfigArg const &)*arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1isSendableParamType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArConfigArg *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArConfigArg **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  result = (bool)ArClientArg::isSendableParamType((ArConfigArg const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1createArg_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  ArConfigArg *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = *(ArConfigArg **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg & reference is null");
    return 0;
  } 
  arg4 = *(std::string **)&jarg4; 
  result = (bool)(arg1)->createArg(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1createArg_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  ArConfigArg *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = *(ArConfigArg **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->createArg(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1createPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = *(ArNetPacket **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->createPacket((ArConfigArg const &)*arg2,arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1createPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->createPacket((ArConfigArg const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1bufToArgValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  ArConfigArg *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = *(ArConfigArg **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->bufToArgValue(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1argValueToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->argValueToBuf((ArConfigArg const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1argTextToBuf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->argTextToBuf((ArConfigArg const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1addArgTextToPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArConfigArg *arg2 = 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArConfigArg const & reference is null");
    return 0;
  } 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->addArgTextToPacket((ArConfigArg const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1addAncestorListToPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  std::list< ArConfigArg * > *arg2 = 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(std::list< ArConfigArg * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::list< ArConfigArg * > const & reference is null");
    return 0;
  } 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->addAncestorListToPacket((std::list< ArConfigArg * > const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1addListBeginToPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArConfigArg *arg2 = (ArConfigArg *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->addListBeginToPacket(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientArg_1addListEndToPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientArg *arg1 = (ArClientArg *) 0 ;
  ArConfigArg *arg2 = (ArConfigArg *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArClientArg **)&jarg1; 
  arg2 = *(ArConfigArg **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->addListEndToPacket(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1CLIENT_1KEY_1LENGTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArClientBase::CLIENT_KEY_LENGTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArClientBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientBase *)new ArClientBase();
  *(ArClientBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setRobotName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jint jarg4) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  (arg1)->setRobotName((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setRobotName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->setRobotName((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setRobotName_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setRobotName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getRobotName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (char *)((ArClientBase const *)arg1)->getRobotName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getLogPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (char *)((ArClientBase const *)arg1)->getLogPrefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getDebugLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->getDebugLogging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1blockingConnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (bool)(arg1)->blockingConnect((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1blockingConnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jstring jarg5, jstring jarg6) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (bool)(arg1)->blockingConnect((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1blockingConnect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->blockingConnect((char const *)arg2,arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1blockingConnect_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->blockingConnect((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1blockingConnect_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->blockingConnect((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->disconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1disconnectSoon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->disconnectSoon();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1wasRejected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->wasRejected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientBase::ClientState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientBase::ClientState)(arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1addHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArFunctor1< ArNetPacket * > *arg3 = (ArFunctor1< ArNetPacket * > *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArFunctor1< ArNetPacket * > **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->addHandler((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1addHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArFunctor1< ArNetPacket * > *arg3 = (ArFunctor1< ArNetPacket * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArFunctor1< ArNetPacket * > **)&jarg3; 
  result = (bool)(arg1)->addHandler((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1remHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArFunctor1< ArNetPacket * > *arg3 = (ArFunctor1< ArNetPacket * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArFunctor1< ArNetPacket * > **)&jarg3; 
  result = (bool)(arg1)->remHandler((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1request_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  ArNetPacket *arg4 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  arg4 = *(ArNetPacket **)&jarg4; 
  result = (bool)(arg1)->request((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1request_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->request((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->requestStop((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnce_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArNetPacket **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->requestOnce((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnce_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->requestOnce((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnce_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->requestOnce((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceUdp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArNetPacket **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->requestOnceUdp((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceUdp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->requestOnceUdp((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceUdp_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->requestOnceUdp((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceWithString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->requestOnceWithString((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceWithInt16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::Byte2 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::Byte2)jarg3; 
  result = (bool)(arg1)->requestOnceWithInt16((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceWithInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::Byte4 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (ArTypes::Byte4)jarg3; 
  result = (bool)(arg1)->requestOnceWithInt32((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceWithDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->requestOnceWithDouble((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1dataExists(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->dataExists((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getHost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (char *)(arg1)->getHost();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (int)(arg1)->getPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setServerKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->setServerKey((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setServerKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setServerKey((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1enforceProtocolVersion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->enforceProtocolVersion((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1enforceProtocolVersion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->enforceProtocolVersion((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1enforceType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArServerCommands::Type arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (ArServerCommands::Type)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->enforceType(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1enforceType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArServerCommands::Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (ArServerCommands::Type)jarg2; 
  (arg1)->enforceType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getLastPacketReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (arg1)->getLastPacketReceived();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setBackupTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBackupTimeout(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1runAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->runAsync();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1stopRunning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->stopRunning();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1isStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->isStopped();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1logDataList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->logDataList();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1addCycleCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addCycleCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1remCycleCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remCycleCallback(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1sendPacketTcp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  result = (bool)(arg1)->sendPacketTcp(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1sendPacketUdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  result = (bool)(arg1)->sendPacketUdp(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setConnectTimeoutTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConnectTimeoutTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getConnectTimeoutTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (int)(arg1)->getConnectTimeoutTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1logTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->logTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1resetTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->resetTracking();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1addServerShutdownCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addServerShutdownCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1addServerShutdownCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addServerShutdownCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1remServerShutdownCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remServerShutdownCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1addDisconnectOnErrorCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addDisconnectOnErrorCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1addDisconnectOnErrorCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1remDisconnectOnErrorCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDisconnectOnErrorCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1loopOnce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->loopOnce();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1processPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->processPacket(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1processPacketUdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  sockaddr_in *arg3 = (sockaddr_in *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = *(sockaddr_in **)&jarg3; 
  (arg1)->processPacketUdp(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setTcpOnlyFromServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->setTcpOnlyFromServer();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1setTcpOnlyToServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->setTcpOnlyToServer();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1isTcpOnlyFromServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->isTcpOnlyFromServer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1isTcpOnlyToServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->isTcpOnlyToServer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getClientKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(unsigned char **)&jarg2; 
  (arg1)->getClientKey(arg2);
  
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1startNonBlockingDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->startNonBlockingDisconnect();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1finishNonBlockingDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  (arg1)->finishNonBlockingDisconnect();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getName_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (char *)(arg1)->getName(arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getName_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  result = (char *)(arg1)->getName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getName_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (char *)(arg1)->getName(arg2,arg3);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getName_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)(arg1)->getName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1runThread(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  void *arg2 = (void *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (void *)(arg1)->runThread(arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getTcpAddr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  in_addr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (in_addr *)(arg1)->getTcpAddr();
  *(in_addr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1internalBlockingConnect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jobject jarg7_, jstring jarg8) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ArSocket *arg7 = (ArSocket *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = *(ArSocket **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (bool)(arg1)->internalBlockingConnect((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7,(char const *)arg8);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1internalBlockingConnect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jobject jarg7_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ArSocket *arg7 = (ArSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = *(ArSocket **)&jarg7; 
  result = (bool)(arg1)->internalBlockingConnect((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1internalNonBlockingConnectStart_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jobject jarg7_, jstring jarg8) {
  jint jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ArSocket *arg7 = (ArSocket *) 0 ;
  char *arg8 = (char *) 0 ;
  ArClientBase::NonBlockingConnectReturn result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = *(ArSocket **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (ArClientBase::NonBlockingConnectReturn)(arg1)->internalNonBlockingConnectStart((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7,(char const *)arg8);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1internalNonBlockingConnectStart_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4, jstring jarg5, jstring jarg6, jlong jarg7, jobject jarg7_) {
  jint jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ArSocket *arg7 = (ArSocket *) 0 ;
  ArClientBase::NonBlockingConnectReturn result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = *(ArSocket **)&jarg7; 
  result = (ArClientBase::NonBlockingConnectReturn)(arg1)->internalNonBlockingConnectStart((char const *)arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,arg7);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1internalNonBlockingConnectContinue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientBase::NonBlockingConnectReturn result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientBase::NonBlockingConnectReturn)(arg1)->internalNonBlockingConnectContinue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getTcpSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArSocket *)(arg1)->getTcpSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getUdpSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArSocket *)(arg1)->getUdpSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getDataMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  std::map< unsigned int,ArClientData * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (std::map< unsigned int,ArClientData * > *)(arg1)->getDataMap();
  *(std::map< unsigned int,ArClientData * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1findCommandFromName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (unsigned int)(arg1)->findCommandFromName((char const *)arg2);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestByCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  ArNetPacket *arg4 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = *(ArNetPacket **)&jarg4; 
  result = (bool)(arg1)->requestByCommand(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestByCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->requestByCommand(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestStopByCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->requestStopByCommand(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceByCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->requestOnceByCommand(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceByCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->requestOnceByCommand(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceByCommandUdp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (bool)(arg1)->requestOnceByCommandUdp(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1requestOnceByCommandUdp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->requestOnceByCommandUdp(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getReceivedDataList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->getReceivedDataList();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getReceivedArgRetList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->getReceivedArgRetList();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getReceivedGroupAndFlagsList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (bool)(arg1)->getReceivedGroupAndFlagsList();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getRejected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (int)(arg1)->getRejected();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1getRejectedString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (char *)(arg1)->getRejectedString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1SHUTDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::SHUTDOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1INTRODUCTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::INTRODUCTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1UDP_1INTRODUCTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::UDP_INTRODUCTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1UDP_1CONFIRMATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::UDP_CONFIRMATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1TCP_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::TCP_ONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::LIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1REQUEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::REQUEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientCommands_1REQUESTSTOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArClientCommands::ClientCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands::ClientCommands)ArClientCommands::REQUESTSTOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArClientCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArClientCommands *)new ArClientCommands();
  *(ArClientCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientCommands *arg1 = (ArClientCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientFileListerItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  time_t arg2 ;
  time_t arg3 ;
  ArTypes::UByte4 arg4 ;
  time_t *argp2 ;
  time_t *argp3 ;
  ArClientFileListerItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(time_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(time_t **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (ArTypes::UByte4)jarg4; 
  result = (ArClientFileListerItem *)new ArClientFileListerItem((char const *)arg1,arg2,arg3,arg4);
  *(ArClientFileListerItem **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientFileListerItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileListerItem *arg1 = 0 ;
  ArClientFileListerItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileListerItem **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArClientFileListerItem const & reference is null");
    return 0;
  } 
  result = (ArClientFileListerItem *)new ArClientFileListerItem((ArClientFileListerItem const &)*arg1);
  *(ArClientFileListerItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientFileListerItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientFileListerItem *arg1 = (ArClientFileListerItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientFileListerItem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileListerItem_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileListerItem *arg1 = (ArClientFileListerItem *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileListerItem **)&jarg1; 
  result = (char *)((ArClientFileListerItem const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileListerItem_1getLastAccessedTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileListerItem *arg1 = (ArClientFileListerItem *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileListerItem **)&jarg1; 
  result = ((ArClientFileListerItem const *)arg1)->getLastAccessedTime();
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileListerItem_1getLastModifiedTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileListerItem *arg1 = (ArClientFileListerItem *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileListerItem **)&jarg1; 
  result = ((ArClientFileListerItem const *)arg1)->getLastModifiedTime();
  *(time_t **)&jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileListerItem_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileListerItem *arg1 = (ArClientFileListerItem *) 0 ;
  ArTypes::UByte4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileListerItem **)&jarg1; 
  result = (ArTypes::UByte4)((ArClientFileListerItem const *)arg1)->getSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientFileLister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientFileLister *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientFileLister *)new ArClientFileLister(arg1);
  *(ArClientFileLister **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientFileLister(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientFileLister **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1isAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  result = (bool)(arg1)->isAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1changeToTopDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  (arg1)->changeToTopDir();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1changeToDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->changeToDir((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1upOneDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  (arg1)->upOneDir();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1changeToAbsDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->changeToAbsDir((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1getCurrentDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  result = (char *)((ArClientFileLister const *)arg1)->getCurrentDir();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1getWaitingForDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  result = (char *)((ArClientFileLister const *)arg1)->getWaitingForDir();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1getDirectories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  SwigValueWrapper< std::list< ArClientFileListerItem > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  result = ((ArClientFileLister const *)arg1)->getDirectories();
  *(std::list< ArClientFileListerItem > **)&jresult = new std::list< ArClientFileListerItem >((const std::list< ArClientFileListerItem > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1getFiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  SwigValueWrapper< std::list< ArClientFileListerItem > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  result = ((ArClientFileLister const *)arg1)->getFiles();
  *(std::list< ArClientFileListerItem > **)&jresult = new std::list< ArClientFileListerItem >((const std::list< ArClientFileListerItem > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1addUpdatedCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addUpdatedCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1addUpdatedCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->addUpdatedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1remUpdatedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->remUpdatedCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1getLastUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  result = (arg1)->getLastUpdated();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1getLastRequested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  result = (arg1)->getLastRequested();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileLister_1log(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArClientFileLister *arg1 = (ArClientFileLister *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileLister **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->log(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientFileToClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientFileToClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientFileToClient *)new ArClientFileToClient(arg1);
  *(ArClientFileToClient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientFileToClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1isAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (bool)(arg1)->isAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1isAvailableSetTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (bool)(arg1)->isAvailableSetTimestamp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1getFileFromDirectory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->getFileFromDirectory((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1getFileFromDirectory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->getFileFromDirectory((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1cancelGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  (arg1)->cancelGet();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1isWaitingForFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (bool)(arg1)->isWaitingForFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1getDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (char *)(arg1)->getDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (char *)(arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1getClientFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (char *)(arg1)->getClientFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1addFileReceivedCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addFileReceivedCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1addFileReceivedCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->addFileReceivedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1remFileReceivedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->remFileReceivedCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1getLastReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (arg1)->getLastReceived();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileToClient_1getLastRequested(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileToClient *arg1 = (ArClientFileToClient *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileToClient **)&jarg1; 
  result = (arg1)->getLastRequested();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientFileFromClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientFileFromClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientFileFromClient *)new ArClientFileFromClient(arg1);
  *(ArClientFileFromClient **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientFileFromClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1isAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (bool)(arg1)->isAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1isAvailableSlow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (bool)(arg1)->isAvailableSlow();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1isAvailableFast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (bool)(arg1)->isAvailableFast();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1isAvailableSetTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (bool)(arg1)->isAvailableSetTimestamp();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1putFileToDirectory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArClientFileFromClient::SendSpeed arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (ArClientFileFromClient::SendSpeed)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->putFileToDirectory((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1putFileToDirectory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArClientFileFromClient::SendSpeed arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (ArClientFileFromClient::SendSpeed)jarg5; 
  result = (bool)(arg1)->putFileToDirectory((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1putFileToDirectory_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)(arg1)->putFileToDirectory((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1cancelPut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  (arg1)->cancelPut();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1isWaitingForReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (bool)(arg1)->isWaitingForReturn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1getDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (char *)(arg1)->getDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (char *)(arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1getClientFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (char *)(arg1)->getClientFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1addFileSentCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addFileSentCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1addFileSentCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->addFileSentCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1remFileSentCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->remFileSentCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1getLastCompletedSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (arg1)->getLastCompletedSend();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientFileFromClient_1getLastStartedSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientFileFromClient *arg1 = (ArClientFileFromClient *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientFileFromClient **)&jarg1; 
  result = (arg1)->getLastStartedSend();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientDeleteFileOnServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientDeleteFileOnServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientDeleteFileOnServer *)new ArClientDeleteFileOnServer(arg1);
  *(ArClientDeleteFileOnServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientDeleteFileOnServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1isAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  result = (bool)(arg1)->isAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1deleteFileFromDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->deleteFileFromDirectory((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1isWaitingForReturn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  result = (bool)(arg1)->isWaitingForReturn();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1getDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  result = (char *)(arg1)->getDirectory();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  result = (char *)(arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1addFileDeletedCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addFileDeletedCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1addFileDeletedCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->addFileDeletedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1remFileDeletedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  ArFunctor1< int > *arg2 = (ArFunctor1< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor1< int > **)&jarg2; 
  (arg1)->remFileDeletedCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1getLastCompletedSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  result = (arg1)->getLastCompletedSend();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientDeleteFileOnServer_1getLastStartedSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientDeleteFileOnServer *arg1 = (ArClientDeleteFileOnServer *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientDeleteFileOnServer **)&jarg1; 
  result = (arg1)->getLastStartedSend();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientHandlerConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArClientHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArClientHandlerConfig *)new ArClientHandlerConfig(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(ArClientHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientHandlerConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  ArClientHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArClientHandlerConfig *)new ArClientHandlerConfig(arg1,arg2,(char const *)arg3);
  *(ArClientHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientHandlerConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  bool arg2 ;
  ArClientHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ArClientHandlerConfig *)new ArClientHandlerConfig(arg1,arg2);
  *(ArClientHandlerConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientHandlerConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientHandlerConfig *)new ArClientHandlerConfig(arg1);
  *(ArClientHandlerConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientHandlerConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1requestConfigFromServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  (arg1)->requestConfigFromServer();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1reloadConfigOnServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  (arg1)->reloadConfigOnServer();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1getConfigCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArConfig result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (arg1)->getConfigCopy();
  *(ArConfig **)&jresult = new ArConfig((const ArConfig &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addGotConfigCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addGotConfigCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addGotConfigCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addGotConfigCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1remGotConfigCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remGotConfigCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addSaveConfigSucceededCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addSaveConfigSucceededCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addSaveConfigSucceededCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSaveConfigSucceededCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1remSaveConfigSucceededCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSaveConfigSucceededCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addSaveConfigFailedCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addSaveConfigFailedCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addSaveConfigFailedCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->addSaveConfigFailedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1remSaveConfigFailedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->remSaveConfigFailedCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1haveGottenConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->haveGottenConfig();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1saveConfigToServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  (arg1)->saveConfigToServer();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1saveConfigToServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  std::set< std::string,ArStrCaseCmpOp > *arg3 = (std::set< std::string,ArStrCaseCmpOp > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = *(std::set< std::string,ArStrCaseCmpOp > **)&jarg3; 
  (arg1)->saveConfigToServer(arg2,(std::set< std::string,ArStrCaseCmpOp > const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1saveConfigToServer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->saveConfigToServer(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1haveRequestedDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->haveRequestedDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1haveGottenDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->haveGottenDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1canRequestDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->canRequestDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1requestDefaultConfigFromServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->requestDefaultConfigFromServer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1getDefaultConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (ArConfig *)(arg1)->getDefaultConfig();
  *(ArConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1requestConfigDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->requestConfigDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1requestSectionDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->requestSectionDefaults((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addGotConfigDefaultsCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addGotConfigDefaultsCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addGotConfigDefaultsCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addGotConfigDefaultsCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1remGotConfigDefaultsCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remGotConfigDefaultsCB(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1isLastEditablePriorityAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->isLastEditablePriorityAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1requestLastEditablePriorityFromServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->requestLastEditablePriorityFromServer();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1haveGottenLastEditablePriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->haveGottenLastEditablePriority();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1getLastEditablePriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArPriority::Priority result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (ArPriority::Priority)(arg1)->getLastEditablePriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addGotLastEditablePriorityCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addGotLastEditablePriorityCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1addGotLastEditablePriorityCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addGotLastEditablePriorityCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1remGotLastEditablePriorityCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remGotLastEditablePriorityCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1getConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  ArConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (ArConfig *)(arg1)->getConfig();
  *(ArConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (int)(arg1)->lock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1tryLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (int)(arg1)->tryLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  result = (int)(arg1)->unlock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerConfig_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArClientHandlerConfig *arg1 = (ArClientHandlerConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientSimpleConnector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArClientSimpleConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (ArClientSimpleConnector *)new ArClientSimpleConnector(arg1);
  *(ArClientSimpleConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientSimpleConnector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jobjectArray jarg1) {
  jlong jresult = 0 ;
  int *arg1 = (int *) 0 ;
  char **arg2 = (char **) 0 ;
  jint size1 ;
  ArClientSimpleConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    /* (begin %typemap(in) for (int *argc, char **argv) */
    size1 = jenv->GetArrayLength((jarray)jarg1);
    int tmpArgc = size1;
    int i;
    arg2 = (char**)malloc( (size1+1) * sizeof(char*) );
    for(i = 0; i < size1; i++) {
      jstring js = (jstring) jenv->GetObjectArrayElement((jobjectArray)jarg1, i);
      const char *cs = jenv->GetStringUTFChars(js, 0);
      arg2[i] = (char*)malloc(strlen(cs)+1 * sizeof(const char));
      strcpy(arg2[i], cs);
      jenv->ReleaseStringUTFChars(js, cs);
      jenv->DeleteLocalRef(js);
    }
    arg2[i] = 0;
    int *newArgc = (int*) malloc(sizeof(int));
    *newArgc = tmpArgc;
    arg1 = newArgc;
    /* (end %typemap(in) for (int *argc, char **argv) */
  }
  result = (ArClientSimpleConnector *)new ArClientSimpleConnector(arg1,arg2);
  *(ArClientSimpleConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientSimpleConnector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentBuilder *arg1 = (ArArgumentBuilder *) 0 ;
  ArClientSimpleConnector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentBuilder **)&jarg1; 
  result = (ArClientSimpleConnector *)new ArClientSimpleConnector(arg1);
  *(ArClientSimpleConnector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientSimpleConnector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientSimpleConnector *arg1 = (ArClientSimpleConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientSimpleConnector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientSimpleConnector_1connectClient_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArClientSimpleConnector *arg1 = (ArClientSimpleConnector *) 0 ;
  ArClientBase *arg2 = (ArClientBase *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientSimpleConnector **)&jarg1; 
  arg2 = *(ArClientBase **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->connectClient(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientSimpleConnector_1connectClient_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArClientSimpleConnector *arg1 = (ArClientSimpleConnector *) 0 ;
  ArClientBase *arg2 = (ArClientBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientSimpleConnector **)&jarg1; 
  arg2 = *(ArClientBase **)&jarg2; 
  result = (bool)(arg1)->connectClient(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientSimpleConnector_1parseArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientSimpleConnector *arg1 = (ArClientSimpleConnector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientSimpleConnector **)&jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientSimpleConnector_1parseArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArClientSimpleConnector *arg1 = (ArClientSimpleConnector *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientSimpleConnector **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientSimpleConnector_1logOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientSimpleConnector *arg1 = (ArClientSimpleConnector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientSimpleConnector **)&jarg1; 
  ((ArClientSimpleConnector const *)arg1)->logOptions();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArHybridForwarderVideo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArClientBase *arg2 = (ArClientBase *) 0 ;
  ArHybridForwarderVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArClientBase **)&jarg2; 
  result = (ArHybridForwarderVideo *)new ArHybridForwarderVideo(arg1,arg2);
  *(ArHybridForwarderVideo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArHybridForwarderVideo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  ArHybridForwarderVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (ArHybridForwarderVideo *)new ArHybridForwarderVideo(arg1,(char const *)arg2,arg3);
  *(ArHybridForwarderVideo **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArHybridForwarderVideo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArHybridForwarderVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArHybridForwarderVideo *)new ArHybridForwarderVideo(arg1,(char const *)arg2);
  *(ArHybridForwarderVideo **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArHybridForwarderVideo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArHybridForwarderVideo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (ArHybridForwarderVideo *)new ArHybridForwarderVideo(arg1);
  *(ArHybridForwarderVideo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArHybridForwarderVideo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1isForwardingVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  result = (bool)((ArHybridForwarderVideo const *)arg1)->isForwardingVideo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1getCameraName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  result = (char *)(arg1)->getCameraName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1setCameraName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setCameraName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1addToCameraCollection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  ArCameraCollection *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  arg2 = *(ArCameraCollection **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArCameraCollection & reference is null");
    return ;
  } 
  (arg1)->addToCameraCollection(*arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1sendVideoSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->sendVideoSize(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1sendVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->sendVideo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1receiveVideoSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->receiveVideoSize(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1receiveVideo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->receiveVideo(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1clientCycleCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  (arg1)->clientCycleCallback();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1setVideoRequestTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setVideoRequestTime(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1setVideoRequestTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArHybridForwarderVideo *arg1 = (ArHybridForwarderVideo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArHybridForwarderVideo **)&jarg1; 
  result = (int)((ArHybridForwarderVideo const *)arg1)->setVideoRequestTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArNetPacketReceiverTcp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNetPacketReceiverTcp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNetPacketReceiverTcp *)new ArNetPacketReceiverTcp();
  *(ArNetPacketReceiverTcp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArNetPacketReceiverTcp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1setSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->setSocket(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1getSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  result = (ArSocket *)(arg1)->getSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1setProcessPacketCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  ArFunctor1< ArNetPacket * > *arg2 = (ArFunctor1< ArNetPacket * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  arg2 = *(ArFunctor1< ArNetPacket * > **)&jarg2; 
  (arg1)->setProcessPacketCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1getProcessPacketCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  ArFunctor1< ArNetPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  result = (ArFunctor1< ArNetPacket * > *)(arg1)->getProcessPacketCB();
  *(ArFunctor1< ArNetPacket * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1setLoggingPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setLoggingPrefix((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1readData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  result = (bool)(arg1)->readData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1setQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setQuiet(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverTcp_1getQuiet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetPacketReceiverTcp *arg1 = (ArNetPacketReceiverTcp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverTcp **)&jarg1; 
  result = (bool)(arg1)->getQuiet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArNetPacketReceiverUdp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNetPacketReceiverUdp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNetPacketReceiverUdp *)new ArNetPacketReceiverUdp();
  *(ArNetPacketReceiverUdp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArNetPacketReceiverUdp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNetPacketReceiverUdp *arg1 = (ArNetPacketReceiverUdp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNetPacketReceiverUdp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverUdp_1setSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetPacketReceiverUdp *arg1 = (ArNetPacketReceiverUdp *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetPacketReceiverUdp **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->setSocket(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverUdp_1getSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNetPacketReceiverUdp *arg1 = (ArNetPacketReceiverUdp *) 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverUdp **)&jarg1; 
  result = (ArSocket *)(arg1)->getSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverUdp_1setProcessPacketCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArNetPacketReceiverUdp *arg1 = (ArNetPacketReceiverUdp *) 0 ;
  ArFunctor2< ArNetPacket *,sockaddr_in * > *arg2 = (ArFunctor2< ArNetPacket *,sockaddr_in * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverUdp **)&jarg1; 
  arg2 = *(ArFunctor2< ArNetPacket *,sockaddr_in * > **)&jarg2; 
  (arg1)->setProcessPacketCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverUdp_1getProcessPacketCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNetPacketReceiverUdp *arg1 = (ArNetPacketReceiverUdp *) 0 ;
  ArFunctor2< ArNetPacket *,sockaddr_in * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverUdp **)&jarg1; 
  result = (ArFunctor2< ArNetPacket *,sockaddr_in * > *)(arg1)->getProcessPacketCB();
  *(ArFunctor2< ArNetPacket *,sockaddr_in * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketReceiverUdp_1readData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetPacketReceiverUdp *arg1 = (ArNetPacketReceiverUdp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketReceiverUdp **)&jarg1; 
  result = (bool)(arg1)->readData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArNetPacketSenderTcp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArNetPacketSenderTcp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArNetPacketSenderTcp *)new ArNetPacketSenderTcp();
  *(ArNetPacketSenderTcp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArNetPacketSenderTcp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1setSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  ArSocket *arg2 = (ArSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  arg2 = *(ArSocket **)&jarg2; 
  (arg1)->setSocket(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1getSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  result = (ArSocket *)(arg1)->getSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1setBackupTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBackupTimeout(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1setDebugLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDebugLogging(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1setLoggingPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setLoggingPrefix((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1sendPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->sendPacket(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1sendPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->sendPacket(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacketSenderTcp_1sendData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArNetPacketSenderTcp *arg1 = (ArNetPacketSenderTcp *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArNetPacketSenderTcp **)&jarg1; 
  result = (bool)(arg1)->sendData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jboolean jarg12, jstring jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jstring jarg17, jint jarg18) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  char *arg17 = (char *) 0 ;
  ArServerCommands::Type arg18 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = jarg12 ? true : false; 
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *)jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return 0;
  }
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = 0;
  if (jarg17) {
    arg17 = (char *)jenv->GetStringUTFChars(jarg17, 0);
    if (!arg17) return 0;
  }
  arg18 = (ArServerCommands::Type)jarg18; 
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11,arg12,(char const *)arg13,arg14,arg15,arg16,(char const *)arg17,arg18);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *)arg13);
  if (arg17) jenv->ReleaseStringUTFChars(jarg17, (const char *)arg17);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jboolean jarg12, jstring jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16, jstring jarg17) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  char *arg17 = (char *) 0 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = jarg12 ? true : false; 
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *)jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return 0;
  }
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  arg17 = 0;
  if (jarg17) {
    arg17 = (char *)jenv->GetStringUTFChars(jarg17, 0);
    if (!arg17) return 0;
  }
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11,arg12,(char const *)arg13,arg14,arg15,arg16,(char const *)arg17);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *)arg13);
  if (arg17) jenv->ReleaseStringUTFChars(jarg17, (const char *)arg17);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jboolean jarg12, jstring jarg13, jboolean jarg14, jboolean jarg15, jboolean jarg16) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  bool arg15 ;
  bool arg16 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = jarg12 ? true : false; 
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *)jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return 0;
  }
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  arg16 = jarg16 ? true : false; 
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11,arg12,(char const *)arg13,arg14,arg15,arg16);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *)arg13);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jboolean jarg12, jstring jarg13, jboolean jarg14, jboolean jarg15) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  bool arg15 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = jarg12 ? true : false; 
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *)jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return 0;
  }
  arg14 = jarg14 ? true : false; 
  arg15 = jarg15 ? true : false; 
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11,arg12,(char const *)arg13,arg14,arg15);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *)arg13);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jboolean jarg12, jstring jarg13, jboolean jarg14) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  bool arg14 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = jarg12 ? true : false; 
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *)jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return 0;
  }
  arg14 = jarg14 ? true : false; 
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11,arg12,(char const *)arg13,arg14);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *)arg13);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jboolean jarg12, jstring jarg13) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  char *arg13 = (char *) 0 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = jarg12 ? true : false; 
  arg13 = 0;
  if (jarg13) {
    arg13 = (char *)jenv->GetStringUTFChars(jarg13, 0);
    if (!arg13) return 0;
  }
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11,arg12,(char const *)arg13);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  if (arg13) jenv->ReleaseStringUTFChars(jarg13, (const char *)arg13);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11, jboolean jarg12) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  bool arg12 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = jarg12 ? true : false; 
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11,arg12);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10, jstring jarg11) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  char *arg11 = (char *) 0 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10,(char const *)arg11);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_, jint jarg10) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  int arg10 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  arg10 = (int)jarg10; 
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9,arg10);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerUserInfo *arg9 = (ArServerUserInfo *) 0 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg9_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = *(ArServerUserInfo **)&jarg9; 
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,(ArServerUserInfo const *)arg9);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClient_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  ArSocket *arg1 = (ArSocket *) 0 ;
  unsigned int arg2 ;
  long arg3 ;
  long arg4 ;
  ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *arg5 = (ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > *) 0 ;
  std::map< unsigned int,ArServerData * > *arg6 = (std::map< unsigned int,ArServerData * > *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArSocket **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = *(ArRetFunctor2< bool,ArNetPacket *,sockaddr_in * > **)&jarg5; 
  arg6 = *(std::map< unsigned int,ArServerData * > **)&jarg6; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (ArServerClient *)new ArServerClient(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  *(ArServerClient **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1tcpCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (bool)(arg1)->tcpCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1slowPacketCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (bool)(arg1)->slowPacketCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1idlePacketCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (bool)(arg1)->idlePacketCallback();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1setBackupTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBackupTimeout(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1processPacket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->processPacket(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1processPacket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->processPacket(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1sendPacketTcp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  result = (bool)(arg1)->sendPacketTcp(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1sendPacketUdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  result = (bool)(arg1)->sendPacketUdp(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1hasGroupAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->hasGroupAccess((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1broadcastPacketTcp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->broadcastPacketTcp(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1broadcastPacketUdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->broadcastPacketUdp(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1logTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->logTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1resetTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  (arg1)->resetTracking();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getIPString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (char *)((ArServerClient const *)arg1)->getIPString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArServerClientIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = ((ArServerClient const *)arg1)->getIdentifier();
  *(ArServerClientIdentifier **)&jresult = new ArServerClientIdentifier((const ArServerClientIdentifier &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1setIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArServerClientIdentifier arg2 ;
  ArServerClientIdentifier *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  argp2 = *(ArServerClientIdentifier **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setIdentifier(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1setUdpAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  sockaddr_in *arg2 = (sockaddr_in *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(sockaddr_in **)&jarg2; 
  (arg1)->setUdpAddress(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getUdpAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  sockaddr_in *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (sockaddr_in *)(arg1)->getUdpAddress();
  *(sockaddr_in **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getAuthKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (long)(arg1)->getAuthKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1processAuthPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  sockaddr_in *arg3 = (sockaddr_in *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  arg3 = *(sockaddr_in **)&jarg3; 
  (arg1)->processAuthPacket(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1handleRequests(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  (arg1)->handleRequests();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getTcpSocket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (ArSocket *)(arg1)->getTcpSocket();
  *(ArSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1forceDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->forceDisconnect(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArTypes::UByte2 arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = (ArTypes::UByte2)jarg2; 
  result = (long)(arg1)->getFrequency(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1useTcpOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  (arg1)->useTcpOnly();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1isTcpOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (bool)(arg1)->isTcpOnly();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArServerClient::ServerState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (ArServerClient::ServerState)(arg1)->getState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1hasSlowPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (bool)(arg1)->hasSlowPackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1hasIdlePackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (bool)(arg1)->hasIdlePackets();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1startRequestTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  (arg1)->startRequestTransaction();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1endRequestTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (bool)(arg1)->endRequestTransaction();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getRequestTransactionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (int)(arg1)->getRequestTransactionCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1findCommandFromName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (unsigned int)((ArServerClient const *)arg1)->findCommandFromName((char const *)arg2);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1getCreationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  result = (arg1)->getCreationTime();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClient_1findCommandName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  ArServerClient *arg1 = (ArServerClient *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClient **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (char *)((ArServerClient const *)arg1)->findCommandName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClientIdentifier(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArServerClientIdentifier *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerClientIdentifier *)new ArServerClientIdentifier();
  *(ArServerClientIdentifier **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerClientIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1getIDString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  result = (char *)(arg1)->getIDString();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1setConnectionID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  ArTypes::UByte4 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  arg2 = (ArTypes::UByte4)jarg2; 
  (arg1)->setConnectionID(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1getConnectionID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  ArTypes::UByte4 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  result = (ArTypes::UByte4)(arg1)->getConnectionID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1setSelfIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setSelfIdentifier((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1getSelfIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  result = (char *)(arg1)->getSelfIdentifier();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1setHereGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setHereGoal((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1getHereGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  result = (char *)(arg1)->getHereGoal();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1matches(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  ArServerClientIdentifier arg2 ;
  bool arg3 ;
  ArServerClientIdentifier *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  argp2 = *(ArServerClientIdentifier **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArServerClientIdentifier");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->matches(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientIdentifier_1rebuildIDString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerClientIdentifier *arg1 = (ArServerClientIdentifier *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientIdentifier **)&jarg1; 
  (arg1)->rebuildIDString();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerClientData(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArServerData *arg1 = (ArServerData *) 0 ;
  long arg2 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  ArServerClientData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = *(ArServerData **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  result = (ArServerClientData *)new ArServerClientData(arg1,arg2,arg3);
  *(ArServerClientData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerClientData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerClientData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientData_1getServerData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  ArServerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientData **)&jarg1; 
  result = (ArServerData *)(arg1)->getServerData();
  *(ArServerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientData_1getMSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientData **)&jarg1; 
  result = (long)(arg1)->getMSec();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientData_1getPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  ArNetPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientData **)&jarg1; 
  result = (ArNetPacket *)(arg1)->getPacket();
  *(ArNetPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientData_1getLastSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  ArTime result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientData **)&jarg1; 
  result = (arg1)->getLastSent();
  *(ArTime **)&jresult = new ArTime((const ArTime &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientData_1setLastSentToNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientData **)&jarg1; 
  (arg1)->setLastSentToNow();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientData_1setMSec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerClientData **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->setMSec(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerClientData_1setPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerClientData *arg1 = (ArServerClientData *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerClientData **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  (arg1)->setPacket(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1SHUTDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::SHUTDOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1INTRODUCTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::INTRODUCTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1UDP_1INTRODUCTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::UDP_INTRODUCTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1UDP_1CONFIRMATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::UDP_CONFIRMATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1CONNECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::CONNECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1REJECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::REJECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1TCP_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::TCP_ONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1LIST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::LIST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1LISTSINGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::LISTSINGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1LISTARGRET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::LISTARGRET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1LISTARGRETSINGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::LISTARGRETSINGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1LISTGROUPANDFLAGS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::LISTGROUPANDFLAGS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1LISTGROUPANDFLAGSSINGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::ServerCommands result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::ServerCommands)ArServerCommands::LISTGROUPANDFLAGSSINGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1TYPE_1UNSPECIFIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::Type)ArServerCommands::TYPE_UNSPECIFIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1TYPE_1REAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::Type)ArServerCommands::TYPE_REAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1TYPE_1SIMULATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::Type)ArServerCommands::TYPE_SIMULATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1TYPE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerCommands::Type result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands::Type)ArServerCommands::TYPE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerCommands_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  ArServerCommands::Type arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (ArServerCommands::Type)jarg1; 
  result = (char *)ArServerCommands::toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerCommands(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArServerCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerCommands *)new ArServerCommands();
  *(ArServerCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerCommands *arg1 = (ArServerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerFileLister_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerFileLister *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArServerFileLister *)new ArServerFileLister(arg1,(char const *)arg2,(char const *)arg3);
  *(ArServerFileLister **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerFileLister_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArServerFileLister *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArServerFileLister *)new ArServerFileLister(arg1,(char const *)arg2);
  *(ArServerFileLister **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerFileLister(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerFileLister *arg1 = (ArServerFileLister *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerFileLister **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileLister_1getDirListing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileLister *arg1 = (ArServerFileLister *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileLister **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getDirListing(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileLister_1getDirListingMultiplePackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileLister *arg1 = (ArServerFileLister *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileLister **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getDirListingMultiplePackets(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileLister_1getDefaultUploadDownloadDir(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileLister *arg1 = (ArServerFileLister *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileLister **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getDefaultUploadDownloadDir(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerFileToClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArServerFileToClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArServerFileToClient *)new ArServerFileToClient(arg1,(char const *)arg2);
  *(ArServerFileToClient **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerFileToClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerFileToClient *arg1 = (ArServerFileToClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerFileToClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileToClient_1getFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileToClient *arg1 = (ArServerFileToClient *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileToClient **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getFile(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileToClient_1getFileWithTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileToClient *arg1 = (ArServerFileToClient *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileToClient **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getFileWithTimestamp(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerFileFromClient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerFileFromClient *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArServerFileFromClient *)new ArServerFileFromClient(arg1,(char const *)arg2,(char const *)arg3);
  *(ArServerFileFromClient **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerFileFromClient(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1putFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->putFile(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1putFileInterleaved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->putFileInterleaved(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1putFileWithTimestamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->putFileWithTimestamp(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1putFileWithTimestampInterleaved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->putFileWithTimestampInterleaved(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1addPreMoveCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreMoveCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1addPreMoveCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreMoveCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1remPreMoveCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreMoveCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1addPostMoveCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostMoveCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1addPostMoveCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostMoveCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1remPostMoveCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostMoveCallback(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerFileFromClient_1getMovingFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerFileFromClient *arg1 = (ArServerFileFromClient *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerFileFromClient **)&jarg1; 
  result = (char *)(arg1)->getMovingFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerDeleteFileOnServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  char *arg2 = (char *) 0 ;
  ArServerDeleteFileOnServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArServerDeleteFileOnServer *)new ArServerDeleteFileOnServer(arg1,(char const *)arg2);
  *(ArServerDeleteFileOnServer **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerDeleteFileOnServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1deleteFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->deleteFile(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1addPreDeleteCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreDeleteCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1addPreDeleteCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreDeleteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1remPreDeleteCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreDeleteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1addPostDeleteCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostDeleteCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1addPostDeleteCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostDeleteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1remPostDeleteCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostDeleteCallback(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerDeleteFileOnServer_1getDeletingFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerDeleteFileOnServer *arg1 = (ArServerDeleteFileOnServer *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerDeleteFileOnServer **)&jarg1; 
  result = (char *)(arg1)->getDeletingFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerCamera_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArServerBase *arg2 = (ArServerBase *) 0 ;
  ArRobot *arg3 = (ArRobot *) 0 ;
  ArPTZ *arg4 = (ArPTZ *) 0 ;
  ArCameraCollection *arg5 = (ArCameraCollection *) 0 ;
  ArServerHandlerCamera *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(ArServerBase **)&jarg2; 
  arg3 = *(ArRobot **)&jarg3; 
  arg4 = *(ArPTZ **)&jarg4; 
  arg5 = *(ArCameraCollection **)&jarg5; 
  result = (ArServerHandlerCamera *)new ArServerHandlerCamera((char const *)arg1,arg2,arg3,arg4,arg5);
  *(ArServerHandlerCamera **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerCamera_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArPTZ *arg3 = (ArPTZ *) 0 ;
  ArServerHandlerCamera *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArPTZ **)&jarg3; 
  result = (ArServerHandlerCamera *)new ArServerHandlerCamera(arg1,arg2,arg3);
  *(ArServerHandlerCamera **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerHandlerCamera(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1setCameraAbs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setCameraAbs(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1setCameraAbs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setCameraAbs(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1setCameraRel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->setCameraRel(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1setCameraRel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setCameraRel(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1setCameraPct_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setCameraPct(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1setCameraPct_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setCameraPct(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1resetCamera_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->resetCamera(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1resetCamera_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  (arg1)->resetCamera();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraModeLookAtGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  (arg1)->cameraModeLookAtGoal();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraModeLookAtPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArPose arg2 ;
  bool arg3 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->cameraModeLookAtPoint(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraModeLookAtPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->cameraModeLookAtPoint(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraModeLookAtGoalSetGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArPose arg2 ;
  ArPose *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  argp2 = *(ArPose **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ArPose");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->cameraModeLookAtGoalSetGoal(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraModeLookAtGoalClearGoal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  (arg1)->cameraModeLookAtGoalClearGoal();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraModePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  (arg1)->cameraModePosition();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1getCameraName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  result = (char *)(arg1)->getCameraName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1addToCameraCollection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArCameraCollection *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArCameraCollection **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ArCameraCollection & reference is null");
    return ;
  } 
  (arg1)->addToCameraCollection(*arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleGetCameraData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleGetCameraData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleGetCameraInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleGetCameraInfo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleSetCameraAbs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleSetCameraAbs(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleSetCameraPct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleSetCameraPct(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleSetCameraRel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleSetCameraRel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleGetCameraModeList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleGetCameraModeList(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleCameraModeUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleCameraModeUpdated(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleSetCameraMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleSetCameraMode(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1handleResetCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleResetCamera(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1camera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->camera(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraAbs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->cameraAbs(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraPct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->cameraPct(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->cameraUpdate(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1cameraInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCamera *arg1 = (ArServerHandlerCamera *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCamera **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->cameraInfo(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerCameraCollection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArCameraCollection *arg2 = (ArCameraCollection *) 0 ;
  ArServerHandlerCameraCollection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArCameraCollection **)&jarg2; 
  result = (ArServerHandlerCameraCollection *)new ArServerHandlerCameraCollection(arg1,arg2);
  *(ArServerHandlerCameraCollection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerHandlerCameraCollection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerHandlerCameraCollection *arg1 = (ArServerHandlerCameraCollection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerHandlerCameraCollection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCameraCollection_1getCameraList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCameraCollection *arg1 = (ArServerHandlerCameraCollection *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCameraCollection **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getCameraList(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCameraCollection_1setParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCameraCollection *arg1 = (ArServerHandlerCameraCollection *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCameraCollection **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->setParams(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCameraCollection_1handleCameraCollectionModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerCameraCollection *arg1 = (ArServerHandlerCameraCollection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCameraCollection **)&jarg1; 
  (arg1)->handleCameraCollectionModified();
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommMonitor_1MIN_1HEARTBEAT_1INTERVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArServerHandlerCommMonitor::MIN_HEARTBEAT_INTERVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommMonitor_1DEFAULT_1HEARTBEAT_1INTERVAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)ArServerHandlerCommMonitor::DEFAULT_HEARTBEAT_INTERVAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerCommMonitor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  int arg2 ;
  ArServerHandlerCommMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (ArServerHandlerCommMonitor *)new ArServerHandlerCommMonitor(arg1,arg2);
  *(ArServerHandlerCommMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerCommMonitor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerHandlerCommMonitor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (ArServerHandlerCommMonitor *)new ArServerHandlerCommMonitor(arg1);
  *(ArServerHandlerCommMonitor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerHandlerCommMonitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerHandlerCommMonitor *arg1 = (ArServerHandlerCommMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerHandlerCommMonitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommMonitor_1handleGetHeartbeatInterval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCommMonitor *arg1 = (ArServerHandlerCommMonitor *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCommMonitor **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleGetHeartbeatInterval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommMonitor_1handleAckCommTcp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCommMonitor *arg1 = (ArServerHandlerCommMonitor *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCommMonitor **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleAckCommTcp(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommMonitor_1handleAckCommUdp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCommMonitor *arg1 = (ArServerHandlerCommMonitor *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCommMonitor **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->handleAckCommUdp(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommMonitor_1cycleCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerCommMonitor *arg1 = (ArServerHandlerCommMonitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCommMonitor **)&jarg1; 
  (arg1)->cycleCallback();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerHandlerCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (ArServerHandlerCommands *)new ArServerHandlerCommands(arg1);
  *(ArServerHandlerCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerHandlerCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1setTextServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArNetServer *arg2 = (ArNetServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArNetServer **)&jarg2; 
  (arg1)->setTextServer(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1addCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jstring jarg5) {
  jboolean jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addCommand((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1addCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor *arg4 = (ArFunctor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor **)&jarg4; 
  result = (bool)(arg1)->addCommand((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1addStringCommand_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< ArArgumentBuilder * > *arg4 = (ArFunctor1< ArArgumentBuilder * > *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor1< ArArgumentBuilder * > **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)(arg1)->addStringCommand((char const *)arg2,(char const *)arg3,arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1addStringCommand_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor1< ArArgumentBuilder * > *arg4 = (ArFunctor1< ArArgumentBuilder * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor1< ArArgumentBuilder * > **)&jarg4; 
  result = (bool)(arg1)->addStringCommand((char const *)arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1setPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setPrefix((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  result = (char *)(arg1)->getPrefix();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1netListCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netListCommands(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCommands_1netListStringCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netListStringCommands(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jboolean jarg5, jstring jarg6, jboolean jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  bool arg7 ;
  char *arg8 = (char *) 0 ;
  ArServerHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = jarg7 ? true : false; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (ArServerHandlerConfig *)new ArServerHandlerConfig(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,(char const *)arg6,arg7,(char const *)arg8);
  *(ArServerHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jboolean jarg5, jstring jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  bool arg7 ;
  ArServerHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = jarg7 ? true : false; 
  result = (ArServerHandlerConfig *)new ArServerHandlerConfig(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,(char const *)arg6,arg7);
  *(ArServerHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerConfig_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jboolean jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  ArServerHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (ArServerHandlerConfig *)new ArServerHandlerConfig(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,(char const *)arg6);
  *(ArServerHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerConfig_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  ArServerHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = jarg5 ? true : false; 
  result = (ArServerHandlerConfig *)new ArServerHandlerConfig(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  *(ArServerHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerConfig_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  ArServerHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArServerHandlerConfig *)new ArServerHandlerConfig(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(ArServerHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerConfig_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArServerHandlerConfig *)new ArServerHandlerConfig(arg1,arg2,(char const *)arg3);
  *(ArServerHandlerConfig **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerConfig_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  ArServerHandlerConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  result = (ArServerHandlerConfig *)new ArServerHandlerConfig(arg1,arg2);
  *(ArServerHandlerConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerHandlerConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1reloadConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->reloadConfig(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getConfigBySections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getConfigBySections(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getConfigBySectionsV2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getConfigBySectionsV2(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getConfigBySectionsV3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getConfigBySectionsV3(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getConfigBySectionsV4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getConfigBySectionsV4(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getConfig(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->setConfig(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setConfigParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->setConfigParam(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setConfigBySections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->setConfigBySections(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setConfigBySectionsV2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->setConfigBySectionsV2(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getConfigDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getConfigDefaults(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getConfigSectionFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getConfigSectionFlags(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getLastEditablePriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getLastEditablePriority(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addPreWriteCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreWriteCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addPreWriteCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1remPreWriteCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addPostWriteCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostWriteCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addPostWriteCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1remPostWriteCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostWriteCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addConfigUpdatedCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addConfigUpdatedCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addConfigUpdatedCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addConfigUpdatedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1remConfigUpdatedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remConfigUpdatedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1restartIO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->restartIO((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1restartSoftware(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->restartSoftware((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1restartHardware(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->restartHardware((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addRestartIOCB_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addRestartIOCB(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1addRestartIOCB_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addRestartIOCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1remRestartIOCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remRestartIOCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setRestartSoftwareCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->setRestartSoftwareCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getRestartSoftwareCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (ArFunctor *)(arg1)->getRestartSoftwareCB();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setRestartHardwareCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->setRestartHardwareCB(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getRestartHardwareCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArFunctor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (ArFunctor *)(arg1)->getRestartHardwareCB();
  *(ArFunctor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1lockConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (int)(arg1)->lockConfig();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1tryLockConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (int)(arg1)->tryLockConfig();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1unlockConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (int)(arg1)->unlockConfig();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1writeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->writeConfig();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1configUpdated_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  result = (bool)(arg1)->configUpdated(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1configUpdated_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->configUpdated();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setPreventChanges_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jstring jarg3) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  bool arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setPreventChanges(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setPreventChanges_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setPreventChanges(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setPreventChanges_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  (arg1)->setPreventChanges();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1loadDefaultsFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->loadDefaultsFromFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1loadDefaultsFromPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  ArNetPacket *arg2 = (ArNetPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = *(ArNetPacket **)&jarg2; 
  result = (bool)(arg1)->loadDefaultsFromPacket(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1createEmptyConfigDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  (arg1)->createEmptyConfigDefaults();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1setAllowFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAllowFactory(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerConfig_1getAllowFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerHandlerConfig *arg1 = (ArServerHandlerConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerConfig **)&jarg1; 
  result = (bool)(arg1)->getAllowFactory();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1LINES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerHandlerMap::DataToSend result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerHandlerMap::DataToSend)ArServerHandlerMap::LINES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1POINTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerHandlerMap::DataToSend result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerHandlerMap::DataToSend)ArServerHandlerMap::POINTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1BOTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ArServerHandlerMap::DataToSend result;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerHandlerMap::DataToSend)ArServerHandlerMap::BOTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  ArServerHandlerMap::DataToSend arg3 ;
  ArServerHandlerMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  arg3 = (ArServerHandlerMap::DataToSend)jarg3; 
  result = (ArServerHandlerMap *)new ArServerHandlerMap(arg1,arg2,arg3);
  *(ArServerHandlerMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  ArServerHandlerMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  result = (ArServerHandlerMap *)new ArServerHandlerMap(arg1,arg2);
  *(ArServerHandlerMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerHandlerMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (ArServerHandlerMap *)new ArServerHandlerMap(arg1);
  *(ArServerHandlerMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerHandlerMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1loadMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->loadMap((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1useMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->useMap(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1useMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArMapInterface *arg2 = (ArMapInterface *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArMapInterface **)&jarg2; 
  (arg1)->useMap(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1getMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArMapInterface *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  result = (ArMapInterface *)(arg1)->getMap();
  *(ArMapInterface **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1serverGetMapId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetMapId(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1serverGetMapName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetMapName(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1serverGetMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetMap(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1serverGetMapBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetMapBinary(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1serverGetMapMultiScans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetMapMultiScans(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1serverGetMapWithMaxCategory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetMapWithMaxCategory(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1serverGetGoals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverGetGoals(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1setDataToSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerHandlerMap::DataToSend arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  arg2 = (ArServerHandlerMap::DataToSend)jarg2; 
  (arg1)->setDataToSend(arg2);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMap_1getDataToSend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerHandlerMap *arg1 = (ArServerHandlerMap *) 0 ;
  ArServerHandlerMap::DataToSend result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMap **)&jarg1; 
  result = (ArServerHandlerMap::DataToSend)(arg1)->getDataToSend();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8, jstring jarg9, jlong jarg10) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArLaser *arg7 = (ArLaser *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  std::list< ArLaser * > *arg10 = (std::list< ArLaser * > *) 0 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg7_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArLaser **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  arg10 = *(std::list< ArLaser * > **)&jarg10; 
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,(char const *)arg9,arg10);
  *(ArServerHandlerMapping **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArLaser *arg7 = (ArLaser *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg7_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArLaser **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,(char const *)arg9);
  *(ArServerHandlerMapping **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_, jstring jarg8) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArLaser *arg7 = (ArLaser *) 0 ;
  char *arg8 = (char *) 0 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg7_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArLaser **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7,(char const *)arg8);
  *(ArServerHandlerMapping **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jboolean jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArLaser *arg7 = (ArLaser *) 0 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg7_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  arg7 = *(ArLaser **)&jarg7; 
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
  *(ArServerHandlerMapping **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5,arg6);
  *(ArServerHandlerMapping **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3,(char const *)arg4,(char const *)arg5);
  *(ArServerHandlerMapping **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jstring jarg4) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  char *arg4 = (char *) 0 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3,(char const *)arg4);
  *(ArServerHandlerMapping **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerHandlerMapping_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArLaser *arg3 = (ArLaser *) 0 ;
  ArServerHandlerMapping *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArLaser **)&jarg3; 
  result = (ArServerHandlerMapping *)new ArServerHandlerMapping(arg1,arg2,arg3);
  *(ArServerHandlerMapping **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerHandlerMapping(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1serverMappingStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverMappingStart(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1serverMappingEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverMappingEnd(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1serverMappingStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverMappingStatus(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1isMapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  result = (bool)(arg1)->isMapping();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1forceReading(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  (arg1)->forceReading();
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1getFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  result = (char *)(arg1)->getFileName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1getMapName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  result = (char *)(arg1)->getMapName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addSimpleCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArServerHandlerCommands *arg2 = (ArServerHandlerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArServerHandlerCommands **)&jarg2; 
  (arg1)->addSimpleCommands(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1simpleLoopStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->simpleLoopStart(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1simpleLoopEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->simpleLoopEnd(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addStringForStartOfLogs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *arg2 = (char *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addStringForStartOfLogs((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addStringForStartOfLogs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addStringForStartOfLogs((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1remStringForStartOfLogs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->remStringForStartOfLogs((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addTagToLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addTagToLog((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addInfoToLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->addInfoToLog((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addLocationData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  char *arg2 = (char *) 0 ;
  ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *arg3 = (ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > **)&jarg3; 
  result = (bool)(arg1)->addLocationData((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingStartCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addMappingStartCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingStartCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addMappingStartCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1remMappingStartCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remMappingStartCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingBegunCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addMappingBegunCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingBegunCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addMappingBegunCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1remMappingBegunCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remMappingBegunCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingEndCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addMappingEndCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingEndCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addMappingEndCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1remMappingEndCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remMappingEndCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingEndedCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addMappingEndedCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addMappingEndedCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addMappingEndedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1remMappingEndedCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remMappingEndedCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addPreMoveCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPreMoveCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addPreMoveCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPreMoveCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1remPreMoveCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPreMoveCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addPostMoveCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  ArListPos::Pos arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (ArListPos::Pos)jarg3; 
  (arg1)->addPostMoveCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addPostMoveCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addPostMoveCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1remPostMoveCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remPostMoveCallback(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1getLocationDataMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  result = (std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > *)(arg1)->getLocationDataMap();
  *(std::map< std::string,ArRetFunctor3< int,ArTime,ArPose *,ArPoseWithTime * > *,ArStrCaseCmpOp > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1addStringsForStartOfLogToMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArMap *arg2 = (ArMap *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArMap **)&jarg2; 
  (arg1)->addStringsForStartOfLogToMap(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1getZipFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArZippable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  result = (ArZippable *)(arg1)->getZipFile();
  *(ArZippable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1getSnapshotZipFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArZippable *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  result = (ArZippable *)(arg1)->getSnapshotZipFile();
  *(ArZippable **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1setZipFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArZippable *arg2 = (ArZippable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArZippable **)&jarg2; 
  (arg1)->setZipFile(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerMapping_1setSnapshotZipFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArServerHandlerMapping *arg1 = (ArServerHandlerMapping *) 0 ;
  ArZippable *arg2 = (ArZippable *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerMapping **)&jarg1; 
  arg2 = *(ArZippable **)&jarg2; 
  (arg1)->setSnapshotZipFile(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerInfoDrawings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerInfoDrawings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (ArServerInfoDrawings *)new ArServerInfoDrawings(arg1);
  *(ArServerInfoDrawings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerInfoDrawings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1addDrawing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  ArDrawingData *arg2 = (ArDrawingData *) 0 ;
  char *arg3 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *arg4 = (ArFunctor2< ArServerClient *,ArNetPacket * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = *(ArDrawingData **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg4; 
  result = (bool)(arg1)->addDrawing(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1addRangeDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  ArRangeDevice *arg2 = (ArRangeDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = *(ArRangeDevice **)&jarg2; 
  result = (bool)(arg1)->addRangeDevice(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1addRobotsRangeDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (bool)(arg1)->addRobotsRangeDevices(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1netListDrawings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netListDrawings(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1netGetDrawingList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netGetDrawingList(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1netRangeDeviceCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  ArRangeDevice *arg4 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  arg4 = *(ArRangeDevice **)&jarg4; 
  (arg1)->netRangeDeviceCurrent(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1netRangeDeviceCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  ArRangeDevice *arg4 = (ArRangeDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  arg4 = *(ArRangeDevice **)&jarg4; 
  (arg1)->netRangeDeviceCumulative(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1internalGetDrawingData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  char *arg2 = (char *) 0 ;
  ArDrawingData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArDrawingData *)(arg1)->internalGetDrawingData((char const *)arg2);
  *(ArDrawingData **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoDrawings_1internalGetDrawingCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerInfoDrawings *arg1 = (ArServerInfoDrawings *) 0 ;
  char *arg2 = (char *) 0 ;
  ArFunctor2< ArServerClient *,ArNetPacket * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerInfoDrawings **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArFunctor2< ArServerClient *,ArNetPacket * > *)(arg1)->internalGetDrawingCallback((char const *)arg2);
  *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerInfoRobot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerInfoRobot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerInfoRobot *)new ArServerInfoRobot(arg1,arg2);
  *(ArServerInfoRobot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerInfoRobot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerInfoRobot *arg1 = (ArServerInfoRobot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerInfoRobot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoRobot_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoRobot *arg1 = (ArServerInfoRobot *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoRobot **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->update(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoRobot_1updateNumbers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoRobot *arg1 = (ArServerInfoRobot *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoRobot **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->updateNumbers(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoRobot_1updateStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoRobot *arg1 = (ArServerInfoRobot *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoRobot **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->updateStrings(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoRobot_1batteryInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoRobot *arg1 = (ArServerInfoRobot *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoRobot **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->batteryInfo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoRobot_1physicalInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoRobot *arg1 = (ArServerInfoRobot *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoRobot **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->physicalInfo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoRobot_1activityTimeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoRobot *arg1 = (ArServerInfoRobot *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoRobot **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->activityTimeInfo(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerInfoSensor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerInfoSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerInfoSensor *)new ArServerInfoSensor(arg1,arg2);
  *(ArServerInfoSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerInfoSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerInfoSensor *arg1 = (ArServerInfoSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerInfoSensor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoSensor_1getSensorList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoSensor *arg1 = (ArServerInfoSensor *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoSensor **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getSensorList(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoSensor_1getSensorCurrent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoSensor *arg1 = (ArServerInfoSensor *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoSensor **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getSensorCurrent(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoSensor_1getSensorCumulative(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoSensor *arg1 = (ArServerInfoSensor *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoSensor **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->getSensorCumulative(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerInfoStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArServerInfoStrings *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerBase **)&jarg1; 
  result = (ArServerInfoStrings *)new ArServerInfoStrings(arg1);
  *(ArServerInfoStrings **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerInfoStrings(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerInfoStrings *arg1 = (ArServerInfoStrings *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerInfoStrings **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoStrings_1netGetStringsInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoStrings *arg1 = (ArServerInfoStrings *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoStrings **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netGetStringsInfo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoStrings_1netGetStrings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerInfoStrings *arg1 = (ArServerInfoStrings *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerInfoStrings **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netGetStrings(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoStrings_1addString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  ArServerInfoStrings *arg1 = (ArServerInfoStrings *) 0 ;
  char *arg2 = (char *) 0 ;
  ArTypes::UByte2 arg3 ;
  ArFunctor2< char *,ArTypes::UByte2 > *arg4 = (ArFunctor2< char *,ArTypes::UByte2 > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerInfoStrings **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (ArTypes::UByte2)jarg3; 
  arg4 = *(ArFunctor2< char *,ArTypes::UByte2 > **)&jarg4; 
  (arg1)->addString((char const *)arg2,arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoStrings_1getAddStringFunctor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerInfoStrings *arg1 = (ArServerInfoStrings *) 0 ;
  ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerInfoStrings **)&jarg1; 
  result = (ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > *)(arg1)->getAddStringFunctor();
  *(ArFunctor3< char const *,ArTypes::UByte2,ArFunctor2< char *,ArTypes::UByte2 > * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerInfoStrings_1internalGetStringInfoHolder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerInfoStrings *arg1 = (ArServerInfoStrings *) 0 ;
  char *arg2 = (char *) 0 ;
  ArStringInfoHolder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerInfoStrings **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArStringInfoHolder *)(arg1)->internalGetStringInfoHolder((char const *)arg2);
  *(ArStringInfoHolder **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeDrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  ArServerModeDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArServerModeDrive *)new ArServerModeDrive(arg1,arg2,arg3);
  *(ArServerModeDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeDrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerModeDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerModeDrive *)new ArServerModeDrive(arg1,arg2);
  *(ArServerModeDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerModeDrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1addControlCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  ArServerHandlerCommands *arg2 = (ArServerHandlerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  arg2 = *(ArServerHandlerCommands **)&jarg2; 
  (arg1)->addControlCommands(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1driveJoystick_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jboolean jarg4) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->driveJoystick(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1driveJoystick_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->driveJoystick(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1serverDriveJoystick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->serverDriveJoystick(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1setThrottleParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setThrottleParams(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1getActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  ArActionGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  result = (ArActionGroup *)(arg1)->getActionGroup();
  *(ArActionGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1setSafeDriving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSafeDriving(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1getSafeDriving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  result = (bool)(arg1)->getSafeDriving();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1setExtraUnsafeAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeDrive *arg1 = (ArServerModeDrive *) 0 ;
  ArAction *arg2 = (ArAction *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeDrive **)&jarg1; 
  arg2 = *(ArAction **)&jarg2; 
  (arg1)->setExtraUnsafeAction(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeIdle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerModeIdle *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerModeIdle *)new ArServerModeIdle(arg1,arg2);
  *(ArServerModeIdle **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerModeIdle(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1setModeInterrupted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  ArServerMode *arg2 = (ArServerMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  arg2 = *(ArServerMode **)&jarg2; 
  (arg1)->setModeInterrupted(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1getModeInterrupted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  ArServerMode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  result = (ArServerMode *)(arg1)->getModeInterrupted();
  *(ArServerMode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1getActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  ArActionGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  result = (ArActionGroup *)(arg1)->getActionGroup();
  *(ArActionGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1addToConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1addToConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1setUseLocationDependentDevices_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1setUseLocationDependentDevices_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1getUseLocationDependentDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeIdle *arg1 = (ArServerModeIdle *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeIdle **)&jarg1; 
  result = (bool)(arg1)->getUseLocationDependentDevices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeRatioDrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jstring jarg7, jboolean jarg8) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  bool arg8 ;
  ArServerModeRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = jarg8 ? true : false; 
  result = (ArServerModeRatioDrive *)new ArServerModeRatioDrive(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
  *(ArServerModeRatioDrive **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeRatioDrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  char *arg7 = (char *) 0 ;
  ArServerModeRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (ArServerModeRatioDrive *)new ArServerModeRatioDrive(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  *(ArServerModeRatioDrive **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeRatioDrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5, jboolean jarg6) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  ArServerModeRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (ArServerModeRatioDrive *)new ArServerModeRatioDrive(arg1,arg2,arg3,arg4,arg5,arg6);
  *(ArServerModeRatioDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeRatioDrive_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  ArServerModeRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (ArServerModeRatioDrive *)new ArServerModeRatioDrive(arg1,arg2,arg3,arg4,arg5);
  *(ArServerModeRatioDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeRatioDrive_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  bool arg4 ;
  ArServerModeRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (ArServerModeRatioDrive *)new ArServerModeRatioDrive(arg1,arg2,arg3,arg4);
  *(ArServerModeRatioDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeRatioDrive_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  ArServerModeRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArServerModeRatioDrive *)new ArServerModeRatioDrive(arg1,arg2,arg3);
  *(ArServerModeRatioDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeRatioDrive_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerModeRatioDrive *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerModeRatioDrive *)new ArServerModeRatioDrive(arg1,arg2);
  *(ArServerModeRatioDrive **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerModeRatioDrive(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addControlCommands(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArServerHandlerCommands *arg2 = (ArServerHandlerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArServerHandlerCommands **)&jarg2; 
  (arg1)->addControlCommands(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1ratioDrive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5, jdouble jarg6) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (double)jarg6; 
  (arg1)->ratioDrive(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1ratioDrive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jboolean jarg5) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->ratioDrive(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1ratioDrive_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->ratioDrive(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addToConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1getActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArActionGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  result = (ArActionGroup *)(arg1)->getActionGroup();
  *(ArActionGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1getActionRatioInput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArActionRatioInput *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  result = (ArActionRatioInput *)(arg1)->getActionRatioInput();
  *(ArActionRatioInput **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1setSafeDriving_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setSafeDriving(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1setSafeDriving_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSafeDriving(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1getSafeDriving(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  result = (bool)(arg1)->getSafeDriving();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1setUseLocationDependentDevices_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1setUseLocationDependentDevices_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1getUseLocationDependentDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  result = (bool)(arg1)->getUseLocationDependentDevices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addSafeDrivingCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addSafeDrivingCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addSafeDrivingCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addSafeDrivingCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1remSafeDrivingCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remSafeDrivingCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addUnsafeDrivingCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addUnsafeDrivingCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addUnsafeDrivingCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addUnsafeDrivingCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1remUnsafeDrivingCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remUnsafeDrivingCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addDrivingBackwardsCallback_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->addDrivingBackwardsCallback(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1addDrivingBackwardsCallback_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->addDrivingBackwardsCallback(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1remDrivingBackwardsCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeRatioDrive *arg1 = (ArServerModeRatioDrive *) 0 ;
  ArFunctor *arg2 = (ArFunctor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeRatioDrive **)&jarg1; 
  arg2 = *(ArFunctor **)&jarg2; 
  (arg1)->remDrivingBackwardsCallback(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeStop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  bool arg3 ;
  ArServerModeStop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArServerModeStop *)new ArServerModeStop(arg1,arg2,arg3);
  *(ArServerModeStop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeStop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerModeStop *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerModeStop *)new ArServerModeStop(arg1,arg2);
  *(ArServerModeStop **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerModeStop(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeStop **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1netStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netStop(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1checkDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  (arg1)->checkDefault();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1getActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  ArActionGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  result = (ArActionGroup *)(arg1)->getActionGroup();
  *(ArActionGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1addToConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->addToConfig(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1addToConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  ArConfig *arg2 = (ArConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  arg2 = *(ArConfig **)&jarg2; 
  (arg1)->addToConfig(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1setUseLocationDependentDevices_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1setUseLocationDependentDevices_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setUseLocationDependentDevices(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1getUseLocationDependentDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerModeStop *arg1 = (ArServerModeStop *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeStop **)&jarg1; 
  result = (bool)(arg1)->getUseLocationDependentDevices();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerModeWander(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerBase *arg1 = (ArServerBase *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerModeWander *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerBase **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerModeWander *)new ArServerModeWander(arg1,arg2);
  *(ArServerModeWander **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerModeWander(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerModeWander **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1activate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeWander **)&jarg1; 
  (arg1)->activate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1deactivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeWander **)&jarg1; 
  (arg1)->deactivate();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1wander(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeWander **)&jarg1; 
  (arg1)->wander();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1netWander(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  ArServerClient *arg2 = (ArServerClient *) 0 ;
  ArNetPacket *arg3 = (ArNetPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerModeWander **)&jarg1; 
  arg2 = *(ArServerClient **)&jarg2; 
  arg3 = *(ArNetPacket **)&jarg3; 
  (arg1)->netWander(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1userTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeWander **)&jarg1; 
  (arg1)->userTask();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1checkDefault(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeWander **)&jarg1; 
  (arg1)->checkDefault();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1getActionGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArServerModeWander *arg1 = (ArServerModeWander *) 0 ;
  ArActionGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerModeWander **)&jarg1; 
  result = (ArActionGroup *)(arg1)->getActionGroup();
  *(ArActionGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleComUC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerSimpleComUC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerSimpleComUC *)new ArServerSimpleComUC(arg1,arg2);
  *(ArServerSimpleComUC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleComUC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleComUC *arg1 = (ArServerSimpleComUC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleComUC **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComUC_1command(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerSimpleComUC *arg1 = (ArServerSimpleComUC *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleComUC **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->command(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComUC_1motionCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerSimpleComUC *arg1 = (ArServerSimpleComUC *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleComUC **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->motionCommand(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleComMovementLogging_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerHandlerPopup *arg3 = (ArServerHandlerPopup *) 0 ;
  ArServerSimpleComMovementLogging *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArServerHandlerPopup **)&jarg3; 
  result = (ArServerSimpleComMovementLogging *)new ArServerSimpleComMovementLogging(arg1,arg2,arg3);
  *(ArServerSimpleComMovementLogging **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleComMovementLogging_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerSimpleComMovementLogging *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerSimpleComMovementLogging *)new ArServerSimpleComMovementLogging(arg1,arg2);
  *(ArServerSimpleComMovementLogging **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleComMovementLogging(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logMovementSentEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logMovementSentEnable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logMovementSentDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logMovementSentDisable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logMovementReceivedEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logMovementReceivedEnable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logMovementReceivedDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logMovementReceivedDisable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logVelocitiesReceivedEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logVelocitiesReceivedEnable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logVelocitiesReceivedDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logVelocitiesReceivedDisable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1packetsReceivedTrackingEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->packetsReceivedTrackingEnable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1packetsReceivedTrackingDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->packetsReceivedTrackingDisable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1packetsSentTrackingEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->packetsSentTrackingEnable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1packetsSentTrackingDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->packetsSentTrackingDisable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logActionsEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logActionsEnable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logActionsDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logActionsDisable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1logActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->logActions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1popupMovementParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->popupMovementParams();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComMovementLogging_1resetOdometer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComMovementLogging *arg1 = (ArServerSimpleComMovementLogging *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComMovementLogging **)&jarg1; 
  (arg1)->resetOdometer();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleComGyro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArAnalogGyro *arg3 = (ArAnalogGyro *) 0 ;
  ArServerSimpleComGyro *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArAnalogGyro **)&jarg3; 
  result = (ArServerSimpleComGyro *)new ArServerSimpleComGyro(arg1,arg2,arg3);
  *(ArServerSimpleComGyro **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleComGyro(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleComGyro *arg1 = (ArServerSimpleComGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleComGyro **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComGyro_1gyroEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComGyro *arg1 = (ArServerSimpleComGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComGyro **)&jarg1; 
  (arg1)->gyroEnable();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComGyro_1gyroDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComGyro *arg1 = (ArServerSimpleComGyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComGyro **)&jarg1; 
  (arg1)->gyroDisable();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleComLogRobotConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerHandlerPopup *arg3 = (ArServerHandlerPopup *) 0 ;
  ArServerSimpleComLogRobotConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = *(ArServerHandlerPopup **)&jarg3; 
  result = (ArServerSimpleComLogRobotConfig *)new ArServerSimpleComLogRobotConfig(arg1,arg2,arg3);
  *(ArServerSimpleComLogRobotConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleComLogRobotConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerSimpleComLogRobotConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerSimpleComLogRobotConfig *)new ArServerSimpleComLogRobotConfig(arg1,arg2);
  *(ArServerSimpleComLogRobotConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComLogRobotConfig_1logConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComLogRobotConfig *arg1 = (ArServerSimpleComLogRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComLogRobotConfig **)&jarg1; 
  (arg1)->logConfig();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComLogRobotConfig_1logMovementConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComLogRobotConfig *arg1 = (ArServerSimpleComLogRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComLogRobotConfig **)&jarg1; 
  (arg1)->logMovementConfig();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComLogRobotConfig_1logOrigConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComLogRobotConfig *arg1 = (ArServerSimpleComLogRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComLogRobotConfig **)&jarg1; 
  (arg1)->logOrigConfig();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComLogRobotConfig_1popupConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComLogRobotConfig *arg1 = (ArServerSimpleComLogRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComLogRobotConfig **)&jarg1; 
  (arg1)->popupConfig();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComLogRobotConfig_1popupOrigConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComLogRobotConfig *arg1 = (ArServerSimpleComLogRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComLogRobotConfig **)&jarg1; 
  (arg1)->popupOrigConfig();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComLogRobotConfig_1popupMovementConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComLogRobotConfig *arg1 = (ArServerSimpleComLogRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComLogRobotConfig **)&jarg1; 
  (arg1)->popupMovementConfig();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleComLogRobotConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleComLogRobotConfig *arg1 = (ArServerSimpleComLogRobotConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleComLogRobotConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleComLogActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerSimpleComLogActions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerSimpleComLogActions *)new ArServerSimpleComLogActions(arg1,arg2);
  *(ArServerSimpleComLogActions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleComLogActions_1logActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleComLogActions *arg1 = (ArServerSimpleComLogActions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleComLogActions **)&jarg1; 
  (arg1)->logActions();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleComLogActions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleComLogActions *arg1 = (ArServerSimpleComLogActions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleComLogActions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleServerCommands_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArServerBase *arg2 = (ArServerBase *) 0 ;
  bool arg3 ;
  ArServerSimpleServerCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArServerBase **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (ArServerSimpleServerCommands *)new ArServerSimpleServerCommands(arg1,arg2,arg3);
  *(ArServerSimpleServerCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleServerCommands_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArServerBase *arg2 = (ArServerBase *) 0 ;
  ArServerSimpleServerCommands *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArServerBase **)&jarg2; 
  result = (ArServerSimpleServerCommands *)new ArServerSimpleServerCommands(arg1,arg2);
  *(ArServerSimpleServerCommands **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleServerCommands(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleServerCommands *arg1 = (ArServerSimpleServerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleServerCommands **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleServerCommands_1logTerseTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleServerCommands *arg1 = (ArServerSimpleServerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleServerCommands **)&jarg1; 
  (arg1)->logTerseTracking();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleServerCommands_1logVerboseTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleServerCommands *arg1 = (ArServerSimpleServerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleServerCommands **)&jarg1; 
  (arg1)->logVerboseTracking();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleServerCommands_1resetTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleServerCommands *arg1 = (ArServerSimpleServerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleServerCommands **)&jarg1; 
  (arg1)->resetTracking();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleServerCommands_1logConnections(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleServerCommands *arg1 = (ArServerSimpleServerCommands *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleServerCommands **)&jarg1; 
  (arg1)->logConnections();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimplePopup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArServerHandlerPopup *arg2 = (ArServerHandlerPopup *) 0 ;
  ArServerSimplePopup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArServerHandlerPopup **)&jarg2; 
  result = (ArServerSimplePopup *)new ArServerSimplePopup(arg1,arg2);
  *(ArServerSimplePopup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimplePopup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimplePopup *arg1 = (ArServerSimplePopup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimplePopup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimplePopup_1simplePopup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArServerSimplePopup *arg1 = (ArServerSimplePopup *) 0 ;
  ArArgumentBuilder *arg2 = (ArArgumentBuilder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimplePopup **)&jarg1; 
  arg2 = *(ArArgumentBuilder **)&jarg2; 
  (arg1)->simplePopup(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleLogRobotDebugPackets_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  char *arg3 = (char *) 0 ;
  ArServerSimpleLogRobotDebugPackets *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (ArServerSimpleLogRobotDebugPackets *)new ArServerSimpleLogRobotDebugPackets(arg1,arg2,(char const *)arg3);
  *(ArServerSimpleLogRobotDebugPackets **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleLogRobotDebugPackets_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerSimpleLogRobotDebugPackets *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerSimpleLogRobotDebugPackets *)new ArServerSimpleLogRobotDebugPackets(arg1,arg2);
  *(ArServerSimpleLogRobotDebugPackets **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleLogRobotDebugPackets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1startLogging_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->startLogging((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1startLogging_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  result = (bool)(arg1)->startLogging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1stopLogging(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  result = (bool)(arg1)->stopLogging();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1packetHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  ArRobotPacket *arg2 = (ArRobotPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  arg2 = *(ArRobotPacket **)&jarg2; 
  result = (bool)(arg1)->packetHandler(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1addToInfoGroup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4, jstring jarg5) {
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  ArStringInfoGroup *arg2 = (ArStringInfoGroup *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  arg2 = *(ArStringInfoGroup **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->addToInfoGroup(arg2,(char const *)arg3,arg4,(char const *)arg5);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1addToInfoGroup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  ArStringInfoGroup *arg2 = (ArStringInfoGroup *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  arg2 = *(ArStringInfoGroup **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4; 
  (arg1)->addToInfoGroup(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1getNumValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  result = (int)(arg1)->getNumValues();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleLogRobotDebugPackets_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArServerSimpleLogRobotDebugPackets *arg1 = (ArServerSimpleLogRobotDebugPackets *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleLogRobotDebugPackets **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleConnectionTester(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  ArServerHandlerCommands *arg1 = (ArServerHandlerCommands *) 0 ;
  ArRobot *arg2 = (ArRobot *) 0 ;
  ArServerSimpleConnectionTester *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerHandlerCommands **)&jarg1; 
  arg2 = *(ArRobot **)&jarg2; 
  result = (ArServerSimpleConnectionTester *)new ArServerSimpleConnectionTester(arg1,arg2);
  *(ArServerSimpleConnectionTester **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleConnectionTester(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleConnectionTester *arg1 = (ArServerSimpleConnectionTester *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleConnectionTester **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleConnectionTester_1connectionTestStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleConnectionTester *arg1 = (ArServerSimpleConnectionTester *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleConnectionTester **)&jarg1; 
  (arg1)->connectionTestStart();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleConnectionTester_1connectionTestStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleConnectionTester *arg1 = (ArServerSimpleConnectionTester *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleConnectionTester **)&jarg1; 
  (arg1)->connectionTestStop();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleOpener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ArServerSimpleOpener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (ArServerSimpleOpener *)new ArServerSimpleOpener(arg1,(char const *)arg2,arg3);
  *(ArServerSimpleOpener **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleOpener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  char *arg2 = (char *) 0 ;
  ArServerSimpleOpener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ArServerSimpleOpener *)new ArServerSimpleOpener(arg1,(char const *)arg2);
  *(ArServerSimpleOpener **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerSimpleOpener_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArArgumentParser *arg1 = (ArArgumentParser *) 0 ;
  ArServerSimpleOpener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArArgumentParser **)&jarg1; 
  result = (ArServerSimpleOpener *)new ArServerSimpleOpener(arg1);
  *(ArServerSimpleOpener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerSimpleOpener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  ArServerBase *arg2 = (ArServerBase *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  arg2 = *(ArServerBase **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->open(arg2,(char const *)arg3,arg4);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  ArServerBase *arg2 = (ArServerBase *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  arg2 = *(ArServerBase **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->open(arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  ArServerBase *arg2 = (ArServerBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  arg2 = *(ArServerBase **)&jarg2; 
  result = (bool)(arg1)->open(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1parseArgs_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  result = (bool)(arg1)->parseArgs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1parseArgs_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  ArArgumentParser *arg2 = (ArArgumentParser *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  arg2 = *(ArArgumentParser **)&jarg2; 
  result = (bool)(arg1)->parseArgs(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1logOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  ((ArServerSimpleOpener const *)arg1)->logOptions();
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1checkAndLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  result = (bool)((ArServerSimpleOpener const *)arg1)->checkAndLog();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1wasUserFileBad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  result = (bool)(arg1)->wasUserFileBad();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1didOpenFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  result = (bool)(arg1)->didOpenFail();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1getPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  result = (int)(arg1)->getPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1setDefaultPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setDefaultPort(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1parseFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->parseFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1setServerTcpOnly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setServerTcpOnly(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerSimpleOpener_1getServerKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArServerSimpleOpener *arg1 = (ArServerSimpleOpener *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerSimpleOpener **)&jarg1; 
  result = (char *)(arg1)->getServerKey();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerUserInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  ArServerUserInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (ArServerUserInfo *)new ArServerUserInfo((char const *)arg1);
  *(ArServerUserInfo **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArServerUserInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArServerUserInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArServerUserInfo *)new ArServerUserInfo();
  *(ArServerUserInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArServerUserInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerUserInfo_1readFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->readFile((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerUserInfo_1setBaseDirectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setBaseDirectory((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerUserInfo_1matchUserPassword_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4, jstring jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned char **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = jarg6 ? true : false; 
  result = (bool)((ArServerUserInfo const *)arg1)->matchUserPassword((char const *)arg2,arg3,(char const *)arg4,(char const *)arg5,arg6);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerUserInfo_1matchUserPassword_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char *arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(unsigned char **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)((ArServerUserInfo const *)arg1)->matchUserPassword((char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerUserInfo_1doNotUse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  result = (bool)((ArServerUserInfo const *)arg1)->doNotUse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerUserInfo_1getUsersGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::set< std::string,ArStrCaseCmpOp > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = ((ArServerUserInfo const *)arg1)->getUsersGroups((char const *)arg2);
  *(std::set< std::string,ArStrCaseCmpOp > **)&jresult = new std::set< std::string,ArStrCaseCmpOp >((const std::set< std::string,ArStrCaseCmpOp > &)result); 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerUserInfo_1logUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArServerUserInfo *arg1 = (ArServerUserInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArServerUserInfo **)&jarg1; 
  ((ArServerUserInfo const *)arg1)->logUsers();
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_new_1ArClientHandlerRobotUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientBase *arg1 = (ArClientBase *) 0 ;
  ArClientHandlerRobotUpdate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientBase **)&jarg1; 
  result = (ArClientHandlerRobotUpdate *)new ArClientHandlerRobotUpdate(arg1);
  *(ArClientHandlerRobotUpdate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_delete_1ArClientHandlerRobotUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1requestUpdates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->requestUpdates(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1requestUpdates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  (arg1)->requestUpdates();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1stopUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  (arg1)->stopUpdates();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1addStatusChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  ArFunctor2< char const *,char const * > *arg2 = (ArFunctor2< char const *,char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  arg2 = *(ArFunctor2< char const *,char const * > **)&jarg2; 
  (arg1)->addStatusChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1remStatusChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  ArFunctor2< char const *,char const * > *arg2 = (ArFunctor2< char const *,char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  arg2 = *(ArFunctor2< char const *,char const * > **)&jarg2; 
  (arg1)->remStatusChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1addModeChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->addModeChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1remModeChangedCB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  ArFunctor1< char const * > *arg2 = (ArFunctor1< char const * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  arg2 = *(ArFunctor1< char const * > **)&jarg2; 
  (arg1)->remModeChangedCB(arg2);
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getTh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getTh();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getPose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  ArPose result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (arg1)->getPose();
  *(ArPose **)&jresult = new ArPose((const ArPose &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getRotVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getRotVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getLatVel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getLatVel();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1haveStateOfCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (bool)(arg1)->haveStateOfCharge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getStateOfCharge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getStateOfCharge();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1haveVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (bool)(arg1)->haveVoltage();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getVoltage();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (double)(arg1)->getTemperature();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (char *)(arg1)->getStatus();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1getMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  result = (char *)(arg1)->getMode();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1waitForStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->waitForStatus((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientHandlerRobotUpdate_1waitForMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  ArClientHandlerRobotUpdate *arg1 = (ArClientHandlerRobotUpdate *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArClientHandlerRobotUpdate **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->waitForMode((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerClient_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArFunctor1< ArServerClient * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1NetPacket_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor **)&baseptr = *(ArFunctor1< ArNetPacket * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArFunctor_1ServerData_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArFunctor1< ArServerClient * > **)&baseptr = *(ArFunctor2< ArServerClient *,ArNetPacket * > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArNetPacket_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArBasePacket **)&baseptr = *(ArNetPacket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArASyncTask **)&baseptr = *(ArServerBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArClientBase_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArASyncTask **)&baseptr = *(ArClientBase **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArHybridForwarderVideo_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArCameraCollectionItem **)&baseptr = *(ArHybridForwarderVideo **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerHandlerCamera_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArCameraCollectionItem **)&baseptr = *(ArServerHandlerCamera **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeDrive_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerMode **)&baseptr = *(ArServerModeDrive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeIdle_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerMode **)&baseptr = *(ArServerModeIdle **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeRatioDrive_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerMode **)&baseptr = *(ArServerModeRatioDrive **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeStop_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerMode **)&baseptr = *(ArServerModeStop **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_ArServerModeWander_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ArServerMode **)&baseptr = *(ArServerModeWander **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_mobilerobots_ArNetworking_ArNetworkingJavaJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[13] = {
    {
      "SwigDirector_ArFunctor_ServerClient_invoke__SWIG_0", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerClient;)V" 
    },
    {
      "SwigDirector_ArFunctor_ServerClient_getName", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerClient;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArFunctor_ServerClient_setName", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerClient;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArFunctor_ServerClient_invoke__SWIG_1", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerClient;J)V" 
    },
    {
      "SwigDirector_ArFunctor_NetPacket_invoke__SWIG_0", "(Lcom/mobilerobots/ArNetworking/ArFunctor_NetPacket;)V" 
    },
    {
      "SwigDirector_ArFunctor_NetPacket_getName", "(Lcom/mobilerobots/ArNetworking/ArFunctor_NetPacket;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArFunctor_NetPacket_setName", "(Lcom/mobilerobots/ArNetworking/ArFunctor_NetPacket;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArFunctor_NetPacket_invoke__SWIG_1", "(Lcom/mobilerobots/ArNetworking/ArFunctor_NetPacket;J)V" 
    },
    {
      "SwigDirector_ArFunctor_ServerData_invoke__SWIG_0", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerData;)V" 
    },
    {
      "SwigDirector_ArFunctor_ServerData_getName", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerData;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ArFunctor_ServerData_setName", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerData;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ArFunctor_ServerData_invoke__SWIG_1", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerData;J)V" 
    },
    {
      "SwigDirector_ArFunctor_ServerData_invoke__SWIG_2", "(Lcom/mobilerobots/ArNetworking/ArFunctor_ServerData;JJ)V" 
    }
  };
  Swig::jclass_ArNetworkingJavaJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_ArNetworkingJavaJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

