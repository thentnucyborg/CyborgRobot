/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArServerHandlerMap {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ArServerHandlerMap(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArServerHandlerMap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArServerHandlerMap(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArServerHandlerMap(ArServerBase server, ArMapInterface arMap, ArServerHandlerMap.DataToSend dataToSend) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMap__SWIG_0(ArServerBase.getCPtr(server), server, ArMapInterface.getCPtr(arMap), arMap, dataToSend.swigValue()), true);
  }

  public ArServerHandlerMap(ArServerBase server, ArMapInterface arMap) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMap__SWIG_1(ArServerBase.getCPtr(server), server, ArMapInterface.getCPtr(arMap), arMap), true);
  }

  public ArServerHandlerMap(ArServerBase server) {
    this(ArNetworkingJavaJNI.new_ArServerHandlerMap__SWIG_2(ArServerBase.getCPtr(server), server), true);
  }

  public boolean loadMap(String mapFile) {
    return ArNetworkingJavaJNI.ArServerHandlerMap_loadMap(swigCPtr, this, mapFile);
  }

  public void useMap(ArMapInterface mapObj, boolean takeOwnershipOfMap) {
    ArNetworkingJavaJNI.ArServerHandlerMap_useMap__SWIG_0(swigCPtr, this, ArMapInterface.getCPtr(mapObj), mapObj, takeOwnershipOfMap);
  }

  public void useMap(ArMapInterface mapObj) {
    ArNetworkingJavaJNI.ArServerHandlerMap_useMap__SWIG_1(swigCPtr, this, ArMapInterface.getCPtr(mapObj), mapObj);
  }

  public ArMapInterface getMap() {
    long cPtr = ArNetworkingJavaJNI.ArServerHandlerMap_getMap(swigCPtr, this);
    return (cPtr == 0) ? null : new ArMapInterface(cPtr, false);
  }

  public void serverGetMapId(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMap_serverGetMapId(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverGetMapName(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMap_serverGetMapName(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverGetMap(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMap_serverGetMap(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverGetMapBinary(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMap_serverGetMapBinary(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverGetMapMultiScans(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMap_serverGetMapMultiScans(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverGetMapWithMaxCategory(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMap_serverGetMapWithMaxCategory(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void serverGetGoals(ArServerClient client, ArNetPacket packet) {
    ArNetworkingJavaJNI.ArServerHandlerMap_serverGetGoals(swigCPtr, this, ArServerClient.getCPtr(client), client, ArNetPacket.getCPtr(packet), packet);
  }

  public void setDataToSend(ArServerHandlerMap.DataToSend dataToSend) {
    ArNetworkingJavaJNI.ArServerHandlerMap_setDataToSend(swigCPtr, this, dataToSend.swigValue());
  }

  public ArServerHandlerMap.DataToSend getDataToSend() {
    return ArServerHandlerMap.DataToSend.swigToEnum(ArNetworkingJavaJNI.ArServerHandlerMap_getDataToSend(swigCPtr, this));
  }

  public final static class DataToSend {
    public final static ArServerHandlerMap.DataToSend LINES = new ArServerHandlerMap.DataToSend("LINES", ArNetworkingJavaJNI.ArServerHandlerMap_LINES_get());
    public final static ArServerHandlerMap.DataToSend POINTS = new ArServerHandlerMap.DataToSend("POINTS", ArNetworkingJavaJNI.ArServerHandlerMap_POINTS_get());
    public final static ArServerHandlerMap.DataToSend BOTH = new ArServerHandlerMap.DataToSend("BOTH", ArNetworkingJavaJNI.ArServerHandlerMap_BOTH_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DataToSend swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DataToSend.class + " with value " + swigValue);
    }

    private DataToSend(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DataToSend(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DataToSend(String swigName, DataToSend swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DataToSend[] swigValues = { LINES, POINTS, BOTH };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
