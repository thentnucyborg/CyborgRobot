/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArClientHandlerRobotUpdate {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ArClientHandlerRobotUpdate(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArClientHandlerRobotUpdate obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArClientHandlerRobotUpdate(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArClientHandlerRobotUpdate(ArClientBase client) {
    this(ArNetworkingJavaJNI.new_ArClientHandlerRobotUpdate(ArClientBase.getCPtr(client), client), true);
  }

  public void requestUpdates(int freq) {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_requestUpdates__SWIG_0(swigCPtr, this, freq);
  }

  public void requestUpdates() {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_requestUpdates__SWIG_1(swigCPtr, this);
  }

  public void stopUpdates() {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_stopUpdates(swigCPtr, this);
  }

  public void addStatusChangedCB(SWIGTYPE_p_ArFunctor2T_char_const_p_char_const_p_t cb) {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_addStatusChangedCB(swigCPtr, this, SWIGTYPE_p_ArFunctor2T_char_const_p_char_const_p_t.getCPtr(cb));
  }

  public void remStatusChangedCB(SWIGTYPE_p_ArFunctor2T_char_const_p_char_const_p_t cb) {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_remStatusChangedCB(swigCPtr, this, SWIGTYPE_p_ArFunctor2T_char_const_p_char_const_p_t.getCPtr(cb));
  }

  public void addModeChangedCB(ArFunctor1_CString cb) {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_addModeChangedCB(swigCPtr, this, ArFunctor1_CString.getCPtr(cb), cb);
  }

  public void remModeChangedCB(ArFunctor1_CString cb) {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_remModeChangedCB(swigCPtr, this, ArFunctor1_CString.getCPtr(cb), cb);
  }

  public void lock() {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_lock(swigCPtr, this);
  }

  public void unlock() {
    ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_unlock(swigCPtr, this);
  }

  public double getX() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getX(swigCPtr, this);
  }

  public double getY() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getY(swigCPtr, this);
  }

  public double getTh() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getTh(swigCPtr, this);
  }

  public ArPose getPose() {
    return new ArPose(ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getPose(swigCPtr, this), true);
  }

  public double getVel() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getVel(swigCPtr, this);
  }

  public double getRotVel() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getRotVel(swigCPtr, this);
  }

  public double getLatVel() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getLatVel(swigCPtr, this);
  }

  public boolean haveStateOfCharge() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_haveStateOfCharge(swigCPtr, this);
  }

  public double getStateOfCharge() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getStateOfCharge(swigCPtr, this);
  }

  public boolean haveVoltage() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_haveVoltage(swigCPtr, this);
  }

  public double getVoltage() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getVoltage(swigCPtr, this);
  }

  public double getTemperature() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getTemperature(swigCPtr, this);
  }

  public String getStatus() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getStatus(swigCPtr, this);
  }

  public String getMode() {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_getMode(swigCPtr, this);
  }

  public boolean waitForStatus(String status, int timeout) {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_waitForStatus(swigCPtr, this, status, timeout);
  }

  public boolean waitForMode(String mode, int timeout) {
    return ArNetworkingJavaJNI.ArClientHandlerRobotUpdate_waitForMode(swigCPtr, this, mode, timeout);
  }

}
