/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArClientBase extends ArASyncTask {
  private transient long swigCPtr;

  public ArClientBase(long cPtr, boolean cMemoryOwn) {
    super(ArNetworkingJavaJNI.ArClientBase_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArClientBase obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArClientBase(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ArClientBase() {
    this(ArNetworkingJavaJNI.new_ArClientBase(), true);
  }

  public void setRobotName(String name, boolean debugLogging, int robotId) {
    ArNetworkingJavaJNI.ArClientBase_setRobotName__SWIG_0(swigCPtr, this, name, debugLogging, robotId);
  }

  public void setRobotName(String name, boolean debugLogging) {
    ArNetworkingJavaJNI.ArClientBase_setRobotName__SWIG_1(swigCPtr, this, name, debugLogging);
  }

  public void setRobotName(String name) {
    ArNetworkingJavaJNI.ArClientBase_setRobotName__SWIG_2(swigCPtr, this, name);
  }

  public String getRobotName() {
    return ArNetworkingJavaJNI.ArClientBase_getRobotName(swigCPtr, this);
  }

  public String getLogPrefix() {
    return ArNetworkingJavaJNI.ArClientBase_getLogPrefix(swigCPtr, this);
  }

  public boolean getDebugLogging() {
    return ArNetworkingJavaJNI.ArClientBase_getDebugLogging(swigCPtr, this);
  }

  public boolean blockingConnect(String host, int port, boolean log, String user, String password, String openOnIP) {
    return ArNetworkingJavaJNI.ArClientBase_blockingConnect__SWIG_0(swigCPtr, this, host, port, log, user, password, openOnIP);
  }

  public boolean blockingConnect(String host, int port, boolean log, String user, String password) {
    return ArNetworkingJavaJNI.ArClientBase_blockingConnect__SWIG_1(swigCPtr, this, host, port, log, user, password);
  }

  public boolean blockingConnect(String host, int port, boolean log, String user) {
    return ArNetworkingJavaJNI.ArClientBase_blockingConnect__SWIG_2(swigCPtr, this, host, port, log, user);
  }

  public boolean blockingConnect(String host, int port, boolean log) {
    return ArNetworkingJavaJNI.ArClientBase_blockingConnect__SWIG_3(swigCPtr, this, host, port, log);
  }

  public boolean blockingConnect(String host, int port) {
    return ArNetworkingJavaJNI.ArClientBase_blockingConnect__SWIG_4(swigCPtr, this, host, port);
  }

  public boolean disconnect() {
    return ArNetworkingJavaJNI.ArClientBase_disconnect(swigCPtr, this);
  }

  public void disconnectSoon() {
    ArNetworkingJavaJNI.ArClientBase_disconnectSoon(swigCPtr, this);
  }

  public boolean isConnected() {
    return ArNetworkingJavaJNI.ArClientBase_isConnected(swigCPtr, this);
  }

  public boolean wasRejected() {
    return ArNetworkingJavaJNI.ArClientBase_wasRejected(swigCPtr, this);
  }

  public ArClientBase.ClientState getState() {
    return ArClientBase.ClientState.swigToEnum(ArNetworkingJavaJNI.ArClientBase_getState(swigCPtr, this));
  }

  public boolean addHandler(String name, ArFunctor_NetPacket functor, boolean takeOwnershipOfFunctor) {
    return ArNetworkingJavaJNI.ArClientBase_addHandler__SWIG_0(swigCPtr, this, name, ArFunctor_NetPacket.getCPtr(functor), functor, takeOwnershipOfFunctor);
  }

  public boolean addHandler(String name, ArFunctor_NetPacket functor) {
    return ArNetworkingJavaJNI.ArClientBase_addHandler__SWIG_1(swigCPtr, this, name, ArFunctor_NetPacket.getCPtr(functor), functor);
  }

  public boolean remHandler(String name, ArFunctor_NetPacket functor) {
    return ArNetworkingJavaJNI.ArClientBase_remHandler(swigCPtr, this, name, ArFunctor_NetPacket.getCPtr(functor), functor);
  }

  public boolean request(String name, int mSec, ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_request__SWIG_0(swigCPtr, this, name, mSec, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean request(String name, int mSec) {
    return ArNetworkingJavaJNI.ArClientBase_request__SWIG_1(swigCPtr, this, name, mSec);
  }

  public boolean requestStop(String name) {
    return ArNetworkingJavaJNI.ArClientBase_requestStop(swigCPtr, this, name);
  }

  public boolean requestOnce(String name, ArNetPacket packet, boolean quiet) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnce__SWIG_0(swigCPtr, this, name, ArNetPacket.getCPtr(packet), packet, quiet);
  }

  public boolean requestOnce(String name, ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnce__SWIG_1(swigCPtr, this, name, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean requestOnce(String name) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnce__SWIG_2(swigCPtr, this, name);
  }

  public boolean requestOnceUdp(String name, ArNetPacket packet, boolean quiet) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceUdp__SWIG_0(swigCPtr, this, name, ArNetPacket.getCPtr(packet), packet, quiet);
  }

  public boolean requestOnceUdp(String name, ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceUdp__SWIG_1(swigCPtr, this, name, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean requestOnceUdp(String name) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceUdp__SWIG_2(swigCPtr, this, name);
  }

  public boolean requestOnceWithString(String name, String str) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceWithString(swigCPtr, this, name, str);
  }

  public boolean requestOnceWithInt16(String name, short val) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceWithInt16(swigCPtr, this, name, val);
  }

  public boolean requestOnceWithInt32(String name, int val) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceWithInt32(swigCPtr, this, name, val);
  }

  public boolean requestOnceWithDouble(String name, double val) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceWithDouble(swigCPtr, this, name, val);
  }

  public boolean dataExists(String name) {
    return ArNetworkingJavaJNI.ArClientBase_dataExists(swigCPtr, this, name);
  }

  public String getHost() {
    return ArNetworkingJavaJNI.ArClientBase_getHost(swigCPtr, this);
  }

  public int getPort() {
    return ArNetworkingJavaJNI.ArClientBase_getPort(swigCPtr, this);
  }

  public void setServerKey(String serverKey, boolean log) {
    ArNetworkingJavaJNI.ArClientBase_setServerKey__SWIG_0(swigCPtr, this, serverKey, log);
  }

  public void setServerKey(String serverKey) {
    ArNetworkingJavaJNI.ArClientBase_setServerKey__SWIG_1(swigCPtr, this, serverKey);
  }

  public void enforceProtocolVersion(String protocolVersion, boolean log) {
    ArNetworkingJavaJNI.ArClientBase_enforceProtocolVersion__SWIG_0(swigCPtr, this, protocolVersion, log);
  }

  public void enforceProtocolVersion(String protocolVersion) {
    ArNetworkingJavaJNI.ArClientBase_enforceProtocolVersion__SWIG_1(swigCPtr, this, protocolVersion);
  }

  public void enforceType(ArServerCommands.Type type, boolean log) {
    ArNetworkingJavaJNI.ArClientBase_enforceType__SWIG_0(swigCPtr, this, type.swigValue(), log);
  }

  public void enforceType(ArServerCommands.Type type) {
    ArNetworkingJavaJNI.ArClientBase_enforceType__SWIG_1(swigCPtr, this, type.swigValue());
  }

  public ArTime getLastPacketReceived() {
    return new ArTime(ArNetworkingJavaJNI.ArClientBase_getLastPacketReceived(swigCPtr, this), true);
  }

  public void setBackupTimeout(double timeoutInMins) {
    ArNetworkingJavaJNI.ArClientBase_setBackupTimeout(swigCPtr, this, timeoutInMins);
  }

  public void run() {
    ArNetworkingJavaJNI.ArClientBase_run(swigCPtr, this);
  }

  public void runAsync() {
    ArNetworkingJavaJNI.ArClientBase_runAsync(swigCPtr, this);
  }

  public void stopRunning() {
    ArNetworkingJavaJNI.ArClientBase_stopRunning(swigCPtr, this);
  }

  public boolean isStopped() {
    return ArNetworkingJavaJNI.ArClientBase_isStopped(swigCPtr, this);
  }

  public void logDataList() {
    ArNetworkingJavaJNI.ArClientBase_logDataList(swigCPtr, this);
  }

  public void addCycleCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArClientBase_addCycleCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remCycleCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArClientBase_remCycleCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public boolean sendPacketTcp(ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_sendPacketTcp(swigCPtr, this, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean sendPacketUdp(ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_sendPacketUdp(swigCPtr, this, ArNetPacket.getCPtr(packet), packet);
  }

  public void setConnectTimeoutTime(int sec) {
    ArNetworkingJavaJNI.ArClientBase_setConnectTimeoutTime(swigCPtr, this, sec);
  }

  public int getConnectTimeoutTime() {
    return ArNetworkingJavaJNI.ArClientBase_getConnectTimeoutTime(swigCPtr, this);
  }

  public void logTracking(boolean terse) {
    ArNetworkingJavaJNI.ArClientBase_logTracking(swigCPtr, this, terse);
  }

  public void resetTracking() {
    ArNetworkingJavaJNI.ArClientBase_resetTracking(swigCPtr, this);
  }

  public void addServerShutdownCB(ArFunctor functor, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArClientBase_addServerShutdownCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addServerShutdownCB(ArFunctor functor) {
    ArNetworkingJavaJNI.ArClientBase_addServerShutdownCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remServerShutdownCB(ArFunctor functor) {
    ArNetworkingJavaJNI.ArClientBase_remServerShutdownCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addDisconnectOnErrorCB(ArFunctor functor, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArClientBase_addDisconnectOnErrorCB__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position.swigValue());
  }

  public void addDisconnectOnErrorCB(ArFunctor functor) {
    ArNetworkingJavaJNI.ArClientBase_addDisconnectOnErrorCB__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remDisconnectOnErrorCB(ArFunctor functor) {
    ArNetworkingJavaJNI.ArClientBase_remDisconnectOnErrorCB(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void loopOnce() {
    ArNetworkingJavaJNI.ArClientBase_loopOnce(swigCPtr, this);
  }

  public void processPacket(ArNetPacket packet, boolean tcp) {
    ArNetworkingJavaJNI.ArClientBase_processPacket(swigCPtr, this, ArNetPacket.getCPtr(packet), packet, tcp);
  }

  public void processPacketUdp(ArNetPacket packet, SWIGTYPE_p_sockaddr_in sin) {
    ArNetworkingJavaJNI.ArClientBase_processPacketUdp(swigCPtr, this, ArNetPacket.getCPtr(packet), packet, SWIGTYPE_p_sockaddr_in.getCPtr(sin));
  }

  public void setTcpOnlyFromServer() {
    ArNetworkingJavaJNI.ArClientBase_setTcpOnlyFromServer(swigCPtr, this);
  }

  public void setTcpOnlyToServer() {
    ArNetworkingJavaJNI.ArClientBase_setTcpOnlyToServer(swigCPtr, this);
  }

  public boolean isTcpOnlyFromServer() {
    return ArNetworkingJavaJNI.ArClientBase_isTcpOnlyFromServer(swigCPtr, this);
  }

  public boolean isTcpOnlyToServer() {
    return ArNetworkingJavaJNI.ArClientBase_isTcpOnlyToServer(swigCPtr, this);
  }

  public void getClientKey(SWIGTYPE_p_unsigned_char key) {
    ArNetworkingJavaJNI.ArClientBase_getClientKey(swigCPtr, this, SWIGTYPE_p_unsigned_char.getCPtr(key));
  }

  public boolean startNonBlockingDisconnect() {
    return ArNetworkingJavaJNI.ArClientBase_startNonBlockingDisconnect(swigCPtr, this);
  }

  public void finishNonBlockingDisconnect() {
    ArNetworkingJavaJNI.ArClientBase_finishNonBlockingDisconnect(swigCPtr, this);
  }

  public String getName(ArNetPacket packet, boolean internalCall) {
    return ArNetworkingJavaJNI.ArClientBase_getName__SWIG_0(swigCPtr, this, ArNetPacket.getCPtr(packet), packet, internalCall);
  }

  public String getName(ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_getName__SWIG_1(swigCPtr, this, ArNetPacket.getCPtr(packet), packet);
  }

  public String getName(long command, boolean internalCall) {
    return ArNetworkingJavaJNI.ArClientBase_getName__SWIG_2(swigCPtr, this, command, internalCall);
  }

  public String getName(long command) {
    return ArNetworkingJavaJNI.ArClientBase_getName__SWIG_3(swigCPtr, this, command);
  }

  public SWIGTYPE_p_void runThread(SWIGTYPE_p_void arg) {
    long cPtr = ArNetworkingJavaJNI.ArClientBase_runThread(swigCPtr, this, SWIGTYPE_p_void.getCPtr(arg));
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public SWIGTYPE_p_in_addr getTcpAddr() {
    long cPtr = ArNetworkingJavaJNI.ArClientBase_getTcpAddr(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_in_addr(cPtr, false);
  }

  public boolean internalBlockingConnect(String host, int port, boolean log, String user, String password, ArSocket tcpSocket, String openOnIP) {
    return ArNetworkingJavaJNI.ArClientBase_internalBlockingConnect__SWIG_0(swigCPtr, this, host, port, log, user, password, ArSocket.getCPtr(tcpSocket), tcpSocket, openOnIP);
  }

  public boolean internalBlockingConnect(String host, int port, boolean log, String user, String password, ArSocket tcpSocket) {
    return ArNetworkingJavaJNI.ArClientBase_internalBlockingConnect__SWIG_1(swigCPtr, this, host, port, log, user, password, ArSocket.getCPtr(tcpSocket), tcpSocket);
  }

  public ArClientBase.NonBlockingConnectReturn internalNonBlockingConnectStart(String host, int port, boolean log, String user, String password, ArSocket tcpSocket, String openOnIP) {
    return ArClientBase.NonBlockingConnectReturn.swigToEnum(ArNetworkingJavaJNI.ArClientBase_internalNonBlockingConnectStart__SWIG_0(swigCPtr, this, host, port, log, user, password, ArSocket.getCPtr(tcpSocket), tcpSocket, openOnIP));
  }

  public ArClientBase.NonBlockingConnectReturn internalNonBlockingConnectStart(String host, int port, boolean log, String user, String password, ArSocket tcpSocket) {
    return ArClientBase.NonBlockingConnectReturn.swigToEnum(ArNetworkingJavaJNI.ArClientBase_internalNonBlockingConnectStart__SWIG_1(swigCPtr, this, host, port, log, user, password, ArSocket.getCPtr(tcpSocket), tcpSocket));
  }

  public ArClientBase.NonBlockingConnectReturn internalNonBlockingConnectContinue() {
    return ArClientBase.NonBlockingConnectReturn.swigToEnum(ArNetworkingJavaJNI.ArClientBase_internalNonBlockingConnectContinue(swigCPtr, this));
  }

  public ArSocket getTcpSocket() {
    long cPtr = ArNetworkingJavaJNI.ArClientBase_getTcpSocket(swigCPtr, this);
    return (cPtr == 0) ? null : new ArSocket(cPtr, false);
  }

  public ArSocket getUdpSocket() {
    long cPtr = ArNetworkingJavaJNI.ArClientBase_getUdpSocket(swigCPtr, this);
    return (cPtr == 0) ? null : new ArSocket(cPtr, false);
  }

  public SWIGTYPE_p_std__mapT_unsigned_int_ArClientData_p_t getDataMap() {
    long cPtr = ArNetworkingJavaJNI.ArClientBase_getDataMap(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__mapT_unsigned_int_ArClientData_p_t(cPtr, false);
  }

  public long findCommandFromName(String name) {
    return ArNetworkingJavaJNI.ArClientBase_findCommandFromName(swigCPtr, this, name);
  }

  public boolean requestByCommand(long command, int mSec, ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_requestByCommand__SWIG_0(swigCPtr, this, command, mSec, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean requestByCommand(long command, int mSec) {
    return ArNetworkingJavaJNI.ArClientBase_requestByCommand__SWIG_1(swigCPtr, this, command, mSec);
  }

  public boolean requestStopByCommand(long command) {
    return ArNetworkingJavaJNI.ArClientBase_requestStopByCommand(swigCPtr, this, command);
  }

  public boolean requestOnceByCommand(long command, ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceByCommand__SWIG_0(swigCPtr, this, command, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean requestOnceByCommand(long command) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceByCommand__SWIG_1(swigCPtr, this, command);
  }

  public boolean requestOnceByCommandUdp(long command, ArNetPacket packet) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceByCommandUdp__SWIG_0(swigCPtr, this, command, ArNetPacket.getCPtr(packet), packet);
  }

  public boolean requestOnceByCommandUdp(long command) {
    return ArNetworkingJavaJNI.ArClientBase_requestOnceByCommandUdp__SWIG_1(swigCPtr, this, command);
  }

  public boolean getReceivedDataList() {
    return ArNetworkingJavaJNI.ArClientBase_getReceivedDataList(swigCPtr, this);
  }

  public boolean getReceivedArgRetList() {
    return ArNetworkingJavaJNI.ArClientBase_getReceivedArgRetList(swigCPtr, this);
  }

  public boolean getReceivedGroupAndFlagsList() {
    return ArNetworkingJavaJNI.ArClientBase_getReceivedGroupAndFlagsList(swigCPtr, this);
  }

  public int getRejected() {
    return ArNetworkingJavaJNI.ArClientBase_getRejected(swigCPtr, this);
  }

  public String getRejectedString() {
    return ArNetworkingJavaJNI.ArClientBase_getRejectedString(swigCPtr, this);
  }

  public final static class ClientState {
    public final static ArClientBase.ClientState STATE_NO_CONNECTION = new ArClientBase.ClientState("STATE_NO_CONNECTION");
    public final static ArClientBase.ClientState STATE_FAILED_CONNECTION = new ArClientBase.ClientState("STATE_FAILED_CONNECTION");
    public final static ArClientBase.ClientState STATE_OPENED_SOCKET = new ArClientBase.ClientState("STATE_OPENED_SOCKET");
    public final static ArClientBase.ClientState STATE_EXCHANGED_INTROS = new ArClientBase.ClientState("STATE_EXCHANGED_INTROS");
    public final static ArClientBase.ClientState STATE_REJECTED = new ArClientBase.ClientState("STATE_REJECTED");
    public final static ArClientBase.ClientState STATE_WAITING_LIST = new ArClientBase.ClientState("STATE_WAITING_LIST");
    public final static ArClientBase.ClientState STATE_CONNECTED = new ArClientBase.ClientState("STATE_CONNECTED");
    public final static ArClientBase.ClientState STATE_LOST_CONNECTION = new ArClientBase.ClientState("STATE_LOST_CONNECTION");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ClientState swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ClientState.class + " with value " + swigValue);
    }

    private ClientState(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ClientState(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ClientState(String swigName, ClientState swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ClientState[] swigValues = { STATE_NO_CONNECTION, STATE_FAILED_CONNECTION, STATE_OPENED_SOCKET, STATE_EXCHANGED_INTROS, STATE_REJECTED, STATE_WAITING_LIST, STATE_CONNECTED, STATE_LOST_CONNECTION };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static int CLIENT_KEY_LENGTH = ArNetworkingJavaJNI.ArClientBase_CLIENT_KEY_LENGTH_get();

  public final static class NonBlockingConnectReturn {
    public final static ArClientBase.NonBlockingConnectReturn NON_BLOCKING_CONTINUE = new ArClientBase.NonBlockingConnectReturn("NON_BLOCKING_CONTINUE");
    public final static ArClientBase.NonBlockingConnectReturn NON_BLOCKING_CONNECTED = new ArClientBase.NonBlockingConnectReturn("NON_BLOCKING_CONNECTED");
    public final static ArClientBase.NonBlockingConnectReturn NON_BLOCKING_FAILED = new ArClientBase.NonBlockingConnectReturn("NON_BLOCKING_FAILED");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static NonBlockingConnectReturn swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + NonBlockingConnectReturn.class + " with value " + swigValue);
    }

    private NonBlockingConnectReturn(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private NonBlockingConnectReturn(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private NonBlockingConnectReturn(String swigName, NonBlockingConnectReturn swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static NonBlockingConnectReturn[] swigValues = { NON_BLOCKING_CONTINUE, NON_BLOCKING_CONNECTED, NON_BLOCKING_FAILED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
