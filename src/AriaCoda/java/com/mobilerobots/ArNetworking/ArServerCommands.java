/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArServerCommands {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ArServerCommands(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArServerCommands obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArServerCommands(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static String toString(ArServerCommands.Type type) {
    return ArNetworkingJavaJNI.ArServerCommands_toString(type.swigValue());
  }

  public ArServerCommands() {
    this(ArNetworkingJavaJNI.new_ArServerCommands(), true);
  }

  public final static class ServerCommands {
    public final static ArServerCommands.ServerCommands SHUTDOWN = new ArServerCommands.ServerCommands("SHUTDOWN", ArNetworkingJavaJNI.ArServerCommands_SHUTDOWN_get());
    public final static ArServerCommands.ServerCommands INTRODUCTION = new ArServerCommands.ServerCommands("INTRODUCTION", ArNetworkingJavaJNI.ArServerCommands_INTRODUCTION_get());
    public final static ArServerCommands.ServerCommands UDP_INTRODUCTION = new ArServerCommands.ServerCommands("UDP_INTRODUCTION", ArNetworkingJavaJNI.ArServerCommands_UDP_INTRODUCTION_get());
    public final static ArServerCommands.ServerCommands UDP_CONFIRMATION = new ArServerCommands.ServerCommands("UDP_CONFIRMATION", ArNetworkingJavaJNI.ArServerCommands_UDP_CONFIRMATION_get());
    public final static ArServerCommands.ServerCommands CONNECTED = new ArServerCommands.ServerCommands("CONNECTED", ArNetworkingJavaJNI.ArServerCommands_CONNECTED_get());
    public final static ArServerCommands.ServerCommands REJECTED = new ArServerCommands.ServerCommands("REJECTED", ArNetworkingJavaJNI.ArServerCommands_REJECTED_get());
    public final static ArServerCommands.ServerCommands TCP_ONLY = new ArServerCommands.ServerCommands("TCP_ONLY", ArNetworkingJavaJNI.ArServerCommands_TCP_ONLY_get());
    public final static ArServerCommands.ServerCommands LIST = new ArServerCommands.ServerCommands("LIST", ArNetworkingJavaJNI.ArServerCommands_LIST_get());
    public final static ArServerCommands.ServerCommands LISTSINGLE = new ArServerCommands.ServerCommands("LISTSINGLE", ArNetworkingJavaJNI.ArServerCommands_LISTSINGLE_get());
    public final static ArServerCommands.ServerCommands LISTARGRET = new ArServerCommands.ServerCommands("LISTARGRET", ArNetworkingJavaJNI.ArServerCommands_LISTARGRET_get());
    public final static ArServerCommands.ServerCommands LISTARGRETSINGLE = new ArServerCommands.ServerCommands("LISTARGRETSINGLE", ArNetworkingJavaJNI.ArServerCommands_LISTARGRETSINGLE_get());
    public final static ArServerCommands.ServerCommands LISTGROUPANDFLAGS = new ArServerCommands.ServerCommands("LISTGROUPANDFLAGS", ArNetworkingJavaJNI.ArServerCommands_LISTGROUPANDFLAGS_get());
    public final static ArServerCommands.ServerCommands LISTGROUPANDFLAGSSINGLE = new ArServerCommands.ServerCommands("LISTGROUPANDFLAGSSINGLE", ArNetworkingJavaJNI.ArServerCommands_LISTGROUPANDFLAGSSINGLE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ServerCommands swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ServerCommands.class + " with value " + swigValue);
    }

    private ServerCommands(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ServerCommands(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ServerCommands(String swigName, ServerCommands swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ServerCommands[] swigValues = { SHUTDOWN, INTRODUCTION, UDP_INTRODUCTION, UDP_CONFIRMATION, CONNECTED, REJECTED, TCP_ONLY, LIST, LISTSINGLE, LISTARGRET, LISTARGRETSINGLE, LISTGROUPANDFLAGS, LISTGROUPANDFLAGSSINGLE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Type {
    public final static ArServerCommands.Type TYPE_UNSPECIFIED = new ArServerCommands.Type("TYPE_UNSPECIFIED", ArNetworkingJavaJNI.ArServerCommands_TYPE_UNSPECIFIED_get());
    public final static ArServerCommands.Type TYPE_REAL = new ArServerCommands.Type("TYPE_REAL", ArNetworkingJavaJNI.ArServerCommands_TYPE_REAL_get());
    public final static ArServerCommands.Type TYPE_SIMULATED = new ArServerCommands.Type("TYPE_SIMULATED", ArNetworkingJavaJNI.ArServerCommands_TYPE_SIMULATED_get());
    public final static ArServerCommands.Type TYPE_NONE = new ArServerCommands.Type("TYPE_NONE", ArNetworkingJavaJNI.ArServerCommands_TYPE_NONE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Type swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    private Type(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Type(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Type(String swigName, Type swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Type[] swigValues = { TYPE_UNSPECIFIED, TYPE_REAL, TYPE_SIMULATED, TYPE_NONE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
