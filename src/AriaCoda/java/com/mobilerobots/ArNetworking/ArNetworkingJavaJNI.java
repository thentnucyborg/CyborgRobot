/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*; 
public class ArNetworkingJavaJNI {
  public final static native int SWIG_IMPORTED_ARIA_get();
  public final static native void delete_ArFunctor_ServerClient(long jarg1);
  public final static native void ArFunctor_ServerClient_invoke__SWIG_0(long jarg1, ArFunctor_ServerClient jarg1_);
  public final static native void ArFunctor_ServerClient_invoke__SWIG_1(long jarg1, ArFunctor_ServerClient jarg1_, long jarg2, ArServerClient jarg2_);
  public final static native long new_ArFunctor_ServerClient();
  public final static native void ArFunctor_ServerClient_director_connect(ArFunctor_ServerClient obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ArFunctor_ServerClient_change_ownership(ArFunctor_ServerClient obj, long cptr, boolean take_or_release);
  public final static native void delete_ArFunctor_NetPacket(long jarg1);
  public final static native void ArFunctor_NetPacket_invoke__SWIG_0(long jarg1, ArFunctor_NetPacket jarg1_);
  public final static native void ArFunctor_NetPacket_invoke__SWIG_1(long jarg1, ArFunctor_NetPacket jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native long new_ArFunctor_NetPacket();
  public final static native void ArFunctor_NetPacket_director_connect(ArFunctor_NetPacket obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ArFunctor_NetPacket_change_ownership(ArFunctor_NetPacket obj, long cptr, boolean take_or_release);
  public final static native void delete_ArFunctor_ServerData(long jarg1);
  public final static native void ArFunctor_ServerData_invoke__SWIG_0(long jarg1, ArFunctor_ServerData jarg1_);
  public final static native void ArFunctor_ServerData_invoke__SWIG_1(long jarg1, ArFunctor_ServerData jarg1_, long jarg2, ArServerClient jarg2_);
  public final static native void ArFunctor_ServerData_invoke__SWIG_2(long jarg1, ArFunctor_ServerData jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native long new_ArFunctor_ServerData();
  public final static native void ArFunctor_ServerData_director_connect(ArFunctor_ServerData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ArFunctor_ServerData_change_ownership(ArFunctor_ServerData obj, long cptr, boolean take_or_release);
  public final static native long new_ArNetPacket__SWIG_0(int jarg1);
  public final static native long new_ArNetPacket__SWIG_1();
  public final static native long new_ArNetPacket__SWIG_2(long jarg1, ArNetPacket jarg1_);
  public final static native void delete_ArNetPacket(long jarg1);
  public final static native void ArNetPacket_setCommand(long jarg1, ArNetPacket jarg1_, int jarg2);
  public final static native int ArNetPacket_getCommand(long jarg1, ArNetPacket jarg1_);
  public final static native int ArNetPacket_SIZE_OF_LENGTH_get();
  public final static native int ArNetPacket_MAX_LENGTH_get();
  public final static native int ArNetPacket_HEADER_LENGTH_get();
  public final static native int ArNetPacket_FOOTER_LENGTH_get();
  public final static native int ArNetPacket_MAX_DATA_LENGTH_get();
  public final static native void ArNetPacket_doubleToBuf(long jarg1, ArNetPacket jarg1_, double jarg2);
  public final static native double ArNetPacket_bufToDouble(long jarg1, ArNetPacket jarg1_);
  public final static native void ArNetPacket_empty(long jarg1, ArNetPacket jarg1_);
  public final static native void ArNetPacket_finalizePacket(long jarg1, ArNetPacket jarg1_);
  public final static native void ArNetPacket_resetRead(long jarg1, ArNetPacket jarg1_);
  public final static native void ArNetPacket_duplicatePacket(long jarg1, ArNetPacket jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native boolean ArNetPacket_verifyCheckSum(long jarg1, ArNetPacket jarg1_);
  public final static native short ArNetPacket_calcCheckSum(long jarg1, ArNetPacket jarg1_);
  public final static native boolean ArNetPacket_getAddedFooter(long jarg1, ArNetPacket jarg1_);
  public final static native void ArNetPacket_setAddedFooter(long jarg1, ArNetPacket jarg1_, boolean jarg2);
  public final static native int ArNetPacket_getPacketSource(long jarg1, ArNetPacket jarg1_);
  public final static native void ArNetPacket_setPacketSource(long jarg1, ArNetPacket jarg1_, int jarg2);
  public final static native void ArNetPacket_setArbitraryString(long jarg1, ArNetPacket jarg1_, String jarg2);
  public final static native String ArNetPacket_getArbitraryString(long jarg1, ArNetPacket jarg1_);
  public final static native long new_ArServerBase__SWIG_0(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5, boolean jarg6, boolean jarg7, boolean jarg8, boolean jarg9, boolean jarg10, int jarg11, int jarg12);
  public final static native long new_ArServerBase__SWIG_1(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5, boolean jarg6, boolean jarg7, boolean jarg8, boolean jarg9, boolean jarg10, int jarg11);
  public final static native long new_ArServerBase__SWIG_2(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5, boolean jarg6, boolean jarg7, boolean jarg8, boolean jarg9, boolean jarg10);
  public final static native long new_ArServerBase__SWIG_3(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5, boolean jarg6, boolean jarg7, boolean jarg8, boolean jarg9);
  public final static native long new_ArServerBase__SWIG_4(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5, boolean jarg6, boolean jarg7, boolean jarg8);
  public final static native long new_ArServerBase__SWIG_5(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5, boolean jarg6, boolean jarg7);
  public final static native long new_ArServerBase__SWIG_6(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5, boolean jarg6);
  public final static native long new_ArServerBase__SWIG_7(boolean jarg1, String jarg2, boolean jarg3, String jarg4, String jarg5);
  public final static native long new_ArServerBase__SWIG_8(boolean jarg1, String jarg2, boolean jarg3, String jarg4);
  public final static native long new_ArServerBase__SWIG_9(boolean jarg1, String jarg2, boolean jarg3);
  public final static native long new_ArServerBase__SWIG_10(boolean jarg1, String jarg2);
  public final static native long new_ArServerBase__SWIG_11(boolean jarg1);
  public final static native long new_ArServerBase__SWIG_12();
  public final static native void delete_ArServerBase(long jarg1);
  public final static native boolean ArServerBase_open__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, String jarg3, boolean jarg4);
  public final static native boolean ArServerBase_open__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, String jarg3);
  public final static native boolean ArServerBase_open__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2);
  public final static native void ArServerBase_close(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_loopOnce(long jarg1, ArServerBase jarg1_);
  public final static native boolean ArServerBase_addData__SWIG_0(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7, String jarg8);
  public final static native boolean ArServerBase_addData__SWIG_1(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7);
  public final static native boolean ArServerBase_addData__SWIG_2(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6);
  public final static native boolean ArServerBase_loadUserInfo__SWIG_0(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3);
  public final static native boolean ArServerBase_loadUserInfo__SWIG_1(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void ArServerBase_logUserInfo(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_logCommandGroups(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_logCommandGroupsToFile(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void ArServerBase_setGroupDescription(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3);
  public final static native void ArServerBase_logGroupDescriptions(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_logGroupDescriptionsToFile(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void ArServerBase_setServerKey(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void ArServerBase_rejectSinceUsingCentralServer(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void ArServerBase_enforceProtocolVersion(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void ArServerBase_enforceType(long jarg1, ArServerBase jarg1_, int jarg2);
  public final static native void ArServerBase_setBackupTimeout(long jarg1, ArServerBase jarg1_, double jarg2);
  public final static native void ArServerBase_run(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_runAsync(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_logConnections__SWIG_0(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void ArServerBase_logConnections__SWIG_1(long jarg1, ArServerBase jarg1_);
  public final static native int ArServerBase_getNumClients(long jarg1, ArServerBase jarg1_);
  public final static native long ArServerBase_findCommandFromName(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native boolean ArServerBase_broadcastPacketTcp(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3);
  public final static native boolean ArServerBase_broadcastPacketTcpToMatching__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClientIdentifier jarg4_, boolean jarg5);
  public final static native boolean ArServerBase_broadcastPacketTcpToMatching__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClientIdentifier jarg4_);
  public final static native boolean ArServerBase_broadcastPacketTcpWithExclusion__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_, boolean jarg7);
  public final static native boolean ArServerBase_broadcastPacketTcpWithExclusion__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_);
  public final static native boolean ArServerBase_broadcastPacketTcpWithExclusion__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5);
  public final static native boolean ArServerBase_broadcastPacketTcpWithExclusion__SWIG_3(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_);
  public final static native boolean ArServerBase_broadcastPacketUdp(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3);
  public final static native boolean ArServerBase_broadcastPacketUdpWithExclusion__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_, boolean jarg7);
  public final static native boolean ArServerBase_broadcastPacketUdpWithExclusion__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_);
  public final static native boolean ArServerBase_broadcastPacketUdpWithExclusion__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5);
  public final static native boolean ArServerBase_broadcastPacketUdpWithExclusion__SWIG_3(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClient jarg4_);
  public final static native boolean ArServerBase_broadcastPacketUdpToMatching(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3, long jarg4, ArServerClientIdentifier jarg4_, boolean jarg5);
  public final static native void ArServerBase_sleepAfterSend(long jarg1, ArServerBase jarg1_, int jarg2);
  public final static native boolean ArServerBase_idleProcessingPending(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_processPacket(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3);
  public final static native boolean ArServerBase_sendUdp(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3);
  public final static native void ArServerBase_logTracking__SWIG_0(long jarg1, ArServerBase jarg1_, boolean jarg2);
  public final static native void ArServerBase_logTracking__SWIG_1(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_resetTracking(long jarg1, ArServerBase jarg1_);
  public final static native long ArServerBase_runThread(long jarg1, ArServerBase jarg1_, long jarg2);
  public final static native long ArServerBase_getTcpPort(long jarg1, ArServerBase jarg1_);
  public final static native long ArServerBase_getUdpPort(long jarg1, ArServerBase jarg1_);
  public final static native String ArServerBase_getOpenOnIP(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_addCycleCallback(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerBase_remCycleCallback(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerBase_addClientRemovedCallback(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor_ServerClient jarg2_);
  public final static native void ArServerBase_remClientRemovedCallback(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor_ServerClient jarg2_);
  public final static native long ArServerBase_makeNewServerClientFromSocket(long jarg1, ArServerBase jarg1_, long jarg2, ArSocket jarg2_, boolean jarg3);
  public final static native long ArServerBase_getUserInfo(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_setUserInfo(long jarg1, ArServerBase jarg1_, long jarg2, ArServerUserInfo jarg2_);
  public final static native boolean ArServerBase_addDataAdvanced__SWIG_0(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7, String jarg8, long jarg9, long jarg10, long jarg11);
  public final static native boolean ArServerBase_addDataAdvanced__SWIG_1(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7, String jarg8, long jarg9, long jarg10);
  public final static native boolean ArServerBase_addDataAdvanced__SWIG_2(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7, String jarg8, long jarg9);
  public final static native boolean ArServerBase_addDataAdvanced__SWIG_3(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7, String jarg8);
  public final static native boolean ArServerBase_addDataAdvanced__SWIG_4(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7);
  public final static native boolean ArServerBase_addDataAdvanced__SWIG_5(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6);
  public final static native void ArServerBase_setAdditionalDataFlags(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native int ArServerBase_getFrequency__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, boolean jarg3);
  public final static native int ArServerBase_getFrequency__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2);
  public final static native boolean ArServerBase_broadcastPacketTcpByCommand(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3);
  public final static native boolean ArServerBase_broadcastPacketTcpByCommandWithExclusion__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_, boolean jarg7);
  public final static native boolean ArServerBase_broadcastPacketTcpByCommandWithExclusion__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_);
  public final static native boolean ArServerBase_broadcastPacketTcpByCommandWithExclusion__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5);
  public final static native boolean ArServerBase_broadcastPacketTcpByCommandWithExclusion__SWIG_3(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_);
  public final static native boolean ArServerBase_broadcastPacketUdpByCommand(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3);
  public final static native boolean ArServerBase_broadcastPacketUdpByCommandWithExclusion__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_, boolean jarg7);
  public final static native boolean ArServerBase_broadcastPacketUdpByCommandWithExclusion__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5, long jarg6, ArServerClientIdentifier jarg6_);
  public final static native boolean ArServerBase_broadcastPacketUdpByCommandWithExclusion__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_, boolean jarg5);
  public final static native boolean ArServerBase_broadcastPacketUdpByCommandWithExclusion__SWIG_3(long jarg1, ArServerBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, long jarg4, ArServerClient jarg4_);
  public final static native void ArServerBase_closeConnectionID(long jarg1, ArServerBase jarg1_, long jarg2);
  public final static native boolean ArServerBase_dataHasFlag(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3);
  public final static native boolean ArServerBase_dataHasFlagByCommand(long jarg1, ArServerBase jarg1_, long jarg2, String jarg3);
  public final static native void ArServerBase_setDebugLogging__SWIG_0(long jarg1, ArServerBase jarg1_, boolean jarg2);
  public final static native void ArServerBase_setDebugLogging__SWIG_1(long jarg1, ArServerBase jarg1_);
  public final static native boolean ArServerBase_getDebugLogging(long jarg1, ArServerBase jarg1_);
  public final static native int ArServerBase_getMostClients(long jarg1, ArServerBase jarg1_);
  public final static native boolean ArServerBase_allowingIdlePackets(long jarg1, ArServerBase jarg1_);
  public final static native boolean ArServerBase_addIdleSingleShotCallback(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native boolean ArServerBase_hasSlowPackets(long jarg1, ArServerBase jarg1_);
  public final static native boolean ArServerBase_hasIdlePackets(long jarg1, ArServerBase jarg1_);
  public final static native boolean ArServerBase_hasIdleCallbacks(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_internalSetNumClients(long jarg1, ArServerBase jarg1_, int jarg2);
  public final static native void ArServerBase_addTooManyClientsCB__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor1_CString jarg2_, int jarg3);
  public final static native void ArServerBase_addTooManyClientsCB__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor1_CString jarg2_);
  public final static native void ArServerBase_remTooManyClientsCB(long jarg1, ArServerBase jarg1_, long jarg2, ArFunctor1_CString jarg2_);
  public final static native boolean ArServerBase_internalSetDefaultFrequency(long jarg1, ArServerBase jarg1_, String jarg2, int jarg3);
  public final static native void ArServerBase_internalLockup(long jarg1, ArServerBase jarg1_);
  public final static native void ArServerBase_remData(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void delete_ArServerMode(long jarg1);
  public final static native long ArServerMode_getActionGroup(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_activate(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_deactivate(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_activationDenied(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_userTask(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_requestUnlock(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_forceUnlock(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_lockMode__SWIG_0(long jarg1, ArServerMode jarg1_, boolean jarg2);
  public final static native void ArServerMode_lockMode__SWIG_1(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_unlockMode(long jarg1, ArServerMode jarg1_);
  public final static native String ArServerMode_getMode(long jarg1, ArServerMode jarg1_);
  public final static native String ArServerMode_getStatus(long jarg1, ArServerMode jarg1_);
  public final static native String ArServerMode_getExtendedStatus(long jarg1, ArServerMode jarg1_);
  public final static native String ArServerMode_getActiveModeModeString();
  public final static native String ArServerMode_getActiveModeStatusString();
  public final static native String ArServerMode_getActiveModeExtendedStatusString();
  public final static native String ArServerMode_getName(long jarg1, ArServerMode jarg1_);
  public final static native boolean ArServerMode_isActive(long jarg1, ArServerMode jarg1_);
  public final static native boolean ArServerMode_isLocked();
  public final static native boolean ArServerMode_willUnlockIfRequested();
  public final static native long ArServerMode_getActiveMode();
  public final static native boolean ArServerMode_hasSetActivityTime(long jarg1, ArServerMode jarg1_);
  public final static native long ArServerMode_getActivityTime(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_setActivityTimeToNow(long jarg1, ArServerMode jarg1_);
  public final static native int ArServerMode_getActiveModeActivityTimeSecSince();
  public final static native boolean ArServerMode_getActiveModeSetActivityThisCycle();
  public final static native void ArServerMode_addAsDefaultMode__SWIG_0(long jarg1, ArServerMode jarg1_, int jarg2);
  public final static native void ArServerMode_addAsDefaultMode__SWIG_1(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_checkDefault(long jarg1, ArServerMode jarg1_);
  public final static native void ArServerMode_setMode(long jarg1, ArServerMode jarg1_, String jarg2);
  public final static native void ArServerMode_setStatus(long jarg1, ArServerMode jarg1_, String jarg2);
  public final static native boolean ArServerMode_isAutoResumeAfterInterrupt(long jarg1, ArServerMode jarg1_);
  public final static native boolean ArServerMode_addModeData__SWIG_0(long jarg1, ArServerMode jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7, String jarg8);
  public final static native boolean ArServerMode_addModeData__SWIG_1(long jarg1, ArServerMode jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6, String jarg7);
  public final static native boolean ArServerMode_addModeData__SWIG_2(long jarg1, ArServerMode jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor_ServerData jarg4_, String jarg5, String jarg6);
  public final static native void ArServerMode_getModeDataList(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArServerMode_getModeInfo(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArServerMode_getModeBusy(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArServerMode_addActivateCallback__SWIG_0(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerMode_addActivateCallback__SWIG_1(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerMode_remActivateCallback(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerMode_addDeactivateCallback__SWIG_0(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerMode_addDeactivateCallback__SWIG_1(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerMode_remDeactivateCallback(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerMode_addSingleShotDeactivateCallback__SWIG_0(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerMode_addSingleShotDeactivateCallback__SWIG_1(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerMode_remSingleShotDeactivateCallback(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerMode_addSingleShotPostDeactivateCallback__SWIG_0(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerMode_addSingleShotPostDeactivateCallback__SWIG_1(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerMode_remSingleShotPostDeactivateCallback(long jarg1, ArServerMode jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native long ArServerMode_getIdleMode();
  public final static native long new_ArClientArg__SWIG_0(boolean jarg1, int jarg2, int jarg3, boolean jarg4);
  public final static native long new_ArClientArg__SWIG_1(boolean jarg1, int jarg2, int jarg3);
  public final static native long new_ArClientArg__SWIG_2(boolean jarg1, int jarg2);
  public final static native long new_ArClientArg__SWIG_3(boolean jarg1);
  public final static native long new_ArClientArg__SWIG_4();
  public final static native void delete_ArClientArg(long jarg1);
  public final static native boolean ArClientArg_isSendableParamType__SWIG_0(long jarg1, ArConfigArg jarg1_, boolean jarg2);
  public final static native boolean ArClientArg_isSendableParamType__SWIG_1(long jarg1, ArConfigArg jarg1_);
  public final static native boolean ArClientArg_createArg__SWIG_0(long jarg1, ArClientArg jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, ArConfigArg jarg3_, long jarg4);
  public final static native boolean ArClientArg_createArg__SWIG_1(long jarg1, ArClientArg jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, ArConfigArg jarg3_);
  public final static native boolean ArClientArg_createPacket__SWIG_0(long jarg1, ArClientArg jarg1_, long jarg2, ArConfigArg jarg2_, long jarg3, ArNetPacket jarg3_, String jarg4);
  public final static native boolean ArClientArg_createPacket__SWIG_1(long jarg1, ArClientArg jarg1_, long jarg2, ArConfigArg jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientArg_bufToArgValue(long jarg1, ArClientArg jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3, ArConfigArg jarg3_);
  public final static native boolean ArClientArg_argValueToBuf(long jarg1, ArClientArg jarg1_, long jarg2, ArConfigArg jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientArg_argTextToBuf(long jarg1, ArClientArg jarg1_, long jarg2, ArConfigArg jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientArg_addArgTextToPacket(long jarg1, ArClientArg jarg1_, long jarg2, ArConfigArg jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientArg_addAncestorListToPacket(long jarg1, ArClientArg jarg1_, long jarg2, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientArg_addListBeginToPacket(long jarg1, ArClientArg jarg1_, long jarg2, ArConfigArg jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientArg_addListEndToPacket(long jarg1, ArClientArg jarg1_, long jarg2, ArConfigArg jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native int ArClientBase_CLIENT_KEY_LENGTH_get();
  public final static native long new_ArClientBase();
  public final static native void delete_ArClientBase(long jarg1);
  public final static native void ArClientBase_setRobotName__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, boolean jarg3, int jarg4);
  public final static native void ArClientBase_setRobotName__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, boolean jarg3);
  public final static native void ArClientBase_setRobotName__SWIG_2(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native String ArClientBase_getRobotName(long jarg1, ArClientBase jarg1_);
  public final static native String ArClientBase_getLogPrefix(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_getDebugLogging(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_blockingConnect__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4, String jarg5, String jarg6, String jarg7);
  public final static native boolean ArClientBase_blockingConnect__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4, String jarg5, String jarg6);
  public final static native boolean ArClientBase_blockingConnect__SWIG_2(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4, String jarg5);
  public final static native boolean ArClientBase_blockingConnect__SWIG_3(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native boolean ArClientBase_blockingConnect__SWIG_4(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3);
  public final static native boolean ArClientBase_disconnect(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_disconnectSoon(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_isConnected(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_wasRejected(long jarg1, ArClientBase jarg1_);
  public final static native int ArClientBase_getState(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_addHandler__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, long jarg3, ArFunctor_NetPacket jarg3_, boolean jarg4);
  public final static native boolean ArClientBase_addHandler__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, long jarg3, ArFunctor_NetPacket jarg3_);
  public final static native boolean ArClientBase_remHandler(long jarg1, ArClientBase jarg1_, String jarg2, long jarg3, ArFunctor_NetPacket jarg3_);
  public final static native boolean ArClientBase_request__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, long jarg4, ArNetPacket jarg4_);
  public final static native boolean ArClientBase_request__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3);
  public final static native boolean ArClientBase_requestStop(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native boolean ArClientBase_requestOnce__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, long jarg3, ArNetPacket jarg3_, boolean jarg4);
  public final static native boolean ArClientBase_requestOnce__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientBase_requestOnce__SWIG_2(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native boolean ArClientBase_requestOnceUdp__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, long jarg3, ArNetPacket jarg3_, boolean jarg4);
  public final static native boolean ArClientBase_requestOnceUdp__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientBase_requestOnceUdp__SWIG_2(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native boolean ArClientBase_requestOnceWithString(long jarg1, ArClientBase jarg1_, String jarg2, String jarg3);
  public final static native boolean ArClientBase_requestOnceWithInt16(long jarg1, ArClientBase jarg1_, String jarg2, short jarg3);
  public final static native boolean ArClientBase_requestOnceWithInt32(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3);
  public final static native boolean ArClientBase_requestOnceWithDouble(long jarg1, ArClientBase jarg1_, String jarg2, double jarg3);
  public final static native boolean ArClientBase_dataExists(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native String ArClientBase_getHost(long jarg1, ArClientBase jarg1_);
  public final static native int ArClientBase_getPort(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_setServerKey__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, boolean jarg3);
  public final static native void ArClientBase_setServerKey__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native void ArClientBase_enforceProtocolVersion__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, boolean jarg3);
  public final static native void ArClientBase_enforceProtocolVersion__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native void ArClientBase_enforceType__SWIG_0(long jarg1, ArClientBase jarg1_, int jarg2, boolean jarg3);
  public final static native void ArClientBase_enforceType__SWIG_1(long jarg1, ArClientBase jarg1_, int jarg2);
  public final static native long ArClientBase_getLastPacketReceived(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_setBackupTimeout(long jarg1, ArClientBase jarg1_, double jarg2);
  public final static native void ArClientBase_run(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_runAsync(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_stopRunning(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_isStopped(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_logDataList(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_addCycleCallback(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientBase_remCycleCallback(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native boolean ArClientBase_sendPacketTcp(long jarg1, ArClientBase jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native boolean ArClientBase_sendPacketUdp(long jarg1, ArClientBase jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArClientBase_setConnectTimeoutTime(long jarg1, ArClientBase jarg1_, int jarg2);
  public final static native int ArClientBase_getConnectTimeoutTime(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_logTracking(long jarg1, ArClientBase jarg1_, boolean jarg2);
  public final static native void ArClientBase_resetTracking(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_addServerShutdownCB__SWIG_0(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArClientBase_addServerShutdownCB__SWIG_1(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientBase_remServerShutdownCB(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientBase_addDisconnectOnErrorCB__SWIG_0(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArClientBase_addDisconnectOnErrorCB__SWIG_1(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientBase_remDisconnectOnErrorCB(long jarg1, ArClientBase jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientBase_loopOnce(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_processPacket(long jarg1, ArClientBase jarg1_, long jarg2, ArNetPacket jarg2_, boolean jarg3);
  public final static native void ArClientBase_processPacketUdp(long jarg1, ArClientBase jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3);
  public final static native void ArClientBase_setTcpOnlyFromServer(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_setTcpOnlyToServer(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_isTcpOnlyFromServer(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_isTcpOnlyToServer(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_getClientKey(long jarg1, ArClientBase jarg1_, long jarg2);
  public final static native boolean ArClientBase_startNonBlockingDisconnect(long jarg1, ArClientBase jarg1_);
  public final static native void ArClientBase_finishNonBlockingDisconnect(long jarg1, ArClientBase jarg1_);
  public final static native String ArClientBase_getName__SWIG_0(long jarg1, ArClientBase jarg1_, long jarg2, ArNetPacket jarg2_, boolean jarg3);
  public final static native String ArClientBase_getName__SWIG_1(long jarg1, ArClientBase jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native String ArClientBase_getName__SWIG_2(long jarg1, ArClientBase jarg1_, long jarg2, boolean jarg3);
  public final static native String ArClientBase_getName__SWIG_3(long jarg1, ArClientBase jarg1_, long jarg2);
  public final static native long ArClientBase_runThread(long jarg1, ArClientBase jarg1_, long jarg2);
  public final static native long ArClientBase_getTcpAddr(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_internalBlockingConnect__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4, String jarg5, String jarg6, long jarg7, ArSocket jarg7_, String jarg8);
  public final static native boolean ArClientBase_internalBlockingConnect__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4, String jarg5, String jarg6, long jarg7, ArSocket jarg7_);
  public final static native int ArClientBase_internalNonBlockingConnectStart__SWIG_0(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4, String jarg5, String jarg6, long jarg7, ArSocket jarg7_, String jarg8);
  public final static native int ArClientBase_internalNonBlockingConnectStart__SWIG_1(long jarg1, ArClientBase jarg1_, String jarg2, int jarg3, boolean jarg4, String jarg5, String jarg6, long jarg7, ArSocket jarg7_);
  public final static native int ArClientBase_internalNonBlockingConnectContinue(long jarg1, ArClientBase jarg1_);
  public final static native long ArClientBase_getTcpSocket(long jarg1, ArClientBase jarg1_);
  public final static native long ArClientBase_getUdpSocket(long jarg1, ArClientBase jarg1_);
  public final static native long ArClientBase_getDataMap(long jarg1, ArClientBase jarg1_);
  public final static native long ArClientBase_findCommandFromName(long jarg1, ArClientBase jarg1_, String jarg2);
  public final static native boolean ArClientBase_requestByCommand__SWIG_0(long jarg1, ArClientBase jarg1_, long jarg2, int jarg3, long jarg4, ArNetPacket jarg4_);
  public final static native boolean ArClientBase_requestByCommand__SWIG_1(long jarg1, ArClientBase jarg1_, long jarg2, int jarg3);
  public final static native boolean ArClientBase_requestStopByCommand(long jarg1, ArClientBase jarg1_, long jarg2);
  public final static native boolean ArClientBase_requestOnceByCommand__SWIG_0(long jarg1, ArClientBase jarg1_, long jarg2, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientBase_requestOnceByCommand__SWIG_1(long jarg1, ArClientBase jarg1_, long jarg2);
  public final static native boolean ArClientBase_requestOnceByCommandUdp__SWIG_0(long jarg1, ArClientBase jarg1_, long jarg2, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArClientBase_requestOnceByCommandUdp__SWIG_1(long jarg1, ArClientBase jarg1_, long jarg2);
  public final static native boolean ArClientBase_getReceivedDataList(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_getReceivedArgRetList(long jarg1, ArClientBase jarg1_);
  public final static native boolean ArClientBase_getReceivedGroupAndFlagsList(long jarg1, ArClientBase jarg1_);
  public final static native int ArClientBase_getRejected(long jarg1, ArClientBase jarg1_);
  public final static native String ArClientBase_getRejectedString(long jarg1, ArClientBase jarg1_);
  public final static native int ArClientCommands_SHUTDOWN_get();
  public final static native int ArClientCommands_INTRODUCTION_get();
  public final static native int ArClientCommands_UDP_INTRODUCTION_get();
  public final static native int ArClientCommands_UDP_CONFIRMATION_get();
  public final static native int ArClientCommands_TCP_ONLY_get();
  public final static native int ArClientCommands_LIST_get();
  public final static native int ArClientCommands_REQUEST_get();
  public final static native int ArClientCommands_REQUESTSTOP_get();
  public final static native long new_ArClientCommands();
  public final static native void delete_ArClientCommands(long jarg1);
  public final static native long new_ArClientFileListerItem__SWIG_0(String jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long new_ArClientFileListerItem__SWIG_1(long jarg1, ArClientFileListerItem jarg1_);
  public final static native void delete_ArClientFileListerItem(long jarg1);
  public final static native String ArClientFileListerItem_getName(long jarg1, ArClientFileListerItem jarg1_);
  public final static native long ArClientFileListerItem_getLastAccessedTime(long jarg1, ArClientFileListerItem jarg1_);
  public final static native long ArClientFileListerItem_getLastModifiedTime(long jarg1, ArClientFileListerItem jarg1_);
  public final static native long ArClientFileListerItem_getSize(long jarg1, ArClientFileListerItem jarg1_);
  public final static native long new_ArClientFileLister(long jarg1, ArClientBase jarg1_);
  public final static native void delete_ArClientFileLister(long jarg1);
  public final static native boolean ArClientFileLister_isAvailable(long jarg1, ArClientFileLister jarg1_);
  public final static native void ArClientFileLister_changeToTopDir(long jarg1, ArClientFileLister jarg1_);
  public final static native void ArClientFileLister_changeToDir(long jarg1, ArClientFileLister jarg1_, String jarg2);
  public final static native void ArClientFileLister_upOneDir(long jarg1, ArClientFileLister jarg1_);
  public final static native void ArClientFileLister_changeToAbsDir(long jarg1, ArClientFileLister jarg1_, String jarg2);
  public final static native String ArClientFileLister_getCurrentDir(long jarg1, ArClientFileLister jarg1_);
  public final static native String ArClientFileLister_getWaitingForDir(long jarg1, ArClientFileLister jarg1_);
  public final static native long ArClientFileLister_getDirectories(long jarg1, ArClientFileLister jarg1_);
  public final static native long ArClientFileLister_getFiles(long jarg1, ArClientFileLister jarg1_);
  public final static native void ArClientFileLister_addUpdatedCallback__SWIG_0(long jarg1, ArClientFileLister jarg1_, long jarg2, ArFunctor1_Int jarg2_, int jarg3);
  public final static native void ArClientFileLister_addUpdatedCallback__SWIG_1(long jarg1, ArClientFileLister jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native void ArClientFileLister_remUpdatedCallback(long jarg1, ArClientFileLister jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native long ArClientFileLister_getLastUpdated(long jarg1, ArClientFileLister jarg1_);
  public final static native long ArClientFileLister_getLastRequested(long jarg1, ArClientFileLister jarg1_);
  public final static native void ArClientFileLister_log(long jarg1, ArClientFileLister jarg1_, boolean jarg2);
  public final static native long new_ArClientFileToClient(long jarg1, ArClientBase jarg1_);
  public final static native void delete_ArClientFileToClient(long jarg1);
  public final static native boolean ArClientFileToClient_isAvailable(long jarg1, ArClientFileToClient jarg1_);
  public final static native boolean ArClientFileToClient_isAvailableSetTimestamp(long jarg1, ArClientFileToClient jarg1_);
  public final static native boolean ArClientFileToClient_getFileFromDirectory__SWIG_0(long jarg1, ArClientFileToClient jarg1_, String jarg2, String jarg3, String jarg4, boolean jarg5);
  public final static native boolean ArClientFileToClient_getFileFromDirectory__SWIG_1(long jarg1, ArClientFileToClient jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void ArClientFileToClient_cancelGet(long jarg1, ArClientFileToClient jarg1_);
  public final static native boolean ArClientFileToClient_isWaitingForFile(long jarg1, ArClientFileToClient jarg1_);
  public final static native String ArClientFileToClient_getDirectory(long jarg1, ArClientFileToClient jarg1_);
  public final static native String ArClientFileToClient_getFileName(long jarg1, ArClientFileToClient jarg1_);
  public final static native String ArClientFileToClient_getClientFileName(long jarg1, ArClientFileToClient jarg1_);
  public final static native void ArClientFileToClient_addFileReceivedCallback__SWIG_0(long jarg1, ArClientFileToClient jarg1_, long jarg2, ArFunctor1_Int jarg2_, int jarg3);
  public final static native void ArClientFileToClient_addFileReceivedCallback__SWIG_1(long jarg1, ArClientFileToClient jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native void ArClientFileToClient_remFileReceivedCallback(long jarg1, ArClientFileToClient jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native long ArClientFileToClient_getLastReceived(long jarg1, ArClientFileToClient jarg1_);
  public final static native long ArClientFileToClient_getLastRequested(long jarg1, ArClientFileToClient jarg1_);
  public final static native long new_ArClientFileFromClient(long jarg1, ArClientBase jarg1_);
  public final static native void delete_ArClientFileFromClient(long jarg1);
  public final static native boolean ArClientFileFromClient_isAvailable(long jarg1, ArClientFileFromClient jarg1_);
  public final static native boolean ArClientFileFromClient_isAvailableSlow(long jarg1, ArClientFileFromClient jarg1_);
  public final static native boolean ArClientFileFromClient_isAvailableFast(long jarg1, ArClientFileFromClient jarg1_);
  public final static native boolean ArClientFileFromClient_isAvailableSetTimestamp(long jarg1, ArClientFileFromClient jarg1_);
  public final static native boolean ArClientFileFromClient_putFileToDirectory__SWIG_0(long jarg1, ArClientFileFromClient jarg1_, String jarg2, String jarg3, String jarg4, int jarg5, boolean jarg6);
  public final static native boolean ArClientFileFromClient_putFileToDirectory__SWIG_1(long jarg1, ArClientFileFromClient jarg1_, String jarg2, String jarg3, String jarg4, int jarg5);
  public final static native boolean ArClientFileFromClient_putFileToDirectory__SWIG_2(long jarg1, ArClientFileFromClient jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void ArClientFileFromClient_cancelPut(long jarg1, ArClientFileFromClient jarg1_);
  public final static native boolean ArClientFileFromClient_isWaitingForReturn(long jarg1, ArClientFileFromClient jarg1_);
  public final static native String ArClientFileFromClient_getDirectory(long jarg1, ArClientFileFromClient jarg1_);
  public final static native String ArClientFileFromClient_getFileName(long jarg1, ArClientFileFromClient jarg1_);
  public final static native String ArClientFileFromClient_getClientFileName(long jarg1, ArClientFileFromClient jarg1_);
  public final static native void ArClientFileFromClient_addFileSentCallback__SWIG_0(long jarg1, ArClientFileFromClient jarg1_, long jarg2, ArFunctor1_Int jarg2_, int jarg3);
  public final static native void ArClientFileFromClient_addFileSentCallback__SWIG_1(long jarg1, ArClientFileFromClient jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native void ArClientFileFromClient_remFileSentCallback(long jarg1, ArClientFileFromClient jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native long ArClientFileFromClient_getLastCompletedSend(long jarg1, ArClientFileFromClient jarg1_);
  public final static native long ArClientFileFromClient_getLastStartedSend(long jarg1, ArClientFileFromClient jarg1_);
  public final static native long new_ArClientDeleteFileOnServer(long jarg1, ArClientBase jarg1_);
  public final static native void delete_ArClientDeleteFileOnServer(long jarg1);
  public final static native boolean ArClientDeleteFileOnServer_isAvailable(long jarg1, ArClientDeleteFileOnServer jarg1_);
  public final static native boolean ArClientDeleteFileOnServer_deleteFileFromDirectory(long jarg1, ArClientDeleteFileOnServer jarg1_, String jarg2, String jarg3);
  public final static native boolean ArClientDeleteFileOnServer_isWaitingForReturn(long jarg1, ArClientDeleteFileOnServer jarg1_);
  public final static native String ArClientDeleteFileOnServer_getDirectory(long jarg1, ArClientDeleteFileOnServer jarg1_);
  public final static native String ArClientDeleteFileOnServer_getFileName(long jarg1, ArClientDeleteFileOnServer jarg1_);
  public final static native void ArClientDeleteFileOnServer_addFileDeletedCallback__SWIG_0(long jarg1, ArClientDeleteFileOnServer jarg1_, long jarg2, ArFunctor1_Int jarg2_, int jarg3);
  public final static native void ArClientDeleteFileOnServer_addFileDeletedCallback__SWIG_1(long jarg1, ArClientDeleteFileOnServer jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native void ArClientDeleteFileOnServer_remFileDeletedCallback(long jarg1, ArClientDeleteFileOnServer jarg1_, long jarg2, ArFunctor1_Int jarg2_);
  public final static native long ArClientDeleteFileOnServer_getLastCompletedSend(long jarg1, ArClientDeleteFileOnServer jarg1_);
  public final static native long ArClientDeleteFileOnServer_getLastStartedSend(long jarg1, ArClientDeleteFileOnServer jarg1_);
  public final static native long new_ArClientHandlerConfig__SWIG_0(long jarg1, ArClientBase jarg1_, boolean jarg2, String jarg3, String jarg4);
  public final static native long new_ArClientHandlerConfig__SWIG_1(long jarg1, ArClientBase jarg1_, boolean jarg2, String jarg3);
  public final static native long new_ArClientHandlerConfig__SWIG_2(long jarg1, ArClientBase jarg1_, boolean jarg2);
  public final static native long new_ArClientHandlerConfig__SWIG_3(long jarg1, ArClientBase jarg1_);
  public final static native void delete_ArClientHandlerConfig(long jarg1);
  public final static native void ArClientHandlerConfig_requestConfigFromServer(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native void ArClientHandlerConfig_reloadConfigOnServer(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native long ArClientHandlerConfig_getConfigCopy(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native void ArClientHandlerConfig_addGotConfigCB__SWIG_0(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArClientHandlerConfig_addGotConfigCB__SWIG_1(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientHandlerConfig_remGotConfigCB(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientHandlerConfig_addSaveConfigSucceededCB__SWIG_0(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArClientHandlerConfig_addSaveConfigSucceededCB__SWIG_1(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientHandlerConfig_remSaveConfigSucceededCB(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientHandlerConfig_addSaveConfigFailedCB__SWIG_0(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor1_CString jarg2_, int jarg3);
  public final static native void ArClientHandlerConfig_addSaveConfigFailedCB__SWIG_1(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor1_CString jarg2_);
  public final static native void ArClientHandlerConfig_remSaveConfigFailedCB(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor1_CString jarg2_);
  public final static native boolean ArClientHandlerConfig_haveGottenConfig(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native void ArClientHandlerConfig_saveConfigToServer__SWIG_0(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native void ArClientHandlerConfig_saveConfigToServer__SWIG_1(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArConfig jarg2_, long jarg3);
  public final static native void ArClientHandlerConfig_saveConfigToServer__SWIG_2(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArConfig jarg2_);
  public final static native boolean ArClientHandlerConfig_haveRequestedDefaults(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native boolean ArClientHandlerConfig_haveGottenDefaults(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native boolean ArClientHandlerConfig_canRequestDefaults(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native boolean ArClientHandlerConfig_requestDefaultConfigFromServer(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native long ArClientHandlerConfig_getDefaultConfig(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native boolean ArClientHandlerConfig_requestConfigDefaults(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native boolean ArClientHandlerConfig_requestSectionDefaults(long jarg1, ArClientHandlerConfig jarg1_, String jarg2);
  public final static native void ArClientHandlerConfig_addGotConfigDefaultsCB__SWIG_0(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArClientHandlerConfig_addGotConfigDefaultsCB__SWIG_1(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientHandlerConfig_remGotConfigDefaultsCB(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native boolean ArClientHandlerConfig_isLastEditablePriorityAvailable(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native boolean ArClientHandlerConfig_requestLastEditablePriorityFromServer(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native boolean ArClientHandlerConfig_haveGottenLastEditablePriority(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native int ArClientHandlerConfig_getLastEditablePriority(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native void ArClientHandlerConfig_addGotLastEditablePriorityCB__SWIG_0(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArClientHandlerConfig_addGotLastEditablePriorityCB__SWIG_1(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArClientHandlerConfig_remGotLastEditablePriorityCB(long jarg1, ArClientHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native long ArClientHandlerConfig_getConfig(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native int ArClientHandlerConfig_lock(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native int ArClientHandlerConfig_tryLock(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native int ArClientHandlerConfig_unlock(long jarg1, ArClientHandlerConfig jarg1_);
  public final static native void ArClientHandlerConfig_setQuiet(long jarg1, ArClientHandlerConfig jarg1_, boolean jarg2);
  public final static native long new_ArClientSimpleConnector__SWIG_0(long jarg1, ArArgumentParser jarg1_);
  public final static native long new_ArClientSimpleConnector__SWIG_1(java.lang.String[] jarg1);
  public final static native long new_ArClientSimpleConnector__SWIG_2(long jarg1, ArArgumentBuilder jarg1_);
  public final static native void delete_ArClientSimpleConnector(long jarg1);
  public final static native boolean ArClientSimpleConnector_connectClient__SWIG_0(long jarg1, ArClientSimpleConnector jarg1_, long jarg2, ArClientBase jarg2_, boolean jarg3);
  public final static native boolean ArClientSimpleConnector_connectClient__SWIG_1(long jarg1, ArClientSimpleConnector jarg1_, long jarg2, ArClientBase jarg2_);
  public final static native boolean ArClientSimpleConnector_parseArgs__SWIG_0(long jarg1, ArClientSimpleConnector jarg1_);
  public final static native boolean ArClientSimpleConnector_parseArgs__SWIG_1(long jarg1, ArClientSimpleConnector jarg1_, long jarg2, ArArgumentParser jarg2_);
  public final static native void ArClientSimpleConnector_logOptions(long jarg1, ArClientSimpleConnector jarg1_);
  public final static native long new_ArHybridForwarderVideo__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArClientBase jarg2_);
  public final static native long new_ArHybridForwarderVideo__SWIG_1(long jarg1, ArServerBase jarg1_, String jarg2, int jarg3);
  public final static native long new_ArHybridForwarderVideo__SWIG_2(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native long new_ArHybridForwarderVideo__SWIG_3(long jarg1, ArServerBase jarg1_);
  public final static native void delete_ArHybridForwarderVideo(long jarg1);
  public final static native boolean ArHybridForwarderVideo_isForwardingVideo(long jarg1, ArHybridForwarderVideo jarg1_);
  public final static native String ArHybridForwarderVideo_getCameraName(long jarg1, ArHybridForwarderVideo jarg1_);
  public final static native void ArHybridForwarderVideo_setCameraName(long jarg1, ArHybridForwarderVideo jarg1_, String jarg2);
  public final static native void ArHybridForwarderVideo_addToCameraCollection(long jarg1, ArHybridForwarderVideo jarg1_, long jarg2, ArCameraCollection jarg2_);
  public final static native void ArHybridForwarderVideo_sendVideoSize(long jarg1, ArHybridForwarderVideo jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArHybridForwarderVideo_sendVideo(long jarg1, ArHybridForwarderVideo jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArHybridForwarderVideo_receiveVideoSize(long jarg1, ArHybridForwarderVideo jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArHybridForwarderVideo_receiveVideo(long jarg1, ArHybridForwarderVideo jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArHybridForwarderVideo_clientCycleCallback(long jarg1, ArHybridForwarderVideo jarg1_);
  public final static native void ArHybridForwarderVideo_setVideoRequestTime__SWIG_0(long jarg1, ArHybridForwarderVideo jarg1_, int jarg2);
  public final static native int ArHybridForwarderVideo_setVideoRequestTime__SWIG_1(long jarg1, ArHybridForwarderVideo jarg1_);
  public final static native long new_ArNetPacketReceiverTcp();
  public final static native void delete_ArNetPacketReceiverTcp(long jarg1);
  public final static native void ArNetPacketReceiverTcp_setSocket(long jarg1, ArNetPacketReceiverTcp jarg1_, long jarg2, ArSocket jarg2_);
  public final static native long ArNetPacketReceiverTcp_getSocket(long jarg1, ArNetPacketReceiverTcp jarg1_);
  public final static native void ArNetPacketReceiverTcp_setProcessPacketCB(long jarg1, ArNetPacketReceiverTcp jarg1_, long jarg2, ArFunctor_NetPacket jarg2_);
  public final static native long ArNetPacketReceiverTcp_getProcessPacketCB(long jarg1, ArNetPacketReceiverTcp jarg1_);
  public final static native void ArNetPacketReceiverTcp_setLoggingPrefix(long jarg1, ArNetPacketReceiverTcp jarg1_, String jarg2);
  public final static native boolean ArNetPacketReceiverTcp_readData(long jarg1, ArNetPacketReceiverTcp jarg1_);
  public final static native void ArNetPacketReceiverTcp_setQuiet(long jarg1, ArNetPacketReceiverTcp jarg1_, boolean jarg2);
  public final static native boolean ArNetPacketReceiverTcp_getQuiet(long jarg1, ArNetPacketReceiverTcp jarg1_);
  public final static native long new_ArNetPacketReceiverUdp();
  public final static native void delete_ArNetPacketReceiverUdp(long jarg1);
  public final static native void ArNetPacketReceiverUdp_setSocket(long jarg1, ArNetPacketReceiverUdp jarg1_, long jarg2, ArSocket jarg2_);
  public final static native long ArNetPacketReceiverUdp_getSocket(long jarg1, ArNetPacketReceiverUdp jarg1_);
  public final static native void ArNetPacketReceiverUdp_setProcessPacketCB(long jarg1, ArNetPacketReceiverUdp jarg1_, long jarg2);
  public final static native long ArNetPacketReceiverUdp_getProcessPacketCB(long jarg1, ArNetPacketReceiverUdp jarg1_);
  public final static native boolean ArNetPacketReceiverUdp_readData(long jarg1, ArNetPacketReceiverUdp jarg1_);
  public final static native long new_ArNetPacketSenderTcp();
  public final static native void delete_ArNetPacketSenderTcp(long jarg1);
  public final static native void ArNetPacketSenderTcp_setSocket(long jarg1, ArNetPacketSenderTcp jarg1_, long jarg2, ArSocket jarg2_);
  public final static native long ArNetPacketSenderTcp_getSocket(long jarg1, ArNetPacketSenderTcp jarg1_);
  public final static native void ArNetPacketSenderTcp_setBackupTimeout(long jarg1, ArNetPacketSenderTcp jarg1_, double jarg2);
  public final static native void ArNetPacketSenderTcp_setDebugLogging(long jarg1, ArNetPacketSenderTcp jarg1_, boolean jarg2);
  public final static native void ArNetPacketSenderTcp_setLoggingPrefix(long jarg1, ArNetPacketSenderTcp jarg1_, String jarg2);
  public final static native void ArNetPacketSenderTcp_sendPacket__SWIG_0(long jarg1, ArNetPacketSenderTcp jarg1_, long jarg2, ArNetPacket jarg2_, String jarg3);
  public final static native void ArNetPacketSenderTcp_sendPacket__SWIG_1(long jarg1, ArNetPacketSenderTcp jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native boolean ArNetPacketSenderTcp_sendData(long jarg1, ArNetPacketSenderTcp jarg1_);
  public final static native long new_ArServerClient__SWIG_0(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11, boolean jarg12, String jarg13, boolean jarg14, boolean jarg15, boolean jarg16, String jarg17, int jarg18);
  public final static native long new_ArServerClient__SWIG_1(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11, boolean jarg12, String jarg13, boolean jarg14, boolean jarg15, boolean jarg16, String jarg17);
  public final static native long new_ArServerClient__SWIG_2(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11, boolean jarg12, String jarg13, boolean jarg14, boolean jarg15, boolean jarg16);
  public final static native long new_ArServerClient__SWIG_3(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11, boolean jarg12, String jarg13, boolean jarg14, boolean jarg15);
  public final static native long new_ArServerClient__SWIG_4(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11, boolean jarg12, String jarg13, boolean jarg14);
  public final static native long new_ArServerClient__SWIG_5(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11, boolean jarg12, String jarg13);
  public final static native long new_ArServerClient__SWIG_6(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11, boolean jarg12);
  public final static native long new_ArServerClient__SWIG_7(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10, String jarg11);
  public final static native long new_ArServerClient__SWIG_8(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_, int jarg10);
  public final static native long new_ArServerClient__SWIG_9(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8, long jarg9, ArServerUserInfo jarg9_);
  public final static native long new_ArServerClient__SWIG_10(long jarg1, ArSocket jarg1_, long jarg2, int jarg3, int jarg4, long jarg5, long jarg6, String jarg7, String jarg8);
  public final static native void delete_ArServerClient(long jarg1);
  public final static native boolean ArServerClient_tcpCallback(long jarg1, ArServerClient jarg1_);
  public final static native boolean ArServerClient_slowPacketCallback(long jarg1, ArServerClient jarg1_);
  public final static native boolean ArServerClient_idlePacketCallback(long jarg1, ArServerClient jarg1_);
  public final static native void ArServerClient_setBackupTimeout(long jarg1, ArServerClient jarg1_, double jarg2);
  public final static native void ArServerClient_processPacket__SWIG_0(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_, boolean jarg3);
  public final static native void ArServerClient_processPacket__SWIG_1(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native boolean ArServerClient_sendPacketTcp(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native boolean ArServerClient_sendPacketUdp(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native boolean ArServerClient_hasGroupAccess(long jarg1, ArServerClient jarg1_, String jarg2);
  public final static native void ArServerClient_broadcastPacketTcp(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArServerClient_broadcastPacketUdp(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArServerClient_logTracking(long jarg1, ArServerClient jarg1_, boolean jarg2);
  public final static native void ArServerClient_resetTracking(long jarg1, ArServerClient jarg1_);
  public final static native String ArServerClient_getIPString(long jarg1, ArServerClient jarg1_);
  public final static native long ArServerClient_getIdentifier(long jarg1, ArServerClient jarg1_);
  public final static native void ArServerClient_setIdentifier(long jarg1, ArServerClient jarg1_, long jarg2, ArServerClientIdentifier jarg2_);
  public final static native void ArServerClient_shutdown(long jarg1, ArServerClient jarg1_);
  public final static native void ArServerClient_setUdpAddress(long jarg1, ArServerClient jarg1_, long jarg2);
  public final static native long ArServerClient_getUdpAddress(long jarg1, ArServerClient jarg1_);
  public final static native int ArServerClient_getAuthKey(long jarg1, ArServerClient jarg1_);
  public final static native void ArServerClient_processAuthPacket(long jarg1, ArServerClient jarg1_, long jarg2, ArNetPacket jarg2_, long jarg3);
  public final static native void ArServerClient_handleRequests(long jarg1, ArServerClient jarg1_);
  public final static native long ArServerClient_getTcpSocket(long jarg1, ArServerClient jarg1_);
  public final static native void ArServerClient_forceDisconnect(long jarg1, ArServerClient jarg1_, boolean jarg2);
  public final static native int ArServerClient_getFrequency(long jarg1, ArServerClient jarg1_, int jarg2);
  public final static native void ArServerClient_useTcpOnly(long jarg1, ArServerClient jarg1_);
  public final static native boolean ArServerClient_isTcpOnly(long jarg1, ArServerClient jarg1_);
  public final static native int ArServerClient_getState(long jarg1, ArServerClient jarg1_);
  public final static native boolean ArServerClient_hasSlowPackets(long jarg1, ArServerClient jarg1_);
  public final static native boolean ArServerClient_hasIdlePackets(long jarg1, ArServerClient jarg1_);
  public final static native void ArServerClient_startRequestTransaction(long jarg1, ArServerClient jarg1_);
  public final static native boolean ArServerClient_endRequestTransaction(long jarg1, ArServerClient jarg1_);
  public final static native int ArServerClient_getRequestTransactionCount(long jarg1, ArServerClient jarg1_);
  public final static native long ArServerClient_findCommandFromName(long jarg1, ArServerClient jarg1_, String jarg2);
  public final static native long ArServerClient_getCreationTime(long jarg1, ArServerClient jarg1_);
  public final static native String ArServerClient_findCommandName(long jarg1, ArServerClient jarg1_, long jarg2);
  public final static native long new_ArServerClientIdentifier();
  public final static native void delete_ArServerClientIdentifier(long jarg1);
  public final static native String ArServerClientIdentifier_getIDString(long jarg1, ArServerClientIdentifier jarg1_);
  public final static native void ArServerClientIdentifier_setConnectionID(long jarg1, ArServerClientIdentifier jarg1_, long jarg2);
  public final static native long ArServerClientIdentifier_getConnectionID(long jarg1, ArServerClientIdentifier jarg1_);
  public final static native void ArServerClientIdentifier_setSelfIdentifier(long jarg1, ArServerClientIdentifier jarg1_, String jarg2);
  public final static native String ArServerClientIdentifier_getSelfIdentifier(long jarg1, ArServerClientIdentifier jarg1_);
  public final static native void ArServerClientIdentifier_setHereGoal(long jarg1, ArServerClientIdentifier jarg1_, String jarg2);
  public final static native String ArServerClientIdentifier_getHereGoal(long jarg1, ArServerClientIdentifier jarg1_);
  public final static native boolean ArServerClientIdentifier_matches(long jarg1, ArServerClientIdentifier jarg1_, long jarg2, ArServerClientIdentifier jarg2_, boolean jarg3);
  public final static native void ArServerClientIdentifier_rebuildIDString(long jarg1, ArServerClientIdentifier jarg1_);
  public final static native long new_ArServerClientData(long jarg1, int jarg2, long jarg3, ArNetPacket jarg3_);
  public final static native void delete_ArServerClientData(long jarg1);
  public final static native long ArServerClientData_getServerData(long jarg1, ArServerClientData jarg1_);
  public final static native int ArServerClientData_getMSec(long jarg1, ArServerClientData jarg1_);
  public final static native long ArServerClientData_getPacket(long jarg1, ArServerClientData jarg1_);
  public final static native long ArServerClientData_getLastSent(long jarg1, ArServerClientData jarg1_);
  public final static native void ArServerClientData_setLastSentToNow(long jarg1, ArServerClientData jarg1_);
  public final static native void ArServerClientData_setMSec(long jarg1, ArServerClientData jarg1_, int jarg2);
  public final static native void ArServerClientData_setPacket(long jarg1, ArServerClientData jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native int ArServerCommands_SHUTDOWN_get();
  public final static native int ArServerCommands_INTRODUCTION_get();
  public final static native int ArServerCommands_UDP_INTRODUCTION_get();
  public final static native int ArServerCommands_UDP_CONFIRMATION_get();
  public final static native int ArServerCommands_CONNECTED_get();
  public final static native int ArServerCommands_REJECTED_get();
  public final static native int ArServerCommands_TCP_ONLY_get();
  public final static native int ArServerCommands_LIST_get();
  public final static native int ArServerCommands_LISTSINGLE_get();
  public final static native int ArServerCommands_LISTARGRET_get();
  public final static native int ArServerCommands_LISTARGRETSINGLE_get();
  public final static native int ArServerCommands_LISTGROUPANDFLAGS_get();
  public final static native int ArServerCommands_LISTGROUPANDFLAGSSINGLE_get();
  public final static native int ArServerCommands_TYPE_UNSPECIFIED_get();
  public final static native int ArServerCommands_TYPE_REAL_get();
  public final static native int ArServerCommands_TYPE_SIMULATED_get();
  public final static native int ArServerCommands_TYPE_NONE_get();
  public final static native String ArServerCommands_toString(int jarg1);
  public final static native long new_ArServerCommands();
  public final static native void delete_ArServerCommands(long jarg1);
  public final static native long new_ArServerFileLister__SWIG_0(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3);
  public final static native long new_ArServerFileLister__SWIG_1(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void delete_ArServerFileLister(long jarg1);
  public final static native void ArServerFileLister_getDirListing(long jarg1, ArServerFileLister jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerFileLister_getDirListingMultiplePackets(long jarg1, ArServerFileLister jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerFileLister_getDefaultUploadDownloadDir(long jarg1, ArServerFileLister jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native long new_ArServerFileToClient(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void delete_ArServerFileToClient(long jarg1);
  public final static native void ArServerFileToClient_getFile(long jarg1, ArServerFileToClient jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerFileToClient_getFileWithTimestamp(long jarg1, ArServerFileToClient jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native long new_ArServerFileFromClient(long jarg1, ArServerBase jarg1_, String jarg2, String jarg3);
  public final static native void delete_ArServerFileFromClient(long jarg1);
  public final static native void ArServerFileFromClient_putFile(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerFileFromClient_putFileInterleaved(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerFileFromClient_putFileWithTimestamp(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerFileFromClient_putFileWithTimestampInterleaved(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerFileFromClient_addPreMoveCallback__SWIG_0(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerFileFromClient_addPreMoveCallback__SWIG_1(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerFileFromClient_remPreMoveCallback(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerFileFromClient_addPostMoveCallback__SWIG_0(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerFileFromClient_addPostMoveCallback__SWIG_1(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerFileFromClient_remPostMoveCallback(long jarg1, ArServerFileFromClient jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native String ArServerFileFromClient_getMovingFileName(long jarg1, ArServerFileFromClient jarg1_);
  public final static native long new_ArServerDeleteFileOnServer(long jarg1, ArServerBase jarg1_, String jarg2);
  public final static native void delete_ArServerDeleteFileOnServer(long jarg1);
  public final static native void ArServerDeleteFileOnServer_deleteFile(long jarg1, ArServerDeleteFileOnServer jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerDeleteFileOnServer_addPreDeleteCallback__SWIG_0(long jarg1, ArServerDeleteFileOnServer jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerDeleteFileOnServer_addPreDeleteCallback__SWIG_1(long jarg1, ArServerDeleteFileOnServer jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerDeleteFileOnServer_remPreDeleteCallback(long jarg1, ArServerDeleteFileOnServer jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerDeleteFileOnServer_addPostDeleteCallback__SWIG_0(long jarg1, ArServerDeleteFileOnServer jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerDeleteFileOnServer_addPostDeleteCallback__SWIG_1(long jarg1, ArServerDeleteFileOnServer jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerDeleteFileOnServer_remPostDeleteCallback(long jarg1, ArServerDeleteFileOnServer jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native String ArServerDeleteFileOnServer_getDeletingFileName(long jarg1, ArServerDeleteFileOnServer jarg1_);
  public final static native long new_ArServerHandlerCamera__SWIG_0(String jarg1, long jarg2, ArServerBase jarg2_, long jarg3, ArRobot jarg3_, long jarg4, ArPTZ jarg4_, long jarg5, ArCameraCollection jarg5_);
  public final static native long new_ArServerHandlerCamera__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArPTZ jarg3_);
  public final static native void delete_ArServerHandlerCamera(long jarg1);
  public final static native void ArServerHandlerCamera_setCameraAbs__SWIG_0(long jarg1, ArServerHandlerCamera jarg1_, double jarg2, double jarg3, double jarg4, boolean jarg5);
  public final static native void ArServerHandlerCamera_setCameraAbs__SWIG_1(long jarg1, ArServerHandlerCamera jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void ArServerHandlerCamera_setCameraRel__SWIG_0(long jarg1, ArServerHandlerCamera jarg1_, double jarg2, double jarg3, double jarg4, boolean jarg5);
  public final static native void ArServerHandlerCamera_setCameraRel__SWIG_1(long jarg1, ArServerHandlerCamera jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void ArServerHandlerCamera_setCameraPct__SWIG_0(long jarg1, ArServerHandlerCamera jarg1_, double jarg2, double jarg3, boolean jarg4);
  public final static native void ArServerHandlerCamera_setCameraPct__SWIG_1(long jarg1, ArServerHandlerCamera jarg1_, double jarg2, double jarg3);
  public final static native void ArServerHandlerCamera_resetCamera__SWIG_0(long jarg1, ArServerHandlerCamera jarg1_, boolean jarg2);
  public final static native void ArServerHandlerCamera_resetCamera__SWIG_1(long jarg1, ArServerHandlerCamera jarg1_);
  public final static native void ArServerHandlerCamera_cameraModeLookAtGoal(long jarg1, ArServerHandlerCamera jarg1_);
  public final static native void ArServerHandlerCamera_cameraModeLookAtPoint__SWIG_0(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArPose jarg2_, boolean jarg3);
  public final static native void ArServerHandlerCamera_cameraModeLookAtPoint__SWIG_1(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArPose jarg2_);
  public final static native void ArServerHandlerCamera_cameraModeLookAtGoalSetGoal(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArPose jarg2_);
  public final static native void ArServerHandlerCamera_cameraModeLookAtGoalClearGoal(long jarg1, ArServerHandlerCamera jarg1_);
  public final static native void ArServerHandlerCamera_cameraModePosition(long jarg1, ArServerHandlerCamera jarg1_);
  public final static native String ArServerHandlerCamera_getCameraName(long jarg1, ArServerHandlerCamera jarg1_);
  public final static native void ArServerHandlerCamera_addToCameraCollection(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArCameraCollection jarg2_);
  public final static native void ArServerHandlerCamera_handleGetCameraData(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleGetCameraInfo(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleSetCameraAbs(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleSetCameraPct(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleSetCameraRel(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleGetCameraModeList(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleCameraModeUpdated(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleSetCameraMode(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_handleResetCamera(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_camera(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_cameraAbs(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_cameraPct(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_cameraUpdate(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCamera_cameraInfo(long jarg1, ArServerHandlerCamera jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native long new_ArServerHandlerCameraCollection(long jarg1, ArServerBase jarg1_, long jarg2, ArCameraCollection jarg2_);
  public final static native void delete_ArServerHandlerCameraCollection(long jarg1);
  public final static native void ArServerHandlerCameraCollection_getCameraList(long jarg1, ArServerHandlerCameraCollection jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCameraCollection_setParams(long jarg1, ArServerHandlerCameraCollection jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCameraCollection_handleCameraCollectionModified(long jarg1, ArServerHandlerCameraCollection jarg1_);
  public final static native int ArServerHandlerCommMonitor_MIN_HEARTBEAT_INTERVAL_get();
  public final static native int ArServerHandlerCommMonitor_DEFAULT_HEARTBEAT_INTERVAL_get();
  public final static native long new_ArServerHandlerCommMonitor__SWIG_0(long jarg1, ArServerBase jarg1_, int jarg2);
  public final static native long new_ArServerHandlerCommMonitor__SWIG_1(long jarg1, ArServerBase jarg1_);
  public final static native void delete_ArServerHandlerCommMonitor(long jarg1);
  public final static native void ArServerHandlerCommMonitor_handleGetHeartbeatInterval(long jarg1, ArServerHandlerCommMonitor jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCommMonitor_handleAckCommTcp(long jarg1, ArServerHandlerCommMonitor jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCommMonitor_handleAckCommUdp(long jarg1, ArServerHandlerCommMonitor jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCommMonitor_cycleCallback(long jarg1, ArServerHandlerCommMonitor jarg1_);
  public final static native long new_ArServerHandlerCommands(long jarg1, ArServerBase jarg1_);
  public final static native void delete_ArServerHandlerCommands(long jarg1);
  public final static native void ArServerHandlerCommands_setTextServer(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArNetServer jarg2_);
  public final static native boolean ArServerHandlerCommands_addCommand__SWIG_0(long jarg1, ArServerHandlerCommands jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor jarg4_, String jarg5);
  public final static native boolean ArServerHandlerCommands_addCommand__SWIG_1(long jarg1, ArServerHandlerCommands jarg1_, String jarg2, String jarg3, long jarg4, ArFunctor jarg4_);
  public final static native boolean ArServerHandlerCommands_addStringCommand__SWIG_0(long jarg1, ArServerHandlerCommands jarg1_, String jarg2, String jarg3, long jarg4, String jarg5);
  public final static native boolean ArServerHandlerCommands_addStringCommand__SWIG_1(long jarg1, ArServerHandlerCommands jarg1_, String jarg2, String jarg3, long jarg4);
  public final static native void ArServerHandlerCommands_setPrefix(long jarg1, ArServerHandlerCommands jarg1_, String jarg2);
  public final static native String ArServerHandlerCommands_getPrefix(long jarg1, ArServerHandlerCommands jarg1_);
  public final static native void ArServerHandlerCommands_netListCommands(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerCommands_netListStringCommands(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native long new_ArServerHandlerConfig__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArConfig jarg2_, String jarg3, String jarg4, boolean jarg5, String jarg6, boolean jarg7, String jarg8);
  public final static native long new_ArServerHandlerConfig__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArConfig jarg2_, String jarg3, String jarg4, boolean jarg5, String jarg6, boolean jarg7);
  public final static native long new_ArServerHandlerConfig__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2, ArConfig jarg2_, String jarg3, String jarg4, boolean jarg5, String jarg6);
  public final static native long new_ArServerHandlerConfig__SWIG_3(long jarg1, ArServerBase jarg1_, long jarg2, ArConfig jarg2_, String jarg3, String jarg4, boolean jarg5);
  public final static native long new_ArServerHandlerConfig__SWIG_4(long jarg1, ArServerBase jarg1_, long jarg2, ArConfig jarg2_, String jarg3, String jarg4);
  public final static native long new_ArServerHandlerConfig__SWIG_5(long jarg1, ArServerBase jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native long new_ArServerHandlerConfig__SWIG_6(long jarg1, ArServerBase jarg1_, long jarg2, ArConfig jarg2_);
  public final static native void delete_ArServerHandlerConfig(long jarg1);
  public final static native void ArServerHandlerConfig_reloadConfig(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getConfigBySections(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getConfigBySectionsV2(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getConfigBySectionsV3(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getConfigBySectionsV4(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getConfig(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_setConfig(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_setConfigParam(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_setConfigBySections(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_setConfigBySectionsV2(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getConfigDefaults(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getConfigSectionFlags(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_getLastEditablePriority(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerConfig_addPreWriteCallback__SWIG_0(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerConfig_addPreWriteCallback__SWIG_1(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_remPreWriteCallback(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_addPostWriteCallback__SWIG_0(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerConfig_addPostWriteCallback__SWIG_1(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_remPostWriteCallback(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_addConfigUpdatedCallback__SWIG_0(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerConfig_addConfigUpdatedCallback__SWIG_1(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_remConfigUpdatedCallback(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_restartIO(long jarg1, ArServerHandlerConfig jarg1_, String jarg2);
  public final static native void ArServerHandlerConfig_restartSoftware(long jarg1, ArServerHandlerConfig jarg1_, String jarg2);
  public final static native void ArServerHandlerConfig_restartHardware(long jarg1, ArServerHandlerConfig jarg1_, String jarg2);
  public final static native void ArServerHandlerConfig_addRestartIOCB__SWIG_0(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerConfig_addRestartIOCB__SWIG_1(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_remRestartIOCB(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerConfig_setRestartSoftwareCB(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native long ArServerHandlerConfig_getRestartSoftwareCB(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native void ArServerHandlerConfig_setRestartHardwareCB(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native long ArServerHandlerConfig_getRestartHardwareCB(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native int ArServerHandlerConfig_lockConfig(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native int ArServerHandlerConfig_tryLockConfig(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native int ArServerHandlerConfig_unlockConfig(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native boolean ArServerHandlerConfig_writeConfig(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native boolean ArServerHandlerConfig_configUpdated__SWIG_0(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArServerClient jarg2_);
  public final static native boolean ArServerHandlerConfig_configUpdated__SWIG_1(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native void ArServerHandlerConfig_setPreventChanges__SWIG_0(long jarg1, ArServerHandlerConfig jarg1_, boolean jarg2, String jarg3);
  public final static native void ArServerHandlerConfig_setPreventChanges__SWIG_1(long jarg1, ArServerHandlerConfig jarg1_, boolean jarg2);
  public final static native void ArServerHandlerConfig_setPreventChanges__SWIG_2(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native boolean ArServerHandlerConfig_loadDefaultsFromFile(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native boolean ArServerHandlerConfig_loadDefaultsFromPacket(long jarg1, ArServerHandlerConfig jarg1_, long jarg2, ArNetPacket jarg2_);
  public final static native void ArServerHandlerConfig_createEmptyConfigDefaults(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native void ArServerHandlerConfig_setAllowFactory(long jarg1, ArServerHandlerConfig jarg1_, boolean jarg2);
  public final static native boolean ArServerHandlerConfig_getAllowFactory(long jarg1, ArServerHandlerConfig jarg1_);
  public final static native int ArServerHandlerMap_LINES_get();
  public final static native int ArServerHandlerMap_POINTS_get();
  public final static native int ArServerHandlerMap_BOTH_get();
  public final static native long new_ArServerHandlerMap__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArMapInterface jarg2_, int jarg3);
  public final static native long new_ArServerHandlerMap__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArMapInterface jarg2_);
  public final static native long new_ArServerHandlerMap__SWIG_2(long jarg1, ArServerBase jarg1_);
  public final static native void delete_ArServerHandlerMap(long jarg1);
  public final static native boolean ArServerHandlerMap_loadMap(long jarg1, ArServerHandlerMap jarg1_, String jarg2);
  public final static native void ArServerHandlerMap_useMap__SWIG_0(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArMapInterface jarg2_, boolean jarg3);
  public final static native void ArServerHandlerMap_useMap__SWIG_1(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArMapInterface jarg2_);
  public final static native long ArServerHandlerMap_getMap(long jarg1, ArServerHandlerMap jarg1_);
  public final static native void ArServerHandlerMap_serverGetMapId(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMap_serverGetMapName(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMap_serverGetMap(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMap_serverGetMapBinary(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMap_serverGetMapMultiScans(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMap_serverGetMapWithMaxCategory(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMap_serverGetGoals(long jarg1, ArServerHandlerMap jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMap_setDataToSend(long jarg1, ArServerHandlerMap jarg1_, int jarg2);
  public final static native int ArServerHandlerMap_getDataToSend(long jarg1, ArServerHandlerMap jarg1_);
  public final static native long new_ArServerHandlerMapping__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_, String jarg4, String jarg5, boolean jarg6, long jarg7, ArLaser jarg7_, String jarg8, String jarg9, long jarg10);
  public final static native long new_ArServerHandlerMapping__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_, String jarg4, String jarg5, boolean jarg6, long jarg7, ArLaser jarg7_, String jarg8, String jarg9);
  public final static native long new_ArServerHandlerMapping__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_, String jarg4, String jarg5, boolean jarg6, long jarg7, ArLaser jarg7_, String jarg8);
  public final static native long new_ArServerHandlerMapping__SWIG_3(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_, String jarg4, String jarg5, boolean jarg6, long jarg7, ArLaser jarg7_);
  public final static native long new_ArServerHandlerMapping__SWIG_4(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_, String jarg4, String jarg5, boolean jarg6);
  public final static native long new_ArServerHandlerMapping__SWIG_5(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_, String jarg4, String jarg5);
  public final static native long new_ArServerHandlerMapping__SWIG_6(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_, String jarg4);
  public final static native long new_ArServerHandlerMapping__SWIG_7(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArLaser jarg3_);
  public final static native void delete_ArServerHandlerMapping(long jarg1);
  public final static native void ArServerHandlerMapping_serverMappingStart(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMapping_serverMappingEnd(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerHandlerMapping_serverMappingStatus(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native boolean ArServerHandlerMapping_isMapping(long jarg1, ArServerHandlerMapping jarg1_);
  public final static native void ArServerHandlerMapping_forceReading(long jarg1, ArServerHandlerMapping jarg1_);
  public final static native String ArServerHandlerMapping_getFileName(long jarg1, ArServerHandlerMapping jarg1_);
  public final static native String ArServerHandlerMapping_getMapName(long jarg1, ArServerHandlerMapping jarg1_);
  public final static native void ArServerHandlerMapping_addSimpleCommands(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArServerHandlerCommands jarg2_);
  public final static native void ArServerHandlerMapping_simpleLoopStart(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArArgumentBuilder jarg2_);
  public final static native void ArServerHandlerMapping_simpleLoopEnd(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArArgumentBuilder jarg2_);
  public final static native void ArServerHandlerMapping_addStringForStartOfLogs__SWIG_0(long jarg1, ArServerHandlerMapping jarg1_, String jarg2, int jarg3);
  public final static native void ArServerHandlerMapping_addStringForStartOfLogs__SWIG_1(long jarg1, ArServerHandlerMapping jarg1_, String jarg2);
  public final static native void ArServerHandlerMapping_remStringForStartOfLogs(long jarg1, ArServerHandlerMapping jarg1_, String jarg2);
  public final static native void ArServerHandlerMapping_addTagToLog(long jarg1, ArServerHandlerMapping jarg1_, String jarg2);
  public final static native void ArServerHandlerMapping_addInfoToLog(long jarg1, ArServerHandlerMapping jarg1_, String jarg2);
  public final static native boolean ArServerHandlerMapping_addLocationData(long jarg1, ArServerHandlerMapping jarg1_, String jarg2, long jarg3);
  public final static native void ArServerHandlerMapping_addMappingStartCallback__SWIG_0(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerMapping_addMappingStartCallback__SWIG_1(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_remMappingStartCallback(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_addMappingBegunCallback__SWIG_0(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerMapping_addMappingBegunCallback__SWIG_1(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_remMappingBegunCallback(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_addMappingEndCallback__SWIG_0(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerMapping_addMappingEndCallback__SWIG_1(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_remMappingEndCallback(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_addMappingEndedCallback__SWIG_0(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerMapping_addMappingEndedCallback__SWIG_1(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_remMappingEndedCallback(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_addPreMoveCallback__SWIG_0(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerMapping_addPreMoveCallback__SWIG_1(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_remPreMoveCallback(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_addPostMoveCallback__SWIG_0(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerHandlerMapping_addPostMoveCallback__SWIG_1(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerHandlerMapping_remPostMoveCallback(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native boolean ArServerHandlerMapping_packetHandler(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArRobotPacket jarg2_);
  public final static native long ArServerHandlerMapping_getLocationDataMap(long jarg1, ArServerHandlerMapping jarg1_);
  public final static native void ArServerHandlerMapping_addStringsForStartOfLogToMap(long jarg1, ArServerHandlerMapping jarg1_, long jarg2, ArMap jarg2_);
  public final static native long ArServerHandlerMapping_getZipFile(long jarg1, ArServerHandlerMapping jarg1_);
  public final static native long ArServerHandlerMapping_getSnapshotZipFile(long jarg1, ArServerHandlerMapping jarg1_);
  public final static native void ArServerHandlerMapping_setZipFile(long jarg1, ArServerHandlerMapping jarg1_, long jarg2);
  public final static native void ArServerHandlerMapping_setSnapshotZipFile(long jarg1, ArServerHandlerMapping jarg1_, long jarg2);
  public final static native long new_ArServerInfoDrawings(long jarg1, ArServerBase jarg1_);
  public final static native void delete_ArServerInfoDrawings(long jarg1);
  public final static native boolean ArServerInfoDrawings_addDrawing(long jarg1, ArServerInfoDrawings jarg1_, long jarg2, ArDrawingData jarg2_, String jarg3, long jarg4, ArFunctor_ServerData jarg4_);
  public final static native boolean ArServerInfoDrawings_addRangeDevice(long jarg1, ArServerInfoDrawings jarg1_, long jarg2, ArRangeDevice jarg2_);
  public final static native boolean ArServerInfoDrawings_addRobotsRangeDevices(long jarg1, ArServerInfoDrawings jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void ArServerInfoDrawings_netListDrawings(long jarg1, ArServerInfoDrawings jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoDrawings_netGetDrawingList(long jarg1, ArServerInfoDrawings jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoDrawings_netRangeDeviceCurrent(long jarg1, ArServerInfoDrawings jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_, long jarg4, ArRangeDevice jarg4_);
  public final static native void ArServerInfoDrawings_netRangeDeviceCumulative(long jarg1, ArServerInfoDrawings jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_, long jarg4, ArRangeDevice jarg4_);
  public final static native long ArServerInfoDrawings_internalGetDrawingData(long jarg1, ArServerInfoDrawings jarg1_, String jarg2);
  public final static native long ArServerInfoDrawings_internalGetDrawingCallback(long jarg1, ArServerInfoDrawings jarg1_, String jarg2);
  public final static native long new_ArServerInfoRobot(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerInfoRobot(long jarg1);
  public final static native void ArServerInfoRobot_update(long jarg1, ArServerInfoRobot jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoRobot_updateNumbers(long jarg1, ArServerInfoRobot jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoRobot_updateStrings(long jarg1, ArServerInfoRobot jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoRobot_batteryInfo(long jarg1, ArServerInfoRobot jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoRobot_physicalInfo(long jarg1, ArServerInfoRobot jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoRobot_activityTimeInfo(long jarg1, ArServerInfoRobot jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native long new_ArServerInfoSensor(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerInfoSensor(long jarg1);
  public final static native void ArServerInfoSensor_getSensorList(long jarg1, ArServerInfoSensor jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoSensor_getSensorCurrent(long jarg1, ArServerInfoSensor jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoSensor_getSensorCumulative(long jarg1, ArServerInfoSensor jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native long new_ArServerInfoStrings(long jarg1, ArServerBase jarg1_);
  public final static native void delete_ArServerInfoStrings(long jarg1);
  public final static native void ArServerInfoStrings_netGetStringsInfo(long jarg1, ArServerInfoStrings jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoStrings_netGetStrings(long jarg1, ArServerInfoStrings jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerInfoStrings_addString(long jarg1, ArServerInfoStrings jarg1_, String jarg2, int jarg3, long jarg4);
  public final static native long ArServerInfoStrings_getAddStringFunctor(long jarg1, ArServerInfoStrings jarg1_);
  public final static native long ArServerInfoStrings_internalGetStringInfoHolder(long jarg1, ArServerInfoStrings jarg1_, String jarg2);
  public final static native long new_ArServerModeDrive__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3);
  public final static native long new_ArServerModeDrive__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerModeDrive(long jarg1);
  public final static native void ArServerModeDrive_activate(long jarg1, ArServerModeDrive jarg1_);
  public final static native void ArServerModeDrive_deactivate(long jarg1, ArServerModeDrive jarg1_);
  public final static native void ArServerModeDrive_addControlCommands(long jarg1, ArServerModeDrive jarg1_, long jarg2, ArServerHandlerCommands jarg2_);
  public final static native void ArServerModeDrive_driveJoystick__SWIG_0(long jarg1, ArServerModeDrive jarg1_, double jarg2, double jarg3, boolean jarg4);
  public final static native void ArServerModeDrive_driveJoystick__SWIG_1(long jarg1, ArServerModeDrive jarg1_, double jarg2, double jarg3);
  public final static native void ArServerModeDrive_serverDriveJoystick(long jarg1, ArServerModeDrive jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeDrive_userTask(long jarg1, ArServerModeDrive jarg1_);
  public final static native void ArServerModeDrive_setThrottleParams(long jarg1, ArServerModeDrive jarg1_, int jarg2, int jarg3);
  public final static native long ArServerModeDrive_getActionGroup(long jarg1, ArServerModeDrive jarg1_);
  public final static native void ArServerModeDrive_setSafeDriving(long jarg1, ArServerModeDrive jarg1_, boolean jarg2);
  public final static native boolean ArServerModeDrive_getSafeDriving(long jarg1, ArServerModeDrive jarg1_);
  public final static native void ArServerModeDrive_setExtraUnsafeAction(long jarg1, ArServerModeDrive jarg1_, long jarg2, ArAction jarg2_);
  public final static native long new_ArServerModeIdle(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerModeIdle(long jarg1);
  public final static native void ArServerModeIdle_activate(long jarg1, ArServerModeIdle jarg1_);
  public final static native void ArServerModeIdle_deactivate(long jarg1, ArServerModeIdle jarg1_);
  public final static native void ArServerModeIdle_userTask(long jarg1, ArServerModeIdle jarg1_);
  public final static native void ArServerModeIdle_setModeInterrupted(long jarg1, ArServerModeIdle jarg1_, long jarg2, ArServerMode jarg2_);
  public final static native long ArServerModeIdle_getModeInterrupted(long jarg1, ArServerModeIdle jarg1_);
  public final static native long ArServerModeIdle_getActionGroup(long jarg1, ArServerModeIdle jarg1_);
  public final static native void ArServerModeIdle_addToConfig__SWIG_0(long jarg1, ArServerModeIdle jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native void ArServerModeIdle_addToConfig__SWIG_1(long jarg1, ArServerModeIdle jarg1_, long jarg2, ArConfig jarg2_);
  public final static native void ArServerModeIdle_setUseLocationDependentDevices__SWIG_0(long jarg1, ArServerModeIdle jarg1_, boolean jarg2, boolean jarg3);
  public final static native void ArServerModeIdle_setUseLocationDependentDevices__SWIG_1(long jarg1, ArServerModeIdle jarg1_, boolean jarg2);
  public final static native boolean ArServerModeIdle_getUseLocationDependentDevices(long jarg1, ArServerModeIdle jarg1_);
  public final static native long new_ArServerModeRatioDrive__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3, boolean jarg4, boolean jarg5, boolean jarg6, String jarg7, boolean jarg8);
  public final static native long new_ArServerModeRatioDrive__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3, boolean jarg4, boolean jarg5, boolean jarg6, String jarg7);
  public final static native long new_ArServerModeRatioDrive__SWIG_2(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3, boolean jarg4, boolean jarg5, boolean jarg6);
  public final static native long new_ArServerModeRatioDrive__SWIG_3(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native long new_ArServerModeRatioDrive__SWIG_4(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3, boolean jarg4);
  public final static native long new_ArServerModeRatioDrive__SWIG_5(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3);
  public final static native long new_ArServerModeRatioDrive__SWIG_6(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerModeRatioDrive(long jarg1);
  public final static native void ArServerModeRatioDrive_activate(long jarg1, ArServerModeRatioDrive jarg1_);
  public final static native void ArServerModeRatioDrive_deactivate(long jarg1, ArServerModeRatioDrive jarg1_);
  public final static native void ArServerModeRatioDrive_addControlCommands(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArServerHandlerCommands jarg2_);
  public final static native void ArServerModeRatioDrive_ratioDrive__SWIG_0(long jarg1, ArServerModeRatioDrive jarg1_, double jarg2, double jarg3, double jarg4, boolean jarg5, double jarg6);
  public final static native void ArServerModeRatioDrive_ratioDrive__SWIG_1(long jarg1, ArServerModeRatioDrive jarg1_, double jarg2, double jarg3, double jarg4, boolean jarg5);
  public final static native void ArServerModeRatioDrive_ratioDrive__SWIG_2(long jarg1, ArServerModeRatioDrive jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void ArServerModeRatioDrive_addToConfig(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native void ArServerModeRatioDrive_userTask(long jarg1, ArServerModeRatioDrive jarg1_);
  public final static native long ArServerModeRatioDrive_getActionGroup(long jarg1, ArServerModeRatioDrive jarg1_);
  public final static native long ArServerModeRatioDrive_getActionRatioInput(long jarg1, ArServerModeRatioDrive jarg1_);
  public final static native void ArServerModeRatioDrive_setSafeDriving__SWIG_0(long jarg1, ArServerModeRatioDrive jarg1_, boolean jarg2, boolean jarg3);
  public final static native void ArServerModeRatioDrive_setSafeDriving__SWIG_1(long jarg1, ArServerModeRatioDrive jarg1_, boolean jarg2);
  public final static native boolean ArServerModeRatioDrive_getSafeDriving(long jarg1, ArServerModeRatioDrive jarg1_);
  public final static native void ArServerModeRatioDrive_setUseLocationDependentDevices__SWIG_0(long jarg1, ArServerModeRatioDrive jarg1_, boolean jarg2, boolean jarg3);
  public final static native void ArServerModeRatioDrive_setUseLocationDependentDevices__SWIG_1(long jarg1, ArServerModeRatioDrive jarg1_, boolean jarg2);
  public final static native boolean ArServerModeRatioDrive_getUseLocationDependentDevices(long jarg1, ArServerModeRatioDrive jarg1_);
  public final static native void ArServerModeRatioDrive_addSafeDrivingCallback__SWIG_0(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeRatioDrive_addSafeDrivingCallback__SWIG_1(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeRatioDrive_remSafeDrivingCallback(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeRatioDrive_addUnsafeDrivingCallback__SWIG_0(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeRatioDrive_addUnsafeDrivingCallback__SWIG_1(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeRatioDrive_remUnsafeDrivingCallback(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeRatioDrive_addDrivingBackwardsCallback__SWIG_0(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_, int jarg3);
  public final static native void ArServerModeRatioDrive_addDrivingBackwardsCallback__SWIG_1(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native void ArServerModeRatioDrive_remDrivingBackwardsCallback(long jarg1, ArServerModeRatioDrive jarg1_, long jarg2, ArFunctor jarg2_);
  public final static native long new_ArServerModeStop__SWIG_0(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_, boolean jarg3);
  public final static native long new_ArServerModeStop__SWIG_1(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerModeStop(long jarg1);
  public final static native void ArServerModeStop_activate(long jarg1, ArServerModeStop jarg1_);
  public final static native void ArServerModeStop_deactivate(long jarg1, ArServerModeStop jarg1_);
  public final static native void ArServerModeStop_stop(long jarg1, ArServerModeStop jarg1_);
  public final static native void ArServerModeStop_netStop(long jarg1, ArServerModeStop jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeStop_userTask(long jarg1, ArServerModeStop jarg1_);
  public final static native void ArServerModeStop_checkDefault(long jarg1, ArServerModeStop jarg1_);
  public final static native long ArServerModeStop_getActionGroup(long jarg1, ArServerModeStop jarg1_);
  public final static native void ArServerModeStop_addToConfig__SWIG_0(long jarg1, ArServerModeStop jarg1_, long jarg2, ArConfig jarg2_, String jarg3);
  public final static native void ArServerModeStop_addToConfig__SWIG_1(long jarg1, ArServerModeStop jarg1_, long jarg2, ArConfig jarg2_);
  public final static native void ArServerModeStop_setUseLocationDependentDevices__SWIG_0(long jarg1, ArServerModeStop jarg1_, boolean jarg2, boolean jarg3);
  public final static native void ArServerModeStop_setUseLocationDependentDevices__SWIG_1(long jarg1, ArServerModeStop jarg1_, boolean jarg2);
  public final static native boolean ArServerModeStop_getUseLocationDependentDevices(long jarg1, ArServerModeStop jarg1_);
  public final static native long new_ArServerModeWander(long jarg1, ArServerBase jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerModeWander(long jarg1);
  public final static native void ArServerModeWander_activate(long jarg1, ArServerModeWander jarg1_);
  public final static native void ArServerModeWander_deactivate(long jarg1, ArServerModeWander jarg1_);
  public final static native void ArServerModeWander_wander(long jarg1, ArServerModeWander jarg1_);
  public final static native void ArServerModeWander_netWander(long jarg1, ArServerModeWander jarg1_, long jarg2, ArServerClient jarg2_, long jarg3, ArNetPacket jarg3_);
  public final static native void ArServerModeWander_userTask(long jarg1, ArServerModeWander jarg1_);
  public final static native void ArServerModeWander_checkDefault(long jarg1, ArServerModeWander jarg1_);
  public final static native long ArServerModeWander_getActionGroup(long jarg1, ArServerModeWander jarg1_);
  public final static native long new_ArServerSimpleComUC(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerSimpleComUC(long jarg1);
  public final static native void ArServerSimpleComUC_command(long jarg1, ArServerSimpleComUC jarg1_, long jarg2, ArArgumentBuilder jarg2_);
  public final static native void ArServerSimpleComUC_motionCommand(long jarg1, ArServerSimpleComUC jarg1_, long jarg2, ArArgumentBuilder jarg2_);
  public final static native long new_ArServerSimpleComMovementLogging__SWIG_0(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_, long jarg3);
  public final static native long new_ArServerSimpleComMovementLogging__SWIG_1(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerSimpleComMovementLogging(long jarg1);
  public final static native void ArServerSimpleComMovementLogging_logMovementSentEnable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logMovementSentDisable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logMovementReceivedEnable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logMovementReceivedDisable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logVelocitiesReceivedEnable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logVelocitiesReceivedDisable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_packetsReceivedTrackingEnable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_packetsReceivedTrackingDisable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_packetsSentTrackingEnable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_packetsSentTrackingDisable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logActionsEnable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logActionsDisable(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_logActions(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_popupMovementParams(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native void ArServerSimpleComMovementLogging_resetOdometer(long jarg1, ArServerSimpleComMovementLogging jarg1_);
  public final static native long new_ArServerSimpleComGyro(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_, long jarg3, ArAnalogGyro jarg3_);
  public final static native void delete_ArServerSimpleComGyro(long jarg1);
  public final static native void ArServerSimpleComGyro_gyroEnable(long jarg1, ArServerSimpleComGyro jarg1_);
  public final static native void ArServerSimpleComGyro_gyroDisable(long jarg1, ArServerSimpleComGyro jarg1_);
  public final static native long new_ArServerSimpleComLogRobotConfig__SWIG_0(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_, long jarg3);
  public final static native long new_ArServerSimpleComLogRobotConfig__SWIG_1(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void ArServerSimpleComLogRobotConfig_logConfig(long jarg1, ArServerSimpleComLogRobotConfig jarg1_);
  public final static native void ArServerSimpleComLogRobotConfig_logMovementConfig(long jarg1, ArServerSimpleComLogRobotConfig jarg1_);
  public final static native void ArServerSimpleComLogRobotConfig_logOrigConfig(long jarg1, ArServerSimpleComLogRobotConfig jarg1_);
  public final static native void ArServerSimpleComLogRobotConfig_popupConfig(long jarg1, ArServerSimpleComLogRobotConfig jarg1_);
  public final static native void ArServerSimpleComLogRobotConfig_popupOrigConfig(long jarg1, ArServerSimpleComLogRobotConfig jarg1_);
  public final static native void ArServerSimpleComLogRobotConfig_popupMovementConfig(long jarg1, ArServerSimpleComLogRobotConfig jarg1_);
  public final static native void delete_ArServerSimpleComLogRobotConfig(long jarg1);
  public final static native long new_ArServerSimpleComLogActions(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void ArServerSimpleComLogActions_logActions(long jarg1, ArServerSimpleComLogActions jarg1_);
  public final static native void delete_ArServerSimpleComLogActions(long jarg1);
  public final static native long new_ArServerSimpleServerCommands__SWIG_0(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArServerBase jarg2_, boolean jarg3);
  public final static native long new_ArServerSimpleServerCommands__SWIG_1(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArServerBase jarg2_);
  public final static native void delete_ArServerSimpleServerCommands(long jarg1);
  public final static native void ArServerSimpleServerCommands_logTerseTracking(long jarg1, ArServerSimpleServerCommands jarg1_);
  public final static native void ArServerSimpleServerCommands_logVerboseTracking(long jarg1, ArServerSimpleServerCommands jarg1_);
  public final static native void ArServerSimpleServerCommands_resetTracking(long jarg1, ArServerSimpleServerCommands jarg1_);
  public final static native void ArServerSimpleServerCommands_logConnections(long jarg1, ArServerSimpleServerCommands jarg1_);
  public final static native long new_ArServerSimplePopup(long jarg1, ArServerHandlerCommands jarg1_, long jarg2);
  public final static native void delete_ArServerSimplePopup(long jarg1);
  public final static native void ArServerSimplePopup_simplePopup(long jarg1, ArServerSimplePopup jarg1_, long jarg2, ArArgumentBuilder jarg2_);
  public final static native long new_ArServerSimpleLogRobotDebugPackets__SWIG_0(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_, String jarg3);
  public final static native long new_ArServerSimpleLogRobotDebugPackets__SWIG_1(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerSimpleLogRobotDebugPackets(long jarg1);
  public final static native boolean ArServerSimpleLogRobotDebugPackets_startLogging__SWIG_0(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_, String jarg2);
  public final static native boolean ArServerSimpleLogRobotDebugPackets_startLogging__SWIG_1(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_);
  public final static native boolean ArServerSimpleLogRobotDebugPackets_stopLogging(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_);
  public final static native boolean ArServerSimpleLogRobotDebugPackets_packetHandler(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_, long jarg2, ArRobotPacket jarg2_);
  public final static native void ArServerSimpleLogRobotDebugPackets_addToInfoGroup__SWIG_0(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_, long jarg2, ArStringInfoGroup jarg2_, String jarg3, int jarg4, String jarg5);
  public final static native void ArServerSimpleLogRobotDebugPackets_addToInfoGroup__SWIG_1(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_, long jarg2, ArStringInfoGroup jarg2_, String jarg3, int jarg4);
  public final static native int ArServerSimpleLogRobotDebugPackets_getNumValues(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_);
  public final static native int ArServerSimpleLogRobotDebugPackets_getValue(long jarg1, ArServerSimpleLogRobotDebugPackets jarg1_, int jarg2);
  public final static native long new_ArServerSimpleConnectionTester(long jarg1, ArServerHandlerCommands jarg1_, long jarg2, ArRobot jarg2_);
  public final static native void delete_ArServerSimpleConnectionTester(long jarg1);
  public final static native void ArServerSimpleConnectionTester_connectionTestStart(long jarg1, ArServerSimpleConnectionTester jarg1_);
  public final static native void ArServerSimpleConnectionTester_connectionTestStop(long jarg1, ArServerSimpleConnectionTester jarg1_);
  public final static native long new_ArServerSimpleOpener__SWIG_0(long jarg1, ArArgumentParser jarg1_, String jarg2, boolean jarg3);
  public final static native long new_ArServerSimpleOpener__SWIG_1(long jarg1, ArArgumentParser jarg1_, String jarg2);
  public final static native long new_ArServerSimpleOpener__SWIG_2(long jarg1, ArArgumentParser jarg1_);
  public final static native void delete_ArServerSimpleOpener(long jarg1);
  public final static native boolean ArServerSimpleOpener_open__SWIG_0(long jarg1, ArServerSimpleOpener jarg1_, long jarg2, ArServerBase jarg2_, String jarg3, int jarg4);
  public final static native boolean ArServerSimpleOpener_open__SWIG_1(long jarg1, ArServerSimpleOpener jarg1_, long jarg2, ArServerBase jarg2_, String jarg3);
  public final static native boolean ArServerSimpleOpener_open__SWIG_2(long jarg1, ArServerSimpleOpener jarg1_, long jarg2, ArServerBase jarg2_);
  public final static native boolean ArServerSimpleOpener_parseArgs__SWIG_0(long jarg1, ArServerSimpleOpener jarg1_);
  public final static native boolean ArServerSimpleOpener_parseArgs__SWIG_1(long jarg1, ArServerSimpleOpener jarg1_, long jarg2, ArArgumentParser jarg2_);
  public final static native void ArServerSimpleOpener_logOptions(long jarg1, ArServerSimpleOpener jarg1_);
  public final static native boolean ArServerSimpleOpener_checkAndLog(long jarg1, ArServerSimpleOpener jarg1_);
  public final static native boolean ArServerSimpleOpener_wasUserFileBad(long jarg1, ArServerSimpleOpener jarg1_);
  public final static native boolean ArServerSimpleOpener_didOpenFail(long jarg1, ArServerSimpleOpener jarg1_);
  public final static native int ArServerSimpleOpener_getPort(long jarg1, ArServerSimpleOpener jarg1_);
  public final static native void ArServerSimpleOpener_setDefaultPort(long jarg1, ArServerSimpleOpener jarg1_, int jarg2);
  public final static native boolean ArServerSimpleOpener_parseFile(long jarg1, ArServerSimpleOpener jarg1_, String jarg2);
  public final static native void ArServerSimpleOpener_setServerTcpOnly(long jarg1, ArServerSimpleOpener jarg1_, boolean jarg2);
  public final static native String ArServerSimpleOpener_getServerKey(long jarg1, ArServerSimpleOpener jarg1_);
  public final static native long new_ArServerUserInfo__SWIG_0(String jarg1);
  public final static native long new_ArServerUserInfo__SWIG_1();
  public final static native void delete_ArServerUserInfo(long jarg1);
  public final static native boolean ArServerUserInfo_readFile(long jarg1, ArServerUserInfo jarg1_, String jarg2);
  public final static native void ArServerUserInfo_setBaseDirectory(long jarg1, ArServerUserInfo jarg1_, String jarg2);
  public final static native boolean ArServerUserInfo_matchUserPassword__SWIG_0(long jarg1, ArServerUserInfo jarg1_, String jarg2, long jarg3, String jarg4, String jarg5, boolean jarg6);
  public final static native boolean ArServerUserInfo_matchUserPassword__SWIG_1(long jarg1, ArServerUserInfo jarg1_, String jarg2, long jarg3, String jarg4, String jarg5);
  public final static native boolean ArServerUserInfo_doNotUse(long jarg1, ArServerUserInfo jarg1_);
  public final static native long ArServerUserInfo_getUsersGroups(long jarg1, ArServerUserInfo jarg1_, String jarg2);
  public final static native void ArServerUserInfo_logUsers(long jarg1, ArServerUserInfo jarg1_);
  public final static native long new_ArClientHandlerRobotUpdate(long jarg1, ArClientBase jarg1_);
  public final static native void delete_ArClientHandlerRobotUpdate(long jarg1);
  public final static native void ArClientHandlerRobotUpdate_requestUpdates__SWIG_0(long jarg1, ArClientHandlerRobotUpdate jarg1_, int jarg2);
  public final static native void ArClientHandlerRobotUpdate_requestUpdates__SWIG_1(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native void ArClientHandlerRobotUpdate_stopUpdates(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native void ArClientHandlerRobotUpdate_addStatusChangedCB(long jarg1, ArClientHandlerRobotUpdate jarg1_, long jarg2);
  public final static native void ArClientHandlerRobotUpdate_remStatusChangedCB(long jarg1, ArClientHandlerRobotUpdate jarg1_, long jarg2);
  public final static native void ArClientHandlerRobotUpdate_addModeChangedCB(long jarg1, ArClientHandlerRobotUpdate jarg1_, long jarg2, ArFunctor1_CString jarg2_);
  public final static native void ArClientHandlerRobotUpdate_remModeChangedCB(long jarg1, ArClientHandlerRobotUpdate jarg1_, long jarg2, ArFunctor1_CString jarg2_);
  public final static native void ArClientHandlerRobotUpdate_lock(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native void ArClientHandlerRobotUpdate_unlock(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getX(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getY(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getTh(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native long ArClientHandlerRobotUpdate_getPose(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getVel(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getRotVel(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getLatVel(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native boolean ArClientHandlerRobotUpdate_haveStateOfCharge(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getStateOfCharge(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native boolean ArClientHandlerRobotUpdate_haveVoltage(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getVoltage(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native double ArClientHandlerRobotUpdate_getTemperature(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native String ArClientHandlerRobotUpdate_getStatus(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native String ArClientHandlerRobotUpdate_getMode(long jarg1, ArClientHandlerRobotUpdate jarg1_);
  public final static native boolean ArClientHandlerRobotUpdate_waitForStatus(long jarg1, ArClientHandlerRobotUpdate jarg1_, String jarg2, int jarg3);
  public final static native boolean ArClientHandlerRobotUpdate_waitForMode(long jarg1, ArClientHandlerRobotUpdate jarg1_, String jarg2, int jarg3);
  public final static native long ArFunctor_ServerClient_SWIGUpcast(long jarg1);
  public final static native long ArFunctor_NetPacket_SWIGUpcast(long jarg1);
  public final static native long ArFunctor_ServerData_SWIGUpcast(long jarg1);
  public final static native long ArNetPacket_SWIGUpcast(long jarg1);
  public final static native long ArServerBase_SWIGUpcast(long jarg1);
  public final static native long ArClientBase_SWIGUpcast(long jarg1);
  public final static native long ArHybridForwarderVideo_SWIGUpcast(long jarg1);
  public final static native long ArServerHandlerCamera_SWIGUpcast(long jarg1);
  public final static native long ArServerModeDrive_SWIGUpcast(long jarg1);
  public final static native long ArServerModeIdle_SWIGUpcast(long jarg1);
  public final static native long ArServerModeRatioDrive_SWIGUpcast(long jarg1);
  public final static native long ArServerModeStop_SWIGUpcast(long jarg1);
  public final static native long ArServerModeWander_SWIGUpcast(long jarg1);

  public static void SwigDirector_ArFunctor_ServerClient_invoke__SWIG_0(ArFunctor_ServerClient jself) {
    jself.invoke();
  }
  public static String SwigDirector_ArFunctor_ServerClient_getName(ArFunctor_ServerClient jself) {
    return jself.getName();
  }
  public static void SwigDirector_ArFunctor_ServerClient_setName(ArFunctor_ServerClient jself, String name) {
    jself.setName(name);
  }
  public static void SwigDirector_ArFunctor_ServerClient_invoke__SWIG_1(ArFunctor_ServerClient jself, long p1) {
    jself.invoke((p1 == 0) ? null : new ArServerClient(p1, false));
  }
  public static void SwigDirector_ArFunctor_NetPacket_invoke__SWIG_0(ArFunctor_NetPacket jself) {
    jself.invoke();
  }
  public static String SwigDirector_ArFunctor_NetPacket_getName(ArFunctor_NetPacket jself) {
    return jself.getName();
  }
  public static void SwigDirector_ArFunctor_NetPacket_setName(ArFunctor_NetPacket jself, String name) {
    jself.setName(name);
  }
  public static void SwigDirector_ArFunctor_NetPacket_invoke__SWIG_1(ArFunctor_NetPacket jself, long p1) {
    jself.invoke((p1 == 0) ? null : new ArNetPacket(p1, false));
  }
  public static void SwigDirector_ArFunctor_ServerData_invoke__SWIG_0(ArFunctor_ServerData jself) {
    jself.invoke();
  }
  public static String SwigDirector_ArFunctor_ServerData_getName(ArFunctor_ServerData jself) {
    return jself.getName();
  }
  public static void SwigDirector_ArFunctor_ServerData_setName(ArFunctor_ServerData jself, String name) {
    jself.setName(name);
  }
  public static void SwigDirector_ArFunctor_ServerData_invoke__SWIG_1(ArFunctor_ServerData jself, long p1) {
    jself.invoke((p1 == 0) ? null : new ArServerClient(p1, false));
  }
  public static void SwigDirector_ArFunctor_ServerData_invoke__SWIG_2(ArFunctor_ServerData jself, long p1, long p2) {
    jself.invoke((p1 == 0) ? null : new ArServerClient(p1, false), (p2 == 0) ? null : new ArNetPacket(p2, false));
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
