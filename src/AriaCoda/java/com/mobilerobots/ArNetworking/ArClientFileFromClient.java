/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArClientFileFromClient {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ArClientFileFromClient(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArClientFileFromClient obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArClientFileFromClient(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public ArClientFileFromClient(ArClientBase client) {
    this(ArNetworkingJavaJNI.new_ArClientFileFromClient(ArClientBase.getCPtr(client), client), true);
  }

  public boolean isAvailable() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_isAvailable(swigCPtr, this);
  }

  public boolean isAvailableSlow() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_isAvailableSlow(swigCPtr, this);
  }

  public boolean isAvailableFast() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_isAvailableFast(swigCPtr, this);
  }

  public boolean isAvailableSetTimestamp() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_isAvailableSetTimestamp(swigCPtr, this);
  }

  public boolean putFileToDirectory(String directory, String fileName, String clientFileName, ArClientFileFromClient.SendSpeed sendSpeed, boolean isSetTimestamp) {
    return ArNetworkingJavaJNI.ArClientFileFromClient_putFileToDirectory__SWIG_0(swigCPtr, this, directory, fileName, clientFileName, sendSpeed.swigValue(), isSetTimestamp);
  }

  public boolean putFileToDirectory(String directory, String fileName, String clientFileName, ArClientFileFromClient.SendSpeed sendSpeed) {
    return ArNetworkingJavaJNI.ArClientFileFromClient_putFileToDirectory__SWIG_1(swigCPtr, this, directory, fileName, clientFileName, sendSpeed.swigValue());
  }

  public boolean putFileToDirectory(String directory, String fileName, String clientFileName) {
    return ArNetworkingJavaJNI.ArClientFileFromClient_putFileToDirectory__SWIG_2(swigCPtr, this, directory, fileName, clientFileName);
  }

  public void cancelPut() {
    ArNetworkingJavaJNI.ArClientFileFromClient_cancelPut(swigCPtr, this);
  }

  public boolean isWaitingForReturn() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_isWaitingForReturn(swigCPtr, this);
  }

  public String getDirectory() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_getDirectory(swigCPtr, this);
  }

  public String getFileName() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_getFileName(swigCPtr, this);
  }

  public String getClientFileName() {
    return ArNetworkingJavaJNI.ArClientFileFromClient_getClientFileName(swigCPtr, this);
  }

  public void addFileSentCallback(ArFunctor1_Int functor, ArListPos.Pos position) {
    ArNetworkingJavaJNI.ArClientFileFromClient_addFileSentCallback__SWIG_0(swigCPtr, this, ArFunctor1_Int.getCPtr(functor), functor, position.swigValue());
  }

  public void addFileSentCallback(ArFunctor1_Int functor) {
    ArNetworkingJavaJNI.ArClientFileFromClient_addFileSentCallback__SWIG_1(swigCPtr, this, ArFunctor1_Int.getCPtr(functor), functor);
  }

  public void remFileSentCallback(ArFunctor1_Int functor) {
    ArNetworkingJavaJNI.ArClientFileFromClient_remFileSentCallback(swigCPtr, this, ArFunctor1_Int.getCPtr(functor), functor);
  }

  public ArTime getLastCompletedSend() {
    return new ArTime(ArNetworkingJavaJNI.ArClientFileFromClient_getLastCompletedSend(swigCPtr, this), true);
  }

  public ArTime getLastStartedSend() {
    return new ArTime(ArNetworkingJavaJNI.ArClientFileFromClient_getLastStartedSend(swigCPtr, this), true);
  }

  public final static class SendSpeed {
    public final static ArClientFileFromClient.SendSpeed SPEED_AUTO = new ArClientFileFromClient.SendSpeed("SPEED_AUTO");
    public final static ArClientFileFromClient.SendSpeed SPEED_FAST = new ArClientFileFromClient.SendSpeed("SPEED_FAST");
    public final static ArClientFileFromClient.SendSpeed SPEED_SLOW = new ArClientFileFromClient.SendSpeed("SPEED_SLOW");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SendSpeed swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SendSpeed.class + " with value " + swigValue);
    }

    private SendSpeed(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SendSpeed(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SendSpeed(String swigName, SendSpeed swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SendSpeed[] swigValues = { SPEED_AUTO, SPEED_FAST, SPEED_SLOW };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
