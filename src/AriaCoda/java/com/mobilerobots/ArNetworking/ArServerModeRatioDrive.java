/*
Adept MobileRobots Robotics Interface for Applications (ARIA)
Copyright (C) 2004-2005 ActivMedia Robotics LLC
Copyright (C) 2006-2010 MobileRobots Inc.
Copyright (C) 2011-2015 Adept Technology, Inc.
Copyright (C) 2016-2018 Omron Adept Technologies, Inc.

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

If you wish to redistribute ARIA under different terms, contact 
Adept MobileRobots for information about a commercial version of ARIA at 
robots@mobilerobots.com or 
Adept MobileRobots, 10 Columbia Drive, Amherst, NH 03031; +1-603-881-7960
*/
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.mobilerobots.ArNetworking;
import com.mobilerobots.Aria.*;
public class ArServerModeRatioDrive extends ArServerMode {
  private transient long swigCPtr;

  public ArServerModeRatioDrive(long cPtr, boolean cMemoryOwn) {
    super(ArNetworkingJavaJNI.ArServerModeRatioDrive_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ArServerModeRatioDrive obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ArNetworkingJavaJNI.delete_ArServerModeRatioDrive(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ArServerModeRatioDrive(ArServerBase server, ArRobot robot, boolean takeControlOnJoystick, boolean useComputerJoystick, boolean useRobotJoystick, boolean useServerCommands, String name, boolean robotJoystickOverridesLocks) {
    this(ArNetworkingJavaJNI.new_ArServerModeRatioDrive__SWIG_0(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, takeControlOnJoystick, useComputerJoystick, useRobotJoystick, useServerCommands, name, robotJoystickOverridesLocks), true);
  }

  public ArServerModeRatioDrive(ArServerBase server, ArRobot robot, boolean takeControlOnJoystick, boolean useComputerJoystick, boolean useRobotJoystick, boolean useServerCommands, String name) {
    this(ArNetworkingJavaJNI.new_ArServerModeRatioDrive__SWIG_1(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, takeControlOnJoystick, useComputerJoystick, useRobotJoystick, useServerCommands, name), true);
  }

  public ArServerModeRatioDrive(ArServerBase server, ArRobot robot, boolean takeControlOnJoystick, boolean useComputerJoystick, boolean useRobotJoystick, boolean useServerCommands) {
    this(ArNetworkingJavaJNI.new_ArServerModeRatioDrive__SWIG_2(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, takeControlOnJoystick, useComputerJoystick, useRobotJoystick, useServerCommands), true);
  }

  public ArServerModeRatioDrive(ArServerBase server, ArRobot robot, boolean takeControlOnJoystick, boolean useComputerJoystick, boolean useRobotJoystick) {
    this(ArNetworkingJavaJNI.new_ArServerModeRatioDrive__SWIG_3(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, takeControlOnJoystick, useComputerJoystick, useRobotJoystick), true);
  }

  public ArServerModeRatioDrive(ArServerBase server, ArRobot robot, boolean takeControlOnJoystick, boolean useComputerJoystick) {
    this(ArNetworkingJavaJNI.new_ArServerModeRatioDrive__SWIG_4(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, takeControlOnJoystick, useComputerJoystick), true);
  }

  public ArServerModeRatioDrive(ArServerBase server, ArRobot robot, boolean takeControlOnJoystick) {
    this(ArNetworkingJavaJNI.new_ArServerModeRatioDrive__SWIG_5(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot, takeControlOnJoystick), true);
  }

  public ArServerModeRatioDrive(ArServerBase server, ArRobot robot) {
    this(ArNetworkingJavaJNI.new_ArServerModeRatioDrive__SWIG_6(ArServerBase.getCPtr(server), server, ArRobot.getCPtr(robot), robot), true);
  }

  public void activate() {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_activate(swigCPtr, this);
  }

  public void deactivate() {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_deactivate(swigCPtr, this);
  }

  public void addControlCommands(ArServerHandlerCommands handlerCommands) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addControlCommands(swigCPtr, this, ArServerHandlerCommands.getCPtr(handlerCommands), handlerCommands);
  }

  public void ratioDrive(double transRatio, double rotRatio, double throttleRatio, boolean isActivating, double latRatio) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_ratioDrive__SWIG_0(swigCPtr, this, transRatio, rotRatio, throttleRatio, isActivating, latRatio);
  }

  public void ratioDrive(double transRatio, double rotRatio, double throttleRatio, boolean isActivating) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_ratioDrive__SWIG_1(swigCPtr, this, transRatio, rotRatio, throttleRatio, isActivating);
  }

  public void ratioDrive(double transRatio, double rotRatio, double throttleRatio) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_ratioDrive__SWIG_2(swigCPtr, this, transRatio, rotRatio, throttleRatio);
  }

  public void addToConfig(ArConfig config, String section) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addToConfig(swigCPtr, this, ArConfig.getCPtr(config), config, section);
  }

  public void userTask() {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_userTask(swigCPtr, this);
  }

  public ArActionGroup getActionGroup() {
    long cPtr = ArNetworkingJavaJNI.ArServerModeRatioDrive_getActionGroup(swigCPtr, this);
    return (cPtr == 0) ? null : new ArActionGroup(cPtr, false);
  }

  public ArActionRatioInput getActionRatioInput() {
    long cPtr = ArNetworkingJavaJNI.ArServerModeRatioDrive_getActionRatioInput(swigCPtr, this);
    return (cPtr == 0) ? null : new ArActionRatioInput(cPtr, false);
  }

  public void setSafeDriving(boolean safe, boolean internal) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_setSafeDriving__SWIG_0(swigCPtr, this, safe, internal);
  }

  public void setSafeDriving(boolean safe) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_setSafeDriving__SWIG_1(swigCPtr, this, safe);
  }

  public boolean getSafeDriving() {
    return ArNetworkingJavaJNI.ArServerModeRatioDrive_getSafeDriving(swigCPtr, this);
  }

  public void setUseLocationDependentDevices(boolean useLocationDependentDevices, boolean internal) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_setUseLocationDependentDevices__SWIG_0(swigCPtr, this, useLocationDependentDevices, internal);
  }

  public void setUseLocationDependentDevices(boolean useLocationDependentDevices) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_setUseLocationDependentDevices__SWIG_1(swigCPtr, this, useLocationDependentDevices);
  }

  public boolean getUseLocationDependentDevices() {
    return ArNetworkingJavaJNI.ArServerModeRatioDrive_getUseLocationDependentDevices(swigCPtr, this);
  }

  public void addSafeDrivingCallback(ArFunctor functor, int position) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addSafeDrivingCallback__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addSafeDrivingCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addSafeDrivingCallback__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remSafeDrivingCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_remSafeDrivingCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addUnsafeDrivingCallback(ArFunctor functor, int position) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addUnsafeDrivingCallback__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addUnsafeDrivingCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addUnsafeDrivingCallback__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remUnsafeDrivingCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_remUnsafeDrivingCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void addDrivingBackwardsCallback(ArFunctor functor, int position) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addDrivingBackwardsCallback__SWIG_0(swigCPtr, this, ArFunctor.getCPtr(functor), functor, position);
  }

  public void addDrivingBackwardsCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_addDrivingBackwardsCallback__SWIG_1(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

  public void remDrivingBackwardsCallback(ArFunctor functor) {
    ArNetworkingJavaJNI.ArServerModeRatioDrive_remDrivingBackwardsCallback(swigCPtr, this, ArFunctor.getCPtr(functor), functor);
  }

}
