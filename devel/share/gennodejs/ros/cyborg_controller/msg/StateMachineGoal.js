// Auto-generated. Do not edit!

// (in-package cyborg_controller.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class StateMachineGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.previous_state = null;
      this.event = null;
      this.current_state = null;
      this.order = null;
    }
    else {
      if (initObj.hasOwnProperty('previous_state')) {
        this.previous_state = initObj.previous_state
      }
      else {
        this.previous_state = '';
      }
      if (initObj.hasOwnProperty('event')) {
        this.event = initObj.event
      }
      else {
        this.event = '';
      }
      if (initObj.hasOwnProperty('current_state')) {
        this.current_state = initObj.current_state
      }
      else {
        this.current_state = '';
      }
      if (initObj.hasOwnProperty('order')) {
        this.order = initObj.order
      }
      else {
        this.order = '';
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type StateMachineGoal
    // Serialize message field [previous_state]
    bufferOffset = _serializer.string(obj.previous_state, buffer, bufferOffset);
    // Serialize message field [event]
    bufferOffset = _serializer.string(obj.event, buffer, bufferOffset);
    // Serialize message field [current_state]
    bufferOffset = _serializer.string(obj.current_state, buffer, bufferOffset);
    // Serialize message field [order]
    bufferOffset = _serializer.string(obj.order, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type StateMachineGoal
    let len;
    let data = new StateMachineGoal(null);
    // Deserialize message field [previous_state]
    data.previous_state = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [event]
    data.event = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [current_state]
    data.current_state = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [order]
    data.order = _deserializer.string(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.previous_state.length;
    length += object.event.length;
    length += object.current_state.length;
    length += object.order.length;
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cyborg_controller/StateMachineGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ca0cbc617848fd96cc506786c47de76e';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    string previous_state
    string event
    string current_state
    string order #valid is EXECUTE or CANCEL
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new StateMachineGoal(null);
    if (msg.previous_state !== undefined) {
      resolved.previous_state = msg.previous_state;
    }
    else {
      resolved.previous_state = ''
    }

    if (msg.event !== undefined) {
      resolved.event = msg.event;
    }
    else {
      resolved.event = ''
    }

    if (msg.current_state !== undefined) {
      resolved.current_state = msg.current_state;
    }
    else {
      resolved.current_state = ''
    }

    if (msg.order !== undefined) {
      resolved.order = msg.order;
    }
    else {
      resolved.order = ''
    }

    return resolved;
    }
};

module.exports = StateMachineGoal;
