;; Auto-generated. Do not edit!


(when (boundp 'rosarnl::JogPositionFeedback)
  (if (not (find-package "ROSARNL"))
    (make-package "ROSARNL"))
  (shadow 'JogPositionFeedback (find-package "ROSARNL")))
(unless (find-package "ROSARNL::JOGPOSITIONFEEDBACK")
  (make-package "ROSARNL::JOGPOSITIONFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude JogPositionFeedback.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass rosarnl::JogPositionFeedback
  :super ros::object
  :slots (_current _duration ))

(defmethod rosarnl::JogPositionFeedback
  (:init
   (&key
    ((:current __current) (instance geometry_msgs::Pose2D :init))
    ((:duration __duration) (instance ros::time :init))
    )
   (send-super :init)
   (setq _current __current)
   (setq _duration __duration)
   self)
  (:current
   (&rest __current)
   (if (keywordp (car __current))
       (send* _current __current)
     (progn
       (if __current (setq _current (car __current)))
       _current)))
  (:duration
   (&optional __duration)
   (if __duration (setq _duration __duration)) _duration)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose2D _current
    (send _current :serialization-length)
    ;; duration _duration
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose2D _current
       (send _current :serialize s)
     ;; duration _duration
       (write-long (send _duration :sec) s) (write-long (send _duration :nsec) s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose2D _current
     (send _current :deserialize buf ptr-) (incf ptr- (send _current :serialization-length))
   ;; duration _duration
     (send _duration :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _duration :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get rosarnl::JogPositionFeedback :md5sum-) "a3028aaede1352c7007b717c9afed53f")
(setf (get rosarnl::JogPositionFeedback :datatype-) "rosarnl/JogPositionFeedback")
(setf (get rosarnl::JogPositionFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback, current pose and time since start of goal. TODO include remaining distannce
geometry_msgs/Pose2D current
duration duration


================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

")



(provide :rosarnl/JogPositionFeedback "a3028aaede1352c7007b717c9afed53f")


