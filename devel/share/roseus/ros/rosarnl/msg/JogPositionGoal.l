;; Auto-generated. Do not edit!


(when (boundp 'rosarnl::JogPositionGoal)
  (if (not (find-package "ROSARNL"))
    (make-package "ROSARNL"))
  (shadow 'JogPositionGoal (find-package "ROSARNL")))
(unless (find-package "ROSARNL::JOGPOSITIONGOAL")
  (make-package "ROSARNL::JOGPOSITIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude JogPositionGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass rosarnl::JogPositionGoal
  :super ros::object
  :slots (_offset _timeout ))

(defmethod rosarnl::JogPositionGoal
  (:init
   (&key
    ((:offset __offset) (instance geometry_msgs::Pose2D :init))
    ((:timeout __timeout) (instance ros::time :init))
    )
   (send-super :init)
   (setq _offset __offset)
   (setq _timeout __timeout)
   self)
  (:offset
   (&rest __offset)
   (if (keywordp (car __offset))
       (send* _offset __offset)
     (progn
       (if __offset (setq _offset (car __offset)))
       _offset)))
  (:timeout
   (&optional __timeout)
   (if __timeout (setq _timeout __timeout)) _timeout)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose2D _offset
    (send _offset :serialization-length)
    ;; duration _timeout
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose2D _offset
       (send _offset :serialize s)
     ;; duration _timeout
       (write-long (send _timeout :sec) s) (write-long (send _timeout :nsec) s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose2D _offset
     (send _offset :deserialize buf ptr-) (incf ptr- (send _offset :serialization-length))
   ;; duration _timeout
     (send _timeout :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _timeout :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get rosarnl::JogPositionGoal :md5sum-) "7800e2305f96351593150df12af52c22")
(setf (get rosarnl::JogPositionGoal :datatype-) "rosarnl/JogPositionGoal")
(setf (get rosarnl::JogPositionGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal offset
geometry_msgs/Pose2D offset
duration timeout

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

")



(provide :rosarnl/JogPositionGoal "7800e2305f96351593150df12af52c22")


