;; Auto-generated. Do not edit!


(when (boundp 'cyborg_controller::StateMachineGoal)
  (if (not (find-package "CYBORG_CONTROLLER"))
    (make-package "CYBORG_CONTROLLER"))
  (shadow 'StateMachineGoal (find-package "CYBORG_CONTROLLER")))
(unless (find-package "CYBORG_CONTROLLER::STATEMACHINEGOAL")
  (make-package "CYBORG_CONTROLLER::STATEMACHINEGOAL"))

(in-package "ROS")
;;//! \htmlinclude StateMachineGoal.msg.html


(defclass cyborg_controller::StateMachineGoal
  :super ros::object
  :slots (_previous_state _event _current_state _order ))

(defmethod cyborg_controller::StateMachineGoal
  (:init
   (&key
    ((:previous_state __previous_state) "")
    ((:event __event) "")
    ((:current_state __current_state) "")
    ((:order __order) "")
    )
   (send-super :init)
   (setq _previous_state (string __previous_state))
   (setq _event (string __event))
   (setq _current_state (string __current_state))
   (setq _order (string __order))
   self)
  (:previous_state
   (&optional __previous_state)
   (if __previous_state (setq _previous_state __previous_state)) _previous_state)
  (:event
   (&optional __event)
   (if __event (setq _event __event)) _event)
  (:current_state
   (&optional __current_state)
   (if __current_state (setq _current_state __current_state)) _current_state)
  (:order
   (&optional __order)
   (if __order (setq _order __order)) _order)
  (:serialization-length
   ()
   (+
    ;; string _previous_state
    4 (length _previous_state)
    ;; string _event
    4 (length _event)
    ;; string _current_state
    4 (length _current_state)
    ;; string _order
    4 (length _order)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _previous_state
       (write-long (length _previous_state) s) (princ _previous_state s)
     ;; string _event
       (write-long (length _event) s) (princ _event s)
     ;; string _current_state
       (write-long (length _current_state) s) (princ _current_state s)
     ;; string _order
       (write-long (length _order) s) (princ _order s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _previous_state
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _previous_state (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _event
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _event (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _current_state
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _current_state (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; string _order
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _order (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get cyborg_controller::StateMachineGoal :md5sum-) "ca0cbc617848fd96cc506786c47de76e")
(setf (get cyborg_controller::StateMachineGoal :datatype-) "cyborg_controller/StateMachineGoal")
(setf (get cyborg_controller::StateMachineGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
string previous_state
string event
string current_state
string order #valid is EXECUTE or CANCEL

")



(provide :cyborg_controller/StateMachineGoal "ca0cbc617848fd96cc506786c47de76e")


