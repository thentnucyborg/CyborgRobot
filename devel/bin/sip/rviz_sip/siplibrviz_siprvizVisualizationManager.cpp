/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.17
 */

#include "sipAPIlibrviz_sip.h"

#line 7 "visualization_manager.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/visualization_manager.h>
#line 13 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"

#line 27 "/usr/share/sip/PyQt5/QtCore/qstring.sip"
#include <qstring.h>
#line 17 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "display_group.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/display_group.h>
#line 21 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "view_manager.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/view_manager.h>
#line 25 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "tool_manager.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/tool_manager.h>
#line 29 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "config.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/config.h>
#line 33 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 7 "display.sip"
#define ROS_PACKAGE_NAME "rviz"
#include <rviz/display.h>
#line 37 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 40 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 43 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 244 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 232 "/usr/share/sip/PyQt5/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 28 "/usr/share/sip/PyQt5/QtCore/qobject.sip"
#include <qobject.h>
#line 52 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 36 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 58 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 32 "/usr/share/sip/PyQt5/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 61 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 144 "/usr/share/sip/PyQt5/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 64 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qthread.sip"
#include <qthread.h>
#line 70 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregexp.sip"
#include <qregexp.h>
#line 76 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 79 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"
#line 26 "/usr/share/sip/PyQt5/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 82 "/home/lassegoncz/catkin_ws/devel/bin/sip/rviz_sip/siplibrviz_siprvizVisualizationManager.cpp"


extern "C" {static PyObject *meth_rviz_VisualizationManager_initialize(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_initialize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->initialize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_initialize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_startUpdate(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_startUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->startUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_startUpdate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_stopUpdate(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_stopUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->stopUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_stopUpdate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_createDisplay(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_createDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        bool a2;
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1b", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2))
        {
            rviz::Display*sipRes;

            sipRes = sipCpp->createDisplay(*a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_rviz_Display,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_createDisplay, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_addDisplay(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_addDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::Display* a0;
        bool a1;
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_rviz_Display, &a0, &a1))
        {
            sipCpp->addDisplay(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_addDisplay, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_removeAllDisplays(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_removeAllDisplays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->removeAllDisplays();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_removeAllDisplays, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_load(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const rviz::Config* a0;
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_rviz_Config, &a0))
        {
            (sipSelfWasArg ? sipCpp->rviz::VisualizationManager::load(*a0) : sipCpp->load(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_load, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_save(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        rviz::Config* a0;
        const rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_rviz_Config, &a0))
        {
            (sipSelfWasArg ? sipCpp->rviz::VisualizationManager::save(*a0) : sipCpp->save(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_save, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getFixedFrame(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getFixedFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->getFixedFrame());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getFixedFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_setFixedFrame(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_setFixedFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFixedFrame(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_setFixedFrame, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getWallClock(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getWallClock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getWallClock();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getWallClock, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getROSTime(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getROSTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getROSTime();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getROSTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getWallClockElapsed(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getWallClockElapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getWallClockElapsed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getWallClockElapsed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getROSTimeElapsed(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getROSTimeElapsed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getROSTimeElapsed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getROSTimeElapsed, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_resetTime(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_resetTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->resetTime();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_resetTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getToolManager(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getToolManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            rviz::ToolManager*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->rviz::VisualizationManager::getToolManager() : sipCpp->getToolManager());

            return sipConvertFromType(sipRes,sipType_rviz_ToolManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getToolManager, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getViewManager(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getViewManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            rviz::ViewManager*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->rviz::VisualizationManager::getViewManager() : sipCpp->getViewManager());

            return sipConvertFromType(sipRes,sipType_rviz_ViewManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getViewManager, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_lockRender(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_lockRender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->lockRender();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_lockRender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_unlockRender(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_unlockRender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->unlockRender();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_unlockRender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_queueRender(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_queueRender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->queueRender();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_queueRender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getFrameCount(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getFrameCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            unsigned PY_LONG_LONG sipRes;

            sipRes = sipCpp->getFrameCount();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getFrameCount, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_notifyConfigChanged(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_notifyConfigChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            sipCpp->notifyConfigChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_notifyConfigChanged, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_emitStatusUpdate(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_emitStatusUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->emitStatusUpdate(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_emitStatusUpdate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_rviz_VisualizationManager_getRootDisplayGroup(PyObject *, PyObject *);}
static PyObject *meth_rviz_VisualizationManager_getRootDisplayGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const rviz::VisualizationManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_rviz_VisualizationManager, &sipCpp))
        {
            rviz::DisplayGroup*sipRes;

            sipRes = sipCpp->getRootDisplayGroup();

            return sipConvertFromType(sipRes,sipType_rviz_DisplayGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_VisualizationManager, sipName_getRootDisplayGroup, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_rviz_VisualizationManager(void *, const sipTypeDef *);}
static void *cast_rviz_VisualizationManager(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_rviz_VisualizationManager)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(rviz::VisualizationManager *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_rviz_VisualizationManager(void *, int);}
static void release_rviz_VisualizationManager(void *sipCppV,int)
{
    rviz::VisualizationManager *sipCpp = reinterpret_cast<rviz::VisualizationManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_rviz_VisualizationManager(sipSimpleWrapper *);}
static void dealloc_rviz_VisualizationManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_rviz_VisualizationManager(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_rviz_VisualizationManager[] = {{163, 0, 1}};


static PyMethodDef methods_rviz_VisualizationManager[] = {
    {SIP_MLNAME_CAST(sipName_addDisplay), meth_rviz_VisualizationManager_addDisplay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createDisplay), meth_rviz_VisualizationManager_createDisplay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_emitStatusUpdate), meth_rviz_VisualizationManager_emitStatusUpdate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getFixedFrame), meth_rviz_VisualizationManager_getFixedFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getFrameCount), meth_rviz_VisualizationManager_getFrameCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getROSTime), meth_rviz_VisualizationManager_getROSTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getROSTimeElapsed), meth_rviz_VisualizationManager_getROSTimeElapsed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRootDisplayGroup), meth_rviz_VisualizationManager_getRootDisplayGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getToolManager), meth_rviz_VisualizationManager_getToolManager, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getViewManager), meth_rviz_VisualizationManager_getViewManager, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getWallClock), meth_rviz_VisualizationManager_getWallClock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getWallClockElapsed), meth_rviz_VisualizationManager_getWallClockElapsed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initialize), meth_rviz_VisualizationManager_initialize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_rviz_VisualizationManager_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lockRender), meth_rviz_VisualizationManager_lockRender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_notifyConfigChanged), meth_rviz_VisualizationManager_notifyConfigChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_queueRender), meth_rviz_VisualizationManager_queueRender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeAllDisplays), meth_rviz_VisualizationManager_removeAllDisplays, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetTime), meth_rviz_VisualizationManager_resetTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_rviz_VisualizationManager_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFixedFrame), meth_rviz_VisualizationManager_setFixedFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startUpdate), meth_rviz_VisualizationManager_startUpdate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stopUpdate), meth_rviz_VisualizationManager_stopUpdate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unlockRender), meth_rviz_VisualizationManager_unlockRender, METH_VARARGS, NULL}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_rviz_VisualizationManager[] = {
    {"statusUpdate(QString)", 0, 0, 0},
    {"configChanged()", 0, 0, 0},
    {"timeChanged()", 0, 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_librviz_sip_rviz_VisualizationManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_rviz__VisualizationManager,
        {0}
    },
    {
        sipNameNr_VisualizationManager,
        {0, 255, 0},
        24, methods_rviz_VisualizationManager,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_rviz_VisualizationManager,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_rviz_VisualizationManager,
    0,
    0,
    0,
    release_rviz_VisualizationManager,
    cast_rviz_VisualizationManager,
    0,
    0,
    0,
    0,
    0,
    0
},
    &rviz::VisualizationManager::staticMetaObject,
    0,
    signals_rviz_VisualizationManager,
    0
};
