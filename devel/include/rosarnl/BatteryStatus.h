// Generated by gencpp from file rosarnl/BatteryStatus.msg
// DO NOT EDIT!


#ifndef ROSARNL_MESSAGE_BATTERYSTATUS_H
#define ROSARNL_MESSAGE_BATTERYSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosarnl
{
template <class ContainerAllocator>
struct BatteryStatus_
{
  typedef BatteryStatus_<ContainerAllocator> Type;

  BatteryStatus_()
    : charging_state(0)
    , charge_percent(0.0)  {
    }
  BatteryStatus_(const ContainerAllocator& _alloc)
    : charging_state(0)
    , charge_percent(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _charging_state_type;
  _charging_state_type charging_state;

   typedef float _charge_percent_type;
  _charge_percent_type charge_percent;



  enum {
    CHARGING_UNKNOWN = -1,
    CHARGING_NOT = 0,
    CHARGING_BULK = 1,
    CHARGING_OVERCHARGE = 2,
    CHARGING_FLOAT = 3,
    CHARGING_BALANCE = 4,
  };


  typedef boost::shared_ptr< ::rosarnl::BatteryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosarnl::BatteryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryStatus_

typedef ::rosarnl::BatteryStatus_<std::allocator<void> > BatteryStatus;

typedef boost::shared_ptr< ::rosarnl::BatteryStatus > BatteryStatusPtr;
typedef boost::shared_ptr< ::rosarnl::BatteryStatus const> BatteryStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosarnl::BatteryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosarnl::BatteryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosarnl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rosarnl': ['/home/lassegoncz/catkin_ws/src/ros-arnl/msg', '/home/lassegoncz/catkin_ws/devel/share/rosarnl/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosarnl::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosarnl::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosarnl::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosarnl::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosarnl::BatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosarnl::BatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosarnl::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5ae24af1ef085b1c28fd0c2d4869c5f";
  }

  static const char* value(const ::rosarnl::BatteryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5ae24af1ef085b1ULL;
  static const uint64_t static_value2 = 0xc28fd0c2d4869c5fULL;
};

template<class ContainerAllocator>
struct DataType< ::rosarnl::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosarnl/BatteryStatus";
  }

  static const char* value(const ::rosarnl::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosarnl::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 CHARGING_UNKNOWN = -1\n\
int8 CHARGING_NOT = 0\n\
int8 CHARGING_BULK = 1\n\
int8 CHARGING_OVERCHARGE = 2\n\
int8 CHARGING_FLOAT = 3\n\
int8 CHARGING_BALANCE = 4\n\
\n\
int8 charging_state\n\
float32 charge_percent\n\
";
  }

  static const char* value(const ::rosarnl::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosarnl::BatteryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charging_state);
      stream.next(m.charge_percent);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosarnl::BatteryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosarnl::BatteryStatus_<ContainerAllocator>& v)
  {
    s << indent << "charging_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.charging_state);
    s << indent << "charge_percent: ";
    Printer<float>::stream(s, indent + "  ", v.charge_percent);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSARNL_MESSAGE_BATTERYSTATUS_H
