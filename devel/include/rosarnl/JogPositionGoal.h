// Generated by gencpp from file rosarnl/JogPositionGoal.msg
// DO NOT EDIT!


#ifndef ROSARNL_MESSAGE_JOGPOSITIONGOAL_H
#define ROSARNL_MESSAGE_JOGPOSITIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>

namespace rosarnl
{
template <class ContainerAllocator>
struct JogPositionGoal_
{
  typedef JogPositionGoal_<ContainerAllocator> Type;

  JogPositionGoal_()
    : offset()
    , timeout()  {
    }
  JogPositionGoal_(const ContainerAllocator& _alloc)
    : offset(_alloc)
    , timeout()  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _offset_type;
  _offset_type offset;

   typedef ros::Duration _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::rosarnl::JogPositionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosarnl::JogPositionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct JogPositionGoal_

typedef ::rosarnl::JogPositionGoal_<std::allocator<void> > JogPositionGoal;

typedef boost::shared_ptr< ::rosarnl::JogPositionGoal > JogPositionGoalPtr;
typedef boost::shared_ptr< ::rosarnl::JogPositionGoal const> JogPositionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosarnl::JogPositionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosarnl::JogPositionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosarnl

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'rosarnl': ['/home/lassegoncz/catkin_ws/src/ros-arnl/msg', '/home/lassegoncz/catkin_ws/devel/share/rosarnl/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosarnl::JogPositionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosarnl::JogPositionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosarnl::JogPositionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7800e2305f96351593150df12af52c22";
  }

  static const char* value(const ::rosarnl::JogPositionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7800e2305f963515ULL;
  static const uint64_t static_value2 = 0x93150df12af52c22ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosarnl/JogPositionGoal";
  }

  static const char* value(const ::rosarnl::JogPositionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# goal offset\n\
geometry_msgs/Pose2D offset\n\
duration timeout\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# Deprecated\n\
# Please use the full 3D pose.\n\
\n\
# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n\
\n\
# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n\
\n\
\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::rosarnl::JogPositionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.offset);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JogPositionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosarnl::JogPositionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosarnl::JogPositionGoal_<ContainerAllocator>& v)
  {
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
    s << indent << "timeout: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSARNL_MESSAGE_JOGPOSITIONGOAL_H
